<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="53:RadioCountToLedsAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x404d8ea0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x4037a358"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.1.0/tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x4037a358"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x404b6240"/></to>
    </wire>
    <wire loc="55:RadioCountToLedsAppC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x404f2d50"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x4093bcc8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Receive" scoped="" ref="0x4093bcc8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40580558"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x404d2e58"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:RadioCountToLedsAppC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x404f8380"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x4093f888"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMSend" scoped="" ref="0x4093f888"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40af1538"/></to>
    </wire>
    <wire loc="57:RadioCountToLedsAppC.nc">
      <from><interface-ref name="AMControl" scoped="" ref="0x404fca10"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x40581288"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x40581288"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x4058b2a0"/></to>
    </wire>
    <wire loc="58:RadioCountToLedsAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x404d8298"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40376d28"/></to>
    </wire>
    <wire loc="40:/opt/tinyos-2.1.0/tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40376d28"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x405113d8"/></to>
    </wire>
    <wire loc="59:RadioCountToLedsAppC.nc">
      <from><interface-ref name="MilliTimer" scoped="" ref="0x405014e0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40936030"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x40936030"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x4082fa68"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:RadioCountToLedsAppC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x40505ce8"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x4093ff20"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x4093ff20"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x4057f010"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.1.0/tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4037c010"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x408272c0"/></to>
    </wire>
    <wire loc="41:/opt/tinyos-2.1.0/tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4037c010"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40809db8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4037c010"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40b33300"/></to>
    </wire>
    <wire loc="78:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4037c010"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x405d3a88"/></to>
    </wire>
    <wire loc="79:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4037c010"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x406bcac0"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.1.0/tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x404b65d8"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x402eb408"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.1.0/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x402eb408"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x403586e0"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.1.0/tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x404b6ba0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x4037c988"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x4037c988"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x4037f488"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.1.0/tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x404ca010"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x4037c010"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x403829c8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40740d10"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x40382268"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x404c1888"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x4037fc70"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x404c14d8"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x4037f868"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40529c88"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x4037f868"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x4038df00"/></to>
    </wire>
    <wire loc="23:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x4038df00"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x4038ce60"/></to>
    </wire>
    <wire loc="24:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x4038df00"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x40393d38"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x4038c2e8"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x403829c8"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x40393d38"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x403bbe08"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x40393d38"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x40399d18"/></to>
    </wire>
    <wire loc="26:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformC.nc">
      <from><interface-ref name="SerialIdPin" scoped="" ref="0x403953b0"/></from>
      <to><interface-ref name="PortA4" scoped="" ref="0x403f5210"/></to>
    </wire>
    <wire loc="132:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x403f5210"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x4043f7d0"/></to>
    </wire>
    <wire loc="27:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x40395da0"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x4038c2e8"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="CHP_OUT" scoped="" ref="0x403c8b90"/></from>
      <to><interface-ref name="PortA6" scoped="" ref="0x403f4670"/></to>
    </wire>
    <wire loc="134:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x403f4670"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x4043eac8"/></to>
    </wire>
    <wire loc="46:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PALE" scoped="" ref="0x403c2588"/></from>
      <to><interface-ref name="PortD4" scoped="" ref="0x404038e0"/></to>
    </wire>
    <wire loc="159:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x404038e0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x404564f0"/></to>
    </wire>
    <wire loc="47:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PCLK" scoped="" ref="0x403c9010"/></from>
      <to><interface-ref name="PortD6" scoped="" ref="0x40402ce8"/></to>
    </wire>
    <wire loc="161:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x40402ce8"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x404557d0"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PDATA" scoped="" ref="0x403c9a00"/></from>
      <to><interface-ref name="PortD7" scoped="" ref="0x40401750"/></to>
    </wire>
    <wire loc="162:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x40401750"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x40454170"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="SpiSck" scoped="" ref="0x403e2c60"/></from>
      <to><interface-ref name="PortB1" scoped="" ref="0x403f24b0"/></to>
    </wire>
    <wire loc="138:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x403f24b0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x404454f0"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="SpiMiso" scoped="" ref="0x403dc678"/></from>
      <to><interface-ref name="PortB3" scoped="" ref="0x403fb8e0"/></to>
    </wire>
    <wire loc="140:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x403fb8e0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x404447d0"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="SpiMosi" scoped="" ref="0x403db0a8"/></from>
      <to><interface-ref name="PortB2" scoped="" ref="0x403f2ea8"/></to>
    </wire>
    <wire loc="139:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x403f2ea8"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x40445e48"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="OC1C" scoped="" ref="0x403dba90"/></from>
      <to><interface-ref name="PortB7" scoped="" ref="0x403f82f0"/></to>
    </wire>
    <wire loc="144:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x403f82f0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x40442e48"/></to>
    </wire>
    <wire loc="182:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x404144b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x404953e8"/></to>
    </wire>
    <wire loc="156:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x40405a28"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x40458790"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x40458790"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a1f010"/></to>
    </wire>
    <wire loc="167:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x404080a0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x4045b410"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x4045b410"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a4e228"/></to>
    </wire>
    <wire loc="176:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x4040d210"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x4046bc88"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x4046bc88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a82538"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x4043eac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x409720b0"/></to>
    </wire>
    <wire loc="174:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x4040fce8"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x40460968"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x40460968"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a850b0"/></to>
    </wire>
    <wire loc="137:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x403f3a98"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x40446b00"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x40446b00"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x409a8de8"/></to>
    </wire>
    <wire loc="148:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x40400210"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x404486b0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x404486b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x409cfd70"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x404564f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a1a010"/></to>
    </wire>
    <wire loc="170:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x40407ea8"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x40464170"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x40464170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a490b0"/></to>
    </wire>
    <wire loc="129:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x403ed2f0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x40436b80"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x40436b80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40959d70"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x404447d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x409a0c08"/></to>
    </wire>
    <wire loc="151:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x403fd0a0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x40452330"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x40452330"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x409ebc08"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x40454170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a15010"/></to>
    </wire>
    <wire loc="179:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x4040b0a0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x40469988"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x40469988"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a7d538"/></to>
    </wire>
    <wire loc="185:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x40412590"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x404993b0"/></to>
    </wire>
    <wire loc="165:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x4040ac08"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x4045c090"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x4045c090"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a52de0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x4043f7d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40976c08"/></to>
    </wire>
    <wire loc="143:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x403f9830"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x404424f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x404424f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4099ba88"/></to>
    </wire>
    <wire loc="183:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x404130c0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x404938f0"/></to>
    </wire>
    <wire loc="146:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x403f8ce8"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x404493d8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x404493d8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x409d2938"/></to>
    </wire>
    <wire loc="157:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x404044b0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x40457170"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x40457170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a1e9e8"/></to>
    </wire>
    <wire loc="168:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x40408a98"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x4045bd68"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x4045bd68"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a4dc08"/></to>
    </wire>
    <wire loc="177:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x4040dc08"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x4046a6b0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x4046a6b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a80010"/></to>
    </wire>
    <wire loc="135:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x403f30a0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x4043d4f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x4043d4f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40971a88"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x404454f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x409a37f8"/></to>
    </wire>
    <wire loc="149:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x40400c08"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x40453030"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x40453030"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x409ee7f8"/></to>
    </wire>
    <wire loc="160:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x404022f0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x40456e48"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x40456e48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a199e8"/></to>
    </wire>
    <wire loc="171:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x404068e0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x40464ac8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x40464ac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a48a88"/></to>
    </wire>
    <wire loc="130:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x403edce8"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x404414f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x404414f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4097a7f8"/></to>
    </wire>
    <wire loc="141:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x403fa2f0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x40443170"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x40443170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4099e6c0"/></to>
    </wire>
    <wire loc="152:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x403fda98"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x40452c88"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x40452c88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x409e96c0"/></to>
    </wire>
    <wire loc="180:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x4040ba98"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x40468330"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x40468330"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a9f010"/></to>
    </wire>
    <wire loc="155:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x403fcea8"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x4044edc8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x4044edc8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a21538"/></to>
    </wire>
    <wire loc="166:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x40409670"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x4045c9e8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x4045c9e8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a507f8"/></to>
    </wire>
    <wire loc="175:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x4040e750"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x4046b330"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x4046b330"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a84a88"/></to>
    </wire>
    <wire loc="186:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x40411010"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x404978a0"/></to>
    </wire>
    <wire loc="133:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x403f5c08"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x4043e170"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x4043e170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x409746c0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x40442e48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x409ba538"/></to>
    </wire>
    <wire loc="173:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x4040f2f0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x40460010"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x40460010"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a876c0"/></to>
    </wire>
    <wire loc="147:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x403f7750"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x40449d30"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x40449d30"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x409d03b0"/></to>
    </wire>
    <wire loc="158:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x40404ea8"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x40457ac8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x40457ac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a1c538"/></to>
    </wire>
    <wire loc="169:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x404074b0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x40465790"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x40465790"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a4b6c0"/></to>
    </wire>
    <wire loc="178:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x4040c670"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x40469030"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x40469030"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a7f9e8"/></to>
    </wire>
    <wire loc="128:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x403988c0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x40436228"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x40436228"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4095a3b0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x40445e48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x409a1228"/></to>
    </wire>
    <wire loc="150:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x403ff670"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x40453988"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x40453988"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x409ec228"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x404557d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a17538"/></to>
    </wire>
    <wire loc="184:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x40413ab8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40491dd8"/></to>
    </wire>
    <wire loc="164:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x4040a210"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x4045d6f8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x4045d6f8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40a54418"/></to>
    </wire>
    <wire loc="153:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x403fc4b0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x404516b0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x404516b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x409e70b0"/></to>
    </wire>
    <wire loc="131:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x403f6750"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x40441e48"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x40441e48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40978228"/></to>
    </wire>
    <wire loc="142:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x403fad68"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x40443ac8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x40443ac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4099c0b0"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.1.0/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x402f2bc0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40358f18"/></to>
    </wire>
    <wire loc="44:/opt/tinyos-2.1.0/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x40357b90"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x40366438"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x4036a218"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x4089d7b8"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.1.0/tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x40529c88"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40511090"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.1.0/tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x405100b0"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x40513e30"/></to>
    </wire>
    <wire loc="47:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x40513e30"/></from>
      <to><interface-ref name="PortA2" scoped="" ref="0x403edce8"/></to>
    </wire>
    <wire loc="44:/opt/tinyos-2.1.0/tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x40510a98"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x4052a880"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x4052a880"/></from>
      <to><interface-ref name="PortA1" scoped="" ref="0x403ed2f0"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.1.0/tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x4051d4a0"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x40529300"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x40529300"/></from>
      <to><interface-ref name="PortA0" scoped="" ref="0x403988c0"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x4057f010"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40588c28"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x4093e5d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x4057f700"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x4057f700"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40588010"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Acks" scoped="" ref="0x4093d250"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x4057e3f0"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x4057e3f0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x405873f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Send" scoped="" ref="0x40af1c00"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x405539f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x40af0310"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x4057f700"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.1.0/tos/system/AMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x405539f0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40577908"/></to>
    </wire>
    <wire loc="46:/opt/tinyos-2.1.0/tos/system/AMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x405760a8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40581b60"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x40581b60"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x4058bb78"/></to>
    </wire>
    <wire loc="47:/opt/tinyos-2.1.0/tos/system/AMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x40576750"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x4057f700"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.1.0/tos/system/AMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x405753f0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x4057f010"/></to>
    </wire>
    <wire>
      <from><interface-ref name="errorTask" scoped="" ref="0x40575ac8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402f2bc0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="CancelTask" scoped="" ref="0x40575f00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402f2bc0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x4058b2a0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x405867c8"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x4058bb78"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40593748"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x40580bf0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x4058abf0"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x4058abf0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x405927b8"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x40588c28"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x405bd870"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x40580558"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x4058a558"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x4058a558"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40592120"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x405873f0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x405c79d0"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x40588010"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40592b28"/></to>
    </wire>
    <wire loc="81:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x405867c8"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x405d3e20"/></to>
    </wire>
    <wire loc="84:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x405bd870"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40654548"/></to>
    </wire>
    <wire loc="90:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x405c79d0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40653a10"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x405947e8"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x405ba010"/></to>
    </wire>
    <wire loc="91:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x405ba010"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x40652010"/></to>
    </wire>
    <wire loc="71:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x40591848"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40586db0"/></to>
    </wire>
    <wire loc="82:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x40586db0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40641620"/></to>
    </wire>
    <wire loc="72:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x40590010"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x405bd518"/></to>
    </wire>
    <wire loc="83:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x405bd518"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40641d00"/></to>
    </wire>
    <wire loc="73:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><function-ref name="amAddress" scoped="" ref="0x40590d10"/></from>
      <to><function-ref name="amAddress" scoped="" ref="0x4091b700"/></to>
    </wire>
    <wire loc="74:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x405903c8"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x405bd870"/></to>
    </wire>
    <wire loc="88:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x405c0500"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x405d2d70"/></to>
    </wire>
    <wire loc="86:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CsmaControl" scoped="" ref="0x405bcc48"/></from>
      <to><interface-ref name="CsmaControl" scoped="" ref="0x405d2460"/></to>
    </wire>
    <wire loc="87:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CsmaBackoff" scoped="" ref="0x405b87e8"/></from>
      <to><interface-ref name="CsmaBackoff" scoped="" ref="0x405d28c8"/></to>
    </wire>
    <wire loc="89:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RadioTimeStamping" scoped="" ref="0x405c74f8"/></from>
      <to><interface-ref name="RadioTimeStamping" scoped="" ref="0x40654110"/></to>
    </wire>
    <wire loc="93:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC1000Control" scoped="" ref="0x405e6c10"/></from>
      <to><interface-ref name="CC1000Control" scoped="" ref="0x406bb6a0"/></to>
    </wire>
    <wire loc="94:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x405e5010"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x40821d50"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.1.0/tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x40821d50"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x4081fc18"/></to>
    </wire>
    <wire loc="95:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC1000Squelch" scoped="" ref="0x405e4d88"/></from>
      <to><interface-ref name="CC1000Squelch" scoped="" ref="0x406bce60"/></to>
    </wire>
    <wire loc="96:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="WakeupTimer" scoped="" ref="0x405e55a0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x4080a660"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x4080a660"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x4082fa68"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="97:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="ByteRadio" scoped="" ref="0x405ec4c8"/></from>
      <to><interface-ref name="ByteRadio" scoped="" ref="0x40654c40"/></to>
    </wire>
    <wire loc="98:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="ByteRadioInit" scoped="" ref="0x405e3a48"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40645e28"/></to>
    </wire>
    <wire loc="99:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="ByteRadioControl" scoped="" ref="0x405e0e28"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x406411f8"/></to>
    </wire>
    <wire loc="101:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC1000Control" scoped="" ref="0x40652400"/></from>
      <to><interface-ref name="CC1000Control" scoped="" ref="0x406bb6a0"/></to>
    </wire>
    <wire loc="102:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="HplCC1000Spi" scoped="" ref="0x40651330"/></from>
      <to><interface-ref name="HplCC1000Spi" scoped="" ref="0x40724728"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="HplCC1000Spi" scoped="" ref="0x40724728"/></from>
      <to><interface-ref name="HplCC1000Spi" scoped="" ref="0x403e2148"/></to>
    </wire>
    <wire loc="103:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><function-ref name="amAddress" scoped="" ref="0x4064e398"/></from>
      <to><function-ref name="amAddress" scoped="" ref="0x4091b700"/></to>
    </wire>
    <wire loc="104:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RssiRx" scoped="" ref="0x406504a0"/></from>
      <to><interface-ref name="Rssi" scoped="" ref="0x406d0368"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="105:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC1000Squelch" scoped="" ref="0x40651dd0"/></from>
      <to><interface-ref name="CC1000Squelch" scoped="" ref="0x406bce60"/></to>
    </wire>
    <wire loc="107:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RssiNoiseFloor" scoped="" ref="0x405edac0"/></from>
      <to><interface-ref name="Rssi" scoped="" ref="0x406d0368"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="108:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RssiCheckChannel" scoped="" ref="0x405f1868"/></from>
      <to><interface-ref name="Rssi" scoped="" ref="0x406d0368"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RssiPulseCheck" scoped="" ref="0x405ee608"/></from>
      <to><interface-ref name="Rssi" scoped="" ref="0x406d0368"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="110:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><function-ref name="cancelRssi" scoped="" ref="0x405fd438"/></from>
      <to><function-ref name="cancel" scoped="" ref="0x406cf168"/></to>
    </wire>
    <wire loc="111:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x405efa28"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x4091e868"/></to>
    </wire>
    <wire loc="113:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="ActualRssi" scoped="" ref="0x406cbbe8"/></from>
      <to><interface-ref name="RssiAdc" scoped="" ref="0x40725328"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="RssiAdc" scoped="" ref="0x40725328"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x40721480"/></to>
    </wire>
    <wire loc="114:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x406cb398"/></from>
      <to><interface-ref name="RssiResource" scoped="" ref="0x40724010"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="RssiResource" scoped="" ref="0x40724010"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40722cc8"/></to>
    </wire>
    <wire loc="115:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC" scoped="" ref="0x406e0628"/></from>
      <to><interface-ref name="HplCC1000" scoped="" ref="0x407231b8"/></to>
    </wire>
    <wire loc="47:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="HplCC1000" scoped="" ref="0x407231b8"/></from>
      <to><interface-ref name="HplCC1000" scoped="" ref="0x403c0b88"/></to>
    </wire>
    <wire loc="116:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x406e0df0"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x4091e868"/></to>
    </wire>
    <wire loc="108:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <from><interface-ref name="setWakeupTask" scoped="" ref="0x405fa040"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402f2bc0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <from><interface-ref name="startStopDone" scoped="" ref="0x405ffd18"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402f2bc0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="293:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <from><interface-ref name="sleepCheck" scoped="" ref="0x406178b0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402f2bc0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="316:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <from><interface-ref name="adjustSquelch" scoped="" ref="0x406141f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402f2bc0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="377:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <from><interface-ref name="signalPacketSent" scoped="" ref="0x4067dd20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402f2bc0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="548:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <from><interface-ref name="signalPacketReceived" scoped="" ref="0x4069cbd8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402f2bc0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="ReadNow" scoped="" ref="0x40721480"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x40730e68"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x40722cc8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x4072b620"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x4080e070"/></from>
      <to><interface-ref name="RssiConfig" scoped="" ref="0x403c85a0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x4072fe08"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x4080e070"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x40740100"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x4080e548"/></to>
    </wire>
    <wire loc="30:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Read" scoped="" ref="0x4072eec0"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x40812e78"/></to>
    </wire>
    <wire loc="31:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x40730e68"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x407e8978"/></to>
    </wire>
    <wire loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x408067d8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x4072d670"/></to>
    </wire>
    <wire loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x407e7eb0"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x4072fe08"/></to>
    </wire>
    <wire loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Service" scoped="" ref="0x407e9ba0"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x407eb968"/></to>
    </wire>
    <wire loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x407e7638"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x4073c300"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x4073c300"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x4074b628"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x40738870"/></from>
      <to><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x4074bbb0"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x4072b620"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x407922b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x407922b8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40b327a0"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x407c9980"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x40740100"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x40742498"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x4073f9f8"/></to>
    </wire>
    <wire loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x4073f9f8"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x4076c6c0"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x4074c968"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x40382268"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x407c7118"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x4074b198"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x407c7828"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40792e00"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40792e00"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40b31300"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x40769b38"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x4036b148"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x407929f8"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x40b32ee0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x407c94d0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x40b31998"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x40b31e58"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x407c9980"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Queue" scoped="" ref="0x40b2f290"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0x40b33638"/></to>
    </wire>
    <wire>
      <from><interface-ref name="grantedTask" scoped="" ref="0x40b2e510"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402f2bc0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x40b3d9b8"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x407c7118"/></to>
    </wire>
    <wire>
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x40b3ddb0"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x407c7510"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40b65150"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x407c7828"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x40b657e8"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x407c7ec0"/></to>
    </wire>
    <wire loc="103:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcP.nc">
      <from><interface-ref name="acquiredData" scoped="" ref="0x407f7538"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402f2bc0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="44:/opt/tinyos-2.1.0/tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x40821490"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x4081f358"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.1.0/tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x406e1278"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40809db8"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.1.0/tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x4082fa68"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x40827a70"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.1.0/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x40827a70"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x408dc808"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.1.0/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x408272c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x4083b240"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.1.0/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x4083daf0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x4090a348"/></to>
    </wire>
    <wire loc="35:/opt/tinyos-2.1.0/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0x4083b240"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x408c15a8"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.1.0/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x4090fb78"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x4083ca88"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.1.0/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x408e1e50"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0x40835978"/></to>
    </wire>
    <wire loc="36:/opt/tinyos-2.1.0/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0x40835978"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x408c19e0"/></to>
    </wire>
    <wire loc="55:/opt/tinyos-2.1.0/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x4090ace0"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0x40830310"/></to>
    </wire>
    <wire loc="37:/opt/tinyos-2.1.0/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0x40830310"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x408be5b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Counter" scoped="" ref="0x408be5b8"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40b56f08"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Init" scoped="" ref="0x408c15a8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40b58070"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Alarm" scoped="" ref="0x408c19e0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x40b584a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x40b540f0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x4088f488"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x4088f488"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40886010"/></to>
    </wire>
    <wire>
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x40b792b8"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x4088d760"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x4088d760"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x4089f360"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Compare" scoped="" ref="0x40b79ae0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x4088b0f0"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x4088b0f0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x4089fcc0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="TimerAsync" scoped="" ref="0x40b775b8"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x4088ac30"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x4088ac30"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x4089dc18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="fired" scoped="" ref="0x408df818"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402f2bc0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x4090dda8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402f2bc0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x4093a010"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x4057f010"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x4093a6a8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x4057f700"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="45:/opt/tinyos-2.1.0/tos/system/MainC.nc">
      <documentation loc="34:/opt/tinyos-2.1.0/tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="35:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformC.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformC.nc">
        <short>&#10; Initialisation component for mica-family platforms.</short>
        <long>&#10; Initialisation component for mica-family platforms. See TEP107. Each &#10; mica-family member must also provide a MotePlatformC with initialisation&#10; specific to that member.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="33:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformP.nc" safe="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformP.nc">
        <short>&#10; Internal platform boot code.</short>
        <long>&#10; Internal platform boot code.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="15:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformC.nc">
      <documentation loc="10:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformC.nc">
        <short>&#10; The portion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The portion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="15:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformP.nc" safe="">
      <documentation loc="10:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformP.nc">
        <short>&#10; The portion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The portion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplCC1000InitP" loc="36:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <documentation loc="30:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
        <short>&#10; Hardware initialisation for the CC1000 radio.</short>
        <long>&#10; Hardware initialisation for the CC1000 radio. This component is always&#10; included even if the radio is not used.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC1000P" loc="41:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc" safe="">
      <module/>
    </component>
    <component qname="HplCC1000SpiP" loc="40:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc" safe="">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
        <short>&#10; Low-level functions to access the CC1000 bus.</short>
        <long>&#10; Low-level functions to access the CC1000 bus. Built using the mica2&#10; hardware SPI.&#10;&#10; @author Jaein Jeong&#10; @author Philip buonadonna&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <documentation loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="31(HplAtm128GeneralIOC.PortA):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:59">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:58">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:57">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="32(HplAtm128GeneralIOC.PortA.Bit0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="32(HplAtm128GeneralIOC.PortA.Bit1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="32(HplAtm128GeneralIOC.PortA.Bit2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="32(HplAtm128GeneralIOC.PortA.Bit3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="32(HplAtm128GeneralIOC.PortA.Bit4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="32(HplAtm128GeneralIOC.PortA.Bit5):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="32(HplAtm128GeneralIOC.PortA.Bit6):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="32(HplAtm128GeneralIOC.PortA.Bit7):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="31(HplAtm128GeneralIOC.PortB):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:56">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="32(HplAtm128GeneralIOC.PortB.Bit0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="32(HplAtm128GeneralIOC.PortB.Bit1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="32(HplAtm128GeneralIOC.PortB.Bit2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="32(HplAtm128GeneralIOC.PortB.Bit3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="32(HplAtm128GeneralIOC.PortB.Bit4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="32(HplAtm128GeneralIOC.PortB.Bit5):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="32(HplAtm128GeneralIOC.PortB.Bit6):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="32(HplAtm128GeneralIOC.PortB.Bit7):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="31(HplAtm128GeneralIOC.PortC):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:53">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="32(HplAtm128GeneralIOC.PortC.Bit0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="32(HplAtm128GeneralIOC.PortC.Bit1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="32(HplAtm128GeneralIOC.PortC.Bit2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="32(HplAtm128GeneralIOC.PortC.Bit3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="32(HplAtm128GeneralIOC.PortC.Bit4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="32(HplAtm128GeneralIOC.PortC.Bit5):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="32(HplAtm128GeneralIOC.PortC.Bit6):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="32(HplAtm128GeneralIOC.PortC.Bit7):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="31(HplAtm128GeneralIOC.PortD):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="32(HplAtm128GeneralIOC.PortD.Bit0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="32(HplAtm128GeneralIOC.PortD.Bit1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="32(HplAtm128GeneralIOC.PortD.Bit2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="32(HplAtm128GeneralIOC.PortD.Bit3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="32(HplAtm128GeneralIOC.PortD.Bit4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="32(HplAtm128GeneralIOC.PortD.Bit5):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="32(HplAtm128GeneralIOC.PortD.Bit6):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="32(HplAtm128GeneralIOC.PortD.Bit7):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="31(HplAtm128GeneralIOC.PortE):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="32(HplAtm128GeneralIOC.PortE.Bit0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="32(HplAtm128GeneralIOC.PortE.Bit1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="32(HplAtm128GeneralIOC.PortE.Bit2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="32(HplAtm128GeneralIOC.PortE.Bit3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="32(HplAtm128GeneralIOC.PortE.Bit4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="32(HplAtm128GeneralIOC.PortE.Bit5):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="32(HplAtm128GeneralIOC.PortE.Bit6):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="32(HplAtm128GeneralIOC.PortE.Bit7):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="31(HplAtm128GeneralIOC.PortF):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="32(HplAtm128GeneralIOC.PortF.Bit0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="32(HplAtm128GeneralIOC.PortF.Bit1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="32(HplAtm128GeneralIOC.PortF.Bit2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="32(HplAtm128GeneralIOC.PortF.Bit3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="32(HplAtm128GeneralIOC.PortF.Bit4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="32(HplAtm128GeneralIOC.PortF.Bit5):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="32(HplAtm128GeneralIOC.PortF.Bit6):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="32(HplAtm128GeneralIOC.PortF.Bit7):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="33(HplAtm128GeneralIOC.F0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="33(HplAtm128GeneralIOC.F1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="33(HplAtm128GeneralIOC.F2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="33(HplAtm128GeneralIOC.F3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="33(HplAtm128GeneralIOC.F4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="33(HplAtm128GeneralIOC.F5):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="33(HplAtm128GeneralIOC.F6):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="33(HplAtm128GeneralIOC.F7):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="33(HplAtm128GeneralIOC.G0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="33(HplAtm128GeneralIOC.G1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="33(HplAtm128GeneralIOC.G2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="33(HplAtm128GeneralIOC.G3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="33(HplAtm128GeneralIOC.G4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="22:/opt/tinyos-2.1.0/tos/platforms/mica/MeasureClockC.nc" safe="">
      <documentation loc="14:/opt/tinyos-2.1.0/tos/platforms/mica/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="45:/opt/tinyos-2.1.0/tos/system/RealMainP.nc" safe="">
      <documentation loc="38:/opt/tinyos-2.1.0/tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="35:/opt/tinyos-2.1.0/tos/system/TinySchedulerC.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="43:/opt/tinyos-2.1.0/tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/McuSleepC.nc" safe="">
      <documentation loc="26:/opt/tinyos-2.1.0/tos/chips/atm128/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.10 2008/07/23 17:25:42 idgay Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @date   October 26, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RadioCountToLedsC" loc="46:RadioCountToLedsC.nc" safe="">
      <documentation loc="35:RadioCountToLedsC.nc">
        <short>&#10; Implementation of the RadioCountToLeds application.</short>
        <long>&#10; Implementation of the RadioCountToLeds application. RadioCountToLeds &#10; maintains a 4Hz counter, broadcasting its value in an AM packet &#10; every time it gets updated. A RadioCountToLeds node that hears a counter &#10; displays the bottom three bits on its LEDs. This application is a useful &#10; test to show that basic AM communication and timers work.&#10;&#10; @author Philip Levis&#10; @date   June 6 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="LedsC" loc="34:/opt/tinyos-2.1.0/tos/system/LedsC.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="33:/opt/tinyos-2.1.0/tos/system/LedsP.nc" safe="">
      <documentation loc="24:/opt/tinyos-2.1.0/tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="33:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformLedsC.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformLedsC.nc">
        <short>&#10; Platform-specific LED interface.</short>
        <long>&#10; Platform-specific LED interface.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RadioCountToLedsAppC.AMSenderC" loc="39(RadioCountToLedsAppC.AMSenderC):/opt/tinyos-2.1.0/tos/system/AMSenderC.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RadioCountToLedsAppC.AMSenderC.AMQueueEntryP" loc="35(RadioCountToLedsAppC.AMSenderC.AMQueueEntryP):/opt/tinyos-2.1.0/tos/system/AMQueueEntryP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x404d2e58"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="34:/opt/tinyos-2.1.0/tos/system/AMQueueP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="37(AMQueueP.AMQueueImplP):/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageC" loc="46:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <documentation loc="38:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
        <short>&#10; The Active Message layer on the mica2 platform.</short>
        <long>&#10; The Active Message layer on the mica2 platform. This is a naming wrapper&#10; around the CC1000 Active Message layer.&#10;&#10; @author Philip Levis&#10; @date June 19 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC1000ActiveMessageC" loc="44:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <documentation loc="32:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
        <short>&#10;&#10; The Active Message layer for the CC1000 radio.</short>
        <long>&#10;&#10; The Active Message layer for the CC1000 radio. This configuration&#10; just layers the AM dispatch (CC1000ActiveMessageM) on top of the&#10; underlying CC1000 radio packet (CC1000CsmaRadioC), which is&#10; inherently an AM packet (acknowledgements based on AM destination&#10; addr and group).&#10; &#10; @author Philip Levis&#10; @date June 19 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC1000ActiveMessageP" loc="38:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageP.nc" safe="">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageP.nc">
        <short>&#10; Implementation component for CC1000ActiveMessageC.</short>
        <long>&#10; Implementation component for CC1000ActiveMessageC.&#10;&#10; @author Philip Levis&#10; @date June 19 2006&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000CsmaRadioC" loc="52:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <documentation loc="30:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
        <short>&#10; A low-power-listening CC1000 radio stack.</short>
        <long>&#10; A low-power-listening CC1000 radio stack.&#10;&#10; Radio logic is split between Csma (media-access control, low-power&#10; listening and general control) and SendReceive (packet reception and&#10; transmission). &#10;&#10; CC1000RssiP (RSSI sharing), CC1000SquelchP (noise-floor estimation)&#10; and CC1000ControlP (radio configuration) provide supporting roles.&#10;&#10; This code has some degree of platform-independence, via the HplCC1000,&#10; RssiAdc and HplCC1000Spi interfaces which must be provided by the&#10; platform. However, these interfaces may still reflect some&#10; particularities of the mica2 hardware implementation.&#10;&#10; @author Joe Polastre&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC1000CsmaP" loc="53:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc" safe="">
      <documentation loc="37:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
        <short>&#10; A rewrite of the low-power-listening CC1000 radio stack.</short>
        <long>&#10; A rewrite of the low-power-listening CC1000 radio stack.&#10; This file contains the CSMA and low-power listening logic. Actual&#10; packet transmission and reception is in SendReceive.&#10; &#60;p>&#10; This code has some degree of platform-independence, via the&#10; CC1000Control, RSSIADC and SpiByteFifo interfaces which must be provided&#10; by the platform. However, these interfaces may still reflect some&#10; particularities of the mica2 hardware implementation.&#10;&#10; @author Philip Buonadonna&#10; @author Jaein Jeong&#10; @author Joe Polastre&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000SendReceiveP" loc="55:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc" safe="">
      <documentation loc="36:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
        <short>&#10; A rewrite of the low-power-listening CC1000 radio stack.</short>
        <long>&#10; A rewrite of the low-power-listening CC1000 radio stack.&#10; This file contains the send and receive logic for the CC1000 radio.&#10; It does not do any media-access control. It requests the channel&#10; via the ready-to-send event (rts) and starts transmission on reception&#10; of the clear-to-send command (cts). It listens for packets if the&#10; listen() command is called, and stops listening when off() is called.&#10; &#60;p>&#10; This code has some degree of platform-independence, via the&#10; CC1000Control, RSSIADC and SpiByteFifo interfaces which must be provided&#10; by the platform. However, these interfaces may still reflect some&#10; particularities of the mica2 hardware implementation.&#10;&#10; @author Philip Buonadonna&#10; @author Jaein Jeong&#10; @author Joe Polastre&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000RssiP" loc="44:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000RssiP.nc" safe="">
      <documentation loc="30:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000RssiP.nc">
        <short>&#10;   RSSI fun.</short>
        <long>&#10;   RSSI fun. It's used for lots of things, and a request to read it&#10;   for one purpose may have to be discarded if conditions change. For&#10;   example, if we've initiated a noise-floor measure, but start &#10;   receiving a packet, we have to:&#60;ul>&#10;   &#60;li>cancel the noise-floor measure (we don't know if the value will&#10;     reflect the received packet or the previous idle state)&#10;   &#60;li>start an RSSI measurement so that we can report signal strength&#10;     to the application&#10;   &#60;/ul>&#60;p>&#10;   This module hides the complexities of cancellation from the rest of&#10;   the stack.&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000SquelchP" loc="40:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SquelchP.nc" safe="">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SquelchP.nc">
        <short>&#10; Clear threshold estimation based on RSSI measurements.</short>
        <long>&#10; Clear threshold estimation based on RSSI measurements.&#10;&#10; @author Philip Buonadonna&#10; @author Jaein Jeong&#10; @author Joe Polastre&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000ControlP" loc="41:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ControlP.nc" safe="">
      <documentation loc="32:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ControlP.nc">
        <short>&#10; This module provides the CONTROL functionality for the Chipcon1000&#10; series radio.</short>
        <long>&#10; This module provides the CONTROL functionality for the Chipcon1000&#10; series radio.  It exports a custom interface to control CC1000&#10; operation.&#10;&#10; @author Philip Buonadonna&#10; @author Jaein Jeong&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplCC1000C" loc="35:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <documentation loc="30:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
        <short>&#10; HPL for the CC1000 radio, for the mica2 platform.</short>
        <long>&#10; HPL for the CC1000 radio, for the mica2 platform.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC1000C.RssiChannel" loc="21(HplCC1000C.RssiChannel):/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <documentation loc="10:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadNowClientC.nc">
        <short>&#10; Provide, as per TEP101, Resource-based access to the Atmega128 ADC via a&#10; ReadNow interface.</short>
        <long>&#10; Provide, as per TEP101, Resource-based access to the Atmega128 ADC via a&#10; ReadNow interface.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadNowClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcP" loc="16:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
      <documentation loc="10:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
        <short>&#10; Support component for AdcReadClientC and AdcReadNowClientC.</short>
        <long>&#10; Support component for AdcReadClientC and AdcReadNowClientC.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcC" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <documentation loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
        <short>&#10; HAL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HAL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcP" loc="62:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcP.nc" safe="">
      <documentation loc="52:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcP.nc">
        <short>&#10; Internal component of the Atmega128 A/D HAL.</short>
        <long>&#10; Internal component of the Atmega128 A/D HAL.&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10; @author Phil Buonadonna&#10; @author Hu Siquan &#60;husq@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128AdcC" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <documentation loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128AdcC.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128AdcP" loc="34:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128AdcP.nc" safe="">
      <documentation loc="26:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128AdcP.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter" loc="79(Atm128AdcC.AdcArbiter):/opt/tinyos-2.1.0/tos/system/RoundRobinArbiterC.nc">
      <documentation loc="59:/opt/tinyos-2.1.0/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="RoundRobinArbiterC"/>
        <arguments>
          <value cst="S:atm128adc.resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Queue" loc="32(Atm128AdcC.AdcArbiter.Queue):/opt/tinyos-2.1.0/tos/system/RoundRobinResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Arbiter" loc="52(Atm128AdcC.AdcArbiter.Arbiter):/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
      <documentation loc="30:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.PM" loc="57(Atm128AdcC.PM):/opt/tinyos-2.1.0/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.PM.PowerManager" loc="48(Atm128AdcC.PM.PowerManager):/opt/tinyos-2.1.0/tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="AdcP" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcP.nc" safe="">
      <documentation loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcP.nc">
        <short>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.</short>
        <long>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.&#10; @author David Gay&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="WireAdcP.ArbitrateRead" loc="23(WireAdcP.ArbitrateRead):/opt/tinyos-2.1.0/tos/system/ArbitratedReadC.nc">
      <documentation loc="10:/opt/tinyos-2.1.0/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbitratedReadC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RandomC" loc="32:/opt/tinyos-2.1.0/tos/system/RandomC.nc">
      <documentation loc="22:/opt/tinyos-2.1.0/tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="34:/opt/tinyos-2.1.0/tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="21:/opt/tinyos-2.1.0/tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000CsmaRadioC.TimerMilliC" loc="36(CC1000CsmaRadioC.TimerMilliC):/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="37:/opt/tinyos-2.1.0/tos/system/TimerMilliP.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="33:/opt/tinyos-2.1.0/tos/platforms/mica/HilTimerMilliC.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/platforms/mica/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:/opt/tinyos-2.1.0/tos/platforms/mica/AlarmCounterMilliP.nc">
      <documentation loc="11:/opt/tinyos-2.1.0/tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC):/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <documentation loc="11:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP" loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP):/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <documentation loc="11:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x40834eb0"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128Timer0AsyncC" loc="43:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <documentation loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer0AsyncP" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc" safe="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
        <short>&#10; HPL interface to Atmega128 timer 0 in ASYNC mode.</short>
        <long>&#10; HPL interface to Atmega128 timer 0 in ASYNC mode. This is a specialised&#10; HPL component that assumes that timer 0 is used in ASYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="35(HilTimerMilliC.AlarmToTimerC):/opt/tinyos-2.1.0/tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="35(HilTimerMilliC.VirtualizeTimerC):/opt/tinyos-2.1.0/tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="35(HilTimerMilliC.CounterToLocalTimeC):/opt/tinyos-2.1.0/tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageAddressC" loc="41:/opt/tinyos-2.1.0/tos/system/ActiveMessageAddressC.nc" safe="">
      <documentation loc="34:/opt/tinyos-2.1.0/tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="38:/opt/tinyos-2.1.0/tos/platforms/mica/BusyWaitMicroC.nc" safe="">
      <documentation loc="29:/opt/tinyos-2.1.0/tos/platforms/mica/BusyWaitMicroC.nc">
        <short>&#10; Busy wait component as per TEP102.</short>
        <long>&#10; Busy wait component as per TEP102. Supports waiting for at least some&#10; number of microseconds. This functionality should be used sparingly,&#10; when the overhead of posting a Timer or Alarm is greater than simply&#10; busy waiting.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RadioCountToLedsAppC.AMReceiverC" loc="35(RadioCountToLedsAppC.AMReceiverC):/opt/tinyos-2.1.0/tos/system/AMReceiverC.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RadioCountToLedsAppC.TimerMilliC" loc="36(RadioCountToLedsAppC.TimerMilliC):/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="31:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x40410dc8" loc="31:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x40416010" loc="31:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x40416228" loc="31:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="" safe="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x40422238" loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x40422460" loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x40422688" loc="34:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x40422878" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x4046e3d0" loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x4046e5f8" loc="34:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x4046e820" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x4046ea10" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="39:/opt/tinyos-2.1.0/tos/system/AMSenderC.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x405250b8" loc="39:/opt/tinyos-2.1.0/tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x404d2e58"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="35:/opt/tinyos-2.1.0/tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x405327b8" loc="35:/opt/tinyos-2.1.0/tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x404d2e58"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="37:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x4054d010" loc="37:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AdcReadNowClientC" loc="21:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadNowClientC.nc" abstract="">
      <documentation loc="10:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadNowClientC.nc">
        <short>&#10; Provide, as per TEP101, Resource-based access to the Atmega128 ADC via a&#10; ReadNow interface.</short>
        <long>&#10; Provide, as per TEP101, Resource-based access to the Atmega128 ADC via a&#10; ReadNow interface.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinArbiterC" loc="79:/opt/tinyos-2.1.0/tos/system/RoundRobinArbiterC.nc" abstract="">
      <documentation loc="59:/opt/tinyos-2.1.0/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x4076eef0" loc="79:/opt/tinyos-2.1.0/tos/system/RoundRobinArbiterC.nc">
          <component-ref qname="RoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="32:/opt/tinyos-2.1.0/tos/system/RoundRobinResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x4079f5b0" loc="32:/opt/tinyos-2.1.0/tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x407a0cb0" loc="52:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="57:/opt/tinyos-2.1.0/tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="48:/opt/tinyos-2.1.0/tos/lib/power/AsyncPowerManagerP.nc" abstract="" safe="">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="ArbitratedReadC" loc="23:/opt/tinyos-2.1.0/tos/system/ArbitratedReadC.nc" abstract="" safe="">
      <documentation loc="10:/opt/tinyos-2.1.0/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="width_t" ref="0x408052b8" loc="23:/opt/tinyos-2.1.0/tos/system/ArbitratedReadC.nc">
          <component-ref qname="ArbitratedReadC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="width_t" scoped="" ref="0x408052b8"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="36:/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmAsyncC" loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc" abstract="">
      <documentation loc="11:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x40834eb0" loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x40834eb0"/></type-var>
        </typedef>
        <constant name="divider" ref="0x4084a088" loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmAsyncP" loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc" abstract="" safe="">
      <documentation loc="11:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x408422f8" loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
          <component-ref qname="Atm128AlarmAsyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x408422f8"/></type-var>
        </typedef>
        <constant name="divider" ref="0x408424b8" loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
          <component-ref qname="Atm128AlarmAsyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="35:/opt/tinyos-2.1.0/tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40822568" loc="35:/opt/tinyos-2.1.0/tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40822568"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="35:/opt/tinyos-2.1.0/tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x408deb58" loc="35:/opt/tinyos-2.1.0/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x408deb58"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x408ded38" loc="35:/opt/tinyos-2.1.0/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="35:/opt/tinyos-2.1.0/tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40908258" loc="35:/opt/tinyos-2.1.0/tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40908258"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AMReceiverC" loc="35:/opt/tinyos-2.1.0/tos/system/AMReceiverC.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x4093c580" loc="35:/opt/tinyos-2.1.0/tos/system/AMReceiverC.nc">
          <component-ref qname="AMReceiverC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x404d2e58"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x4037c010" loc="47:/opt/tinyos-2.1.0/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x4037c010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4037c1e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x4037a358" loc="46:/opt/tinyos-2.1.0/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x4037a358"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x4037a530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x403829c8" loc="43:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x403829c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40382ba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4037c988" loc="37:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x4037c988"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4037cb60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x40382268" loc="41:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x40382268"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x40382440"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x40382520"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x40382600"/>
        <function-ref name="actualMicro" scoped="" ref="0x403826e0"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x403827c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x4037f868" loc="36:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x4037f868"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4037fa40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4037f488" loc="35:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x4037f488"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4037f660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x4037fc70" loc="37:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x4037fc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4037fe48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x4038c2e8" loc="18:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x4038c2e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4038c4c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x4038df00" loc="17:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x4038df00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4038c0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x40395da0" loc="19:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x40395da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40390010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x403953b0" loc="18:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x403953b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40395588"/>
        <function-ref name="isInput" scoped="" ref="0x40395668"/>
        <function-ref name="toggle" scoped="" ref="0x40395748"/>
        <function-ref name="isOutput" scoped="" ref="0x40395828"/>
        <function-ref name="get" scoped="" ref="0x40395908"/>
        <function-ref name="makeOutput" scoped="" ref="0x403959e8"/>
        <function-ref name="set" scoped="" ref="0x40395ac8"/>
        <function-ref name="clr" scoped="" ref="0x40395ba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x4038ce60" loc="17:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x4038ce60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40391050"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x40393d38" loc="37:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <component-ref qname="HplCC1000InitP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x40393d38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40393f10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PCLK" ref="0x403c9010" loc="51:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PCLK" scoped="" ref="0x403c9010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403c91e8"/>
        <function-ref name="isInput" scoped="" ref="0x403c92c8"/>
        <function-ref name="toggle" scoped="" ref="0x403c93a8"/>
        <function-ref name="isOutput" scoped="" ref="0x403c9488"/>
        <function-ref name="get" scoped="" ref="0x403c9568"/>
        <function-ref name="makeOutput" scoped="" ref="0x403c9648"/>
        <function-ref name="set" scoped="" ref="0x403c9728"/>
        <function-ref name="clr" scoped="" ref="0x403c9808"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CHP_OUT" ref="0x403c8b90" loc="49:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CHP_OUT" scoped="" ref="0x403c8b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403c8d68"/>
        <function-ref name="isInput" scoped="" ref="0x403c8e48"/>
        <function-ref name="toggle" scoped="" ref="0x403c8f28"/>
        <function-ref name="isOutput" scoped="" ref="0x403c2018"/>
        <function-ref name="get" scoped="" ref="0x403c20f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x403c21d8"/>
        <function-ref name="set" scoped="" ref="0x403c22b8"/>
        <function-ref name="clr" scoped="" ref="0x403c2398"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RssiConfig" ref="0x403c85a0" loc="45:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiConfig" scoped="" ref="0x403c85a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x403c8778"/>
        <function-ref name="getChannel" scoped="" ref="0x403c8858"/>
        <function-ref name="getPrescaler" scoped="" ref="0x403c8938"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PALE" ref="0x403c2588" loc="50:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PALE" scoped="" ref="0x403c2588"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403c2760"/>
        <function-ref name="isInput" scoped="" ref="0x403c2840"/>
        <function-ref name="toggle" scoped="" ref="0x403c2920"/>
        <function-ref name="isOutput" scoped="" ref="0x403c2a00"/>
        <function-ref name="get" scoped="" ref="0x403c2ae0"/>
        <function-ref name="makeOutput" scoped="" ref="0x403c2bc0"/>
        <function-ref name="set" scoped="" ref="0x403c2ca0"/>
        <function-ref name="clr" scoped="" ref="0x403c2d80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x403bbe08" loc="43:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x403bbe08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x403c4010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PDATA" ref="0x403c9a00" loc="52:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PDATA" scoped="" ref="0x403c9a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403c9bd8"/>
        <function-ref name="isInput" scoped="" ref="0x403c9cb8"/>
        <function-ref name="toggle" scoped="" ref="0x403c9d98"/>
        <function-ref name="isOutput" scoped="" ref="0x403c9e78"/>
        <function-ref name="get" scoped="" ref="0x403c7010"/>
        <function-ref name="makeOutput" scoped="" ref="0x403c70f0"/>
        <function-ref name="set" scoped="" ref="0x403c71d0"/>
        <function-ref name="clr" scoped="" ref="0x403c72b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplCC1000" ref="0x403c0b88" loc="44:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000" scoped="" ref="0x403c0b88"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x403c0d60"/>
        <function-ref name="read" scoped="" ref="0x403c0e40"/>
        <function-ref name="write" scoped="" ref="0x403c0f20"/>
        <function-ref name="getLOCK" scoped="" ref="0x403c3018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplCC1000Spi" ref="0x403e2148" loc="42:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000Spi" scoped="" ref="0x403e2148"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="isBufBusy" scoped="" ref="0x403e2320"/>
        <function-ref name="initSlave" scoped="" ref="0x403e2400"/>
        <function-ref name="disableIntr" scoped="" ref="0x403e24e0"/>
        <function-ref name="writeByte" scoped="" ref="0x403e25c0"/>
        <function-ref name="enableIntr" scoped="" ref="0x403e26a0"/>
        <function-ref name="txMode" scoped="" ref="0x403e2780"/>
        <function-ref name="readByte" scoped="" ref="0x403e2860"/>
        <function-ref name="rxMode" scoped="" ref="0x403e2940"/>
        <function-ref name="dataReady" scoped="" ref="0x403e2a20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiSck" ref="0x403e2c60" loc="45:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiSck" scoped="" ref="0x403e2c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403e2e38"/>
        <function-ref name="isInput" scoped="" ref="0x403e2f18"/>
        <function-ref name="toggle" scoped="" ref="0x403dc010"/>
        <function-ref name="isOutput" scoped="" ref="0x403dc0f0"/>
        <function-ref name="get" scoped="" ref="0x403dc1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x403dc2b0"/>
        <function-ref name="set" scoped="" ref="0x403dc390"/>
        <function-ref name="clr" scoped="" ref="0x403dc470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x40399d18" loc="41:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x40399d18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40399ef0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiMiso" ref="0x403dc678" loc="46:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiMiso" scoped="" ref="0x403dc678"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403dc850"/>
        <function-ref name="isInput" scoped="" ref="0x403dc930"/>
        <function-ref name="toggle" scoped="" ref="0x403dca10"/>
        <function-ref name="isOutput" scoped="" ref="0x403dcaf0"/>
        <function-ref name="get" scoped="" ref="0x403dcbd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x403dccb0"/>
        <function-ref name="set" scoped="" ref="0x403dcd90"/>
        <function-ref name="clr" scoped="" ref="0x403dce70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiMosi" ref="0x403db0a8" loc="47:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiMosi" scoped="" ref="0x403db0a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403db280"/>
        <function-ref name="isInput" scoped="" ref="0x403db360"/>
        <function-ref name="toggle" scoped="" ref="0x403db440"/>
        <function-ref name="isOutput" scoped="" ref="0x403db520"/>
        <function-ref name="get" scoped="" ref="0x403db600"/>
        <function-ref name="makeOutput" scoped="" ref="0x403db6e0"/>
        <function-ref name="set" scoped="" ref="0x403db7c0"/>
        <function-ref name="clr" scoped="" ref="0x403db8a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="OC1C" ref="0x403dba90" loc="48:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="OC1C" scoped="" ref="0x403dba90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403dbc68"/>
        <function-ref name="isInput" scoped="" ref="0x403dbd48"/>
        <function-ref name="toggle" scoped="" ref="0x403dbe28"/>
        <function-ref name="isOutput" scoped="" ref="0x403dbf08"/>
        <function-ref name="get" scoped="" ref="0x403e1010"/>
        <function-ref name="makeOutput" scoped="" ref="0x403e10f0"/>
        <function-ref name="set" scoped="" ref="0x403e11d0"/>
        <function-ref name="clr" scoped="" ref="0x403e12b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x404144b0" loc="91:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x404144b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40414888"/>
        <function-ref name="isInput" scoped="" ref="0x40414968"/>
        <function-ref name="toggle" scoped="" ref="0x40414a48"/>
        <function-ref name="isOutput" scoped="" ref="0x40414b28"/>
        <function-ref name="get" scoped="" ref="0x40414c08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40414ce8"/>
        <function-ref name="set" scoped="" ref="0x40414dc8"/>
        <function-ref name="clr" scoped="" ref="0x40414ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x40405a28" loc="65:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x40405a28"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40405c00"/>
        <function-ref name="isInput" scoped="" ref="0x40405ce0"/>
        <function-ref name="toggle" scoped="" ref="0x40405dc0"/>
        <function-ref name="isOutput" scoped="" ref="0x40405ea0"/>
        <function-ref name="get" scoped="" ref="0x40404010"/>
        <function-ref name="makeOutput" scoped="" ref="0x404040f0"/>
        <function-ref name="set" scoped="" ref="0x404041d0"/>
        <function-ref name="clr" scoped="" ref="0x404042b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x404080a0" loc="76:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x404080a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40408278"/>
        <function-ref name="isInput" scoped="" ref="0x40408358"/>
        <function-ref name="toggle" scoped="" ref="0x40408438"/>
        <function-ref name="isOutput" scoped="" ref="0x40408518"/>
        <function-ref name="get" scoped="" ref="0x404085f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404086d8"/>
        <function-ref name="set" scoped="" ref="0x404087b8"/>
        <function-ref name="clr" scoped="" ref="0x40408898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x4040d210" loc="85:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x4040d210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4040d3e8"/>
        <function-ref name="isInput" scoped="" ref="0x4040d4c8"/>
        <function-ref name="toggle" scoped="" ref="0x4040d5a8"/>
        <function-ref name="isOutput" scoped="" ref="0x4040d688"/>
        <function-ref name="get" scoped="" ref="0x4040d768"/>
        <function-ref name="makeOutput" scoped="" ref="0x4040d848"/>
        <function-ref name="set" scoped="" ref="0x4040d928"/>
        <function-ref name="clr" scoped="" ref="0x4040da08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x403f4670" loc="43:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x403f4670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403f4848"/>
        <function-ref name="isInput" scoped="" ref="0x403f4928"/>
        <function-ref name="toggle" scoped="" ref="0x403f4a08"/>
        <function-ref name="isOutput" scoped="" ref="0x403f4ae8"/>
        <function-ref name="get" scoped="" ref="0x403f4bc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x403f4ca8"/>
        <function-ref name="set" scoped="" ref="0x403f4d88"/>
        <function-ref name="clr" scoped="" ref="0x403f4e68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x4040fce8" loc="83:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x4040fce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4040fec0"/>
        <function-ref name="isInput" scoped="" ref="0x4040e010"/>
        <function-ref name="toggle" scoped="" ref="0x4040e0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4040e1d0"/>
        <function-ref name="get" scoped="" ref="0x4040e2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4040e390"/>
        <function-ref name="set" scoped="" ref="0x4040e470"/>
        <function-ref name="clr" scoped="" ref="0x4040e550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x403f3a98" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x403f3a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403f3c70"/>
        <function-ref name="isInput" scoped="" ref="0x403f3d50"/>
        <function-ref name="toggle" scoped="" ref="0x403f3e30"/>
        <function-ref name="isOutput" scoped="" ref="0x403f3f10"/>
        <function-ref name="get" scoped="" ref="0x403f2010"/>
        <function-ref name="makeOutput" scoped="" ref="0x403f20f0"/>
        <function-ref name="set" scoped="" ref="0x403f21d0"/>
        <function-ref name="clr" scoped="" ref="0x403f22b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x40400210" loc="57:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x40400210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404003e8"/>
        <function-ref name="isInput" scoped="" ref="0x404004c8"/>
        <function-ref name="toggle" scoped="" ref="0x404005a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40400688"/>
        <function-ref name="get" scoped="" ref="0x40400768"/>
        <function-ref name="makeOutput" scoped="" ref="0x40400848"/>
        <function-ref name="set" scoped="" ref="0x40400928"/>
        <function-ref name="clr" scoped="" ref="0x40400a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x404038e0" loc="68:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x404038e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40403ab8"/>
        <function-ref name="isInput" scoped="" ref="0x40403b98"/>
        <function-ref name="toggle" scoped="" ref="0x40403c78"/>
        <function-ref name="isOutput" scoped="" ref="0x40403d58"/>
        <function-ref name="get" scoped="" ref="0x40403e38"/>
        <function-ref name="makeOutput" scoped="" ref="0x40403f18"/>
        <function-ref name="set" scoped="" ref="0x40402010"/>
        <function-ref name="clr" scoped="" ref="0x404020f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x40407ea8" loc="79:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x40407ea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404060c0"/>
        <function-ref name="isInput" scoped="" ref="0x404061a0"/>
        <function-ref name="toggle" scoped="" ref="0x40406280"/>
        <function-ref name="isOutput" scoped="" ref="0x40406360"/>
        <function-ref name="get" scoped="" ref="0x40406440"/>
        <function-ref name="makeOutput" scoped="" ref="0x40406520"/>
        <function-ref name="set" scoped="" ref="0x40406600"/>
        <function-ref name="clr" scoped="" ref="0x404066e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x403ed2f0" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x403ed2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403ed4c8"/>
        <function-ref name="isInput" scoped="" ref="0x403ed5a8"/>
        <function-ref name="toggle" scoped="" ref="0x403ed688"/>
        <function-ref name="isOutput" scoped="" ref="0x403ed768"/>
        <function-ref name="get" scoped="" ref="0x403ed848"/>
        <function-ref name="makeOutput" scoped="" ref="0x403ed928"/>
        <function-ref name="set" scoped="" ref="0x403eda08"/>
        <function-ref name="clr" scoped="" ref="0x403edae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x403fb8e0" loc="49:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x403fb8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403fbab8"/>
        <function-ref name="isInput" scoped="" ref="0x403fbb98"/>
        <function-ref name="toggle" scoped="" ref="0x403fbc78"/>
        <function-ref name="isOutput" scoped="" ref="0x403fbd58"/>
        <function-ref name="get" scoped="" ref="0x403fbe38"/>
        <function-ref name="makeOutput" scoped="" ref="0x403fbf18"/>
        <function-ref name="set" scoped="" ref="0x403fa010"/>
        <function-ref name="clr" scoped="" ref="0x403fa0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x403fd0a0" loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x403fd0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403fd278"/>
        <function-ref name="isInput" scoped="" ref="0x403fd358"/>
        <function-ref name="toggle" scoped="" ref="0x403fd438"/>
        <function-ref name="isOutput" scoped="" ref="0x403fd518"/>
        <function-ref name="get" scoped="" ref="0x403fd5f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x403fd6d8"/>
        <function-ref name="set" scoped="" ref="0x403fd7b8"/>
        <function-ref name="clr" scoped="" ref="0x403fd898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x40401750" loc="71:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x40401750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40401928"/>
        <function-ref name="isInput" scoped="" ref="0x40401a08"/>
        <function-ref name="toggle" scoped="" ref="0x40401ae8"/>
        <function-ref name="isOutput" scoped="" ref="0x40401bc8"/>
        <function-ref name="get" scoped="" ref="0x40401ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40401d88"/>
        <function-ref name="set" scoped="" ref="0x40401e68"/>
        <function-ref name="clr" scoped="" ref="0x4040a010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x4040b0a0" loc="88:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x4040b0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4040b278"/>
        <function-ref name="isInput" scoped="" ref="0x4040b358"/>
        <function-ref name="toggle" scoped="" ref="0x4040b438"/>
        <function-ref name="isOutput" scoped="" ref="0x4040b518"/>
        <function-ref name="get" scoped="" ref="0x4040b5f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4040b6d8"/>
        <function-ref name="set" scoped="" ref="0x4040b7b8"/>
        <function-ref name="clr" scoped="" ref="0x4040b898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x40412590" loc="94:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x40412590"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40412768"/>
        <function-ref name="isInput" scoped="" ref="0x40412848"/>
        <function-ref name="toggle" scoped="" ref="0x40412928"/>
        <function-ref name="isOutput" scoped="" ref="0x40412a08"/>
        <function-ref name="get" scoped="" ref="0x40412ae8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40412bc8"/>
        <function-ref name="set" scoped="" ref="0x40412ca8"/>
        <function-ref name="clr" scoped="" ref="0x40412d88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x4040ac08" loc="74:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x4040ac08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4040ade0"/>
        <function-ref name="isInput" scoped="" ref="0x4040aec0"/>
        <function-ref name="toggle" scoped="" ref="0x40409010"/>
        <function-ref name="isOutput" scoped="" ref="0x404090f0"/>
        <function-ref name="get" scoped="" ref="0x404091d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404092b0"/>
        <function-ref name="set" scoped="" ref="0x40409390"/>
        <function-ref name="clr" scoped="" ref="0x40409470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x403f5210" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x403f5210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403f53e8"/>
        <function-ref name="isInput" scoped="" ref="0x403f54c8"/>
        <function-ref name="toggle" scoped="" ref="0x403f55a8"/>
        <function-ref name="isOutput" scoped="" ref="0x403f5688"/>
        <function-ref name="get" scoped="" ref="0x403f5768"/>
        <function-ref name="makeOutput" scoped="" ref="0x403f5848"/>
        <function-ref name="set" scoped="" ref="0x403f5928"/>
        <function-ref name="clr" scoped="" ref="0x403f5a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x403f9830" loc="52:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x403f9830"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403f9a08"/>
        <function-ref name="isInput" scoped="" ref="0x403f9ae8"/>
        <function-ref name="toggle" scoped="" ref="0x403f9bc8"/>
        <function-ref name="isOutput" scoped="" ref="0x403f9ca8"/>
        <function-ref name="get" scoped="" ref="0x403f9d88"/>
        <function-ref name="makeOutput" scoped="" ref="0x403f9e68"/>
        <function-ref name="set" scoped="" ref="0x403f8010"/>
        <function-ref name="clr" scoped="" ref="0x403f80f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x404130c0" loc="92:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x404130c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40413298"/>
        <function-ref name="isInput" scoped="" ref="0x40413378"/>
        <function-ref name="toggle" scoped="" ref="0x40413458"/>
        <function-ref name="isOutput" scoped="" ref="0x40413538"/>
        <function-ref name="get" scoped="" ref="0x40413618"/>
        <function-ref name="makeOutput" scoped="" ref="0x404136f8"/>
        <function-ref name="set" scoped="" ref="0x404137d8"/>
        <function-ref name="clr" scoped="" ref="0x404138b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x403f8ce8" loc="55:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x403f8ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403f8ec0"/>
        <function-ref name="isInput" scoped="" ref="0x403f7010"/>
        <function-ref name="toggle" scoped="" ref="0x403f70f0"/>
        <function-ref name="isOutput" scoped="" ref="0x403f71d0"/>
        <function-ref name="get" scoped="" ref="0x403f72b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x403f7390"/>
        <function-ref name="set" scoped="" ref="0x403f7470"/>
        <function-ref name="clr" scoped="" ref="0x403f7550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x404044b0" loc="66:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x404044b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40404688"/>
        <function-ref name="isInput" scoped="" ref="0x40404768"/>
        <function-ref name="toggle" scoped="" ref="0x40404848"/>
        <function-ref name="isOutput" scoped="" ref="0x40404928"/>
        <function-ref name="get" scoped="" ref="0x40404a08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40404ae8"/>
        <function-ref name="set" scoped="" ref="0x40404bc8"/>
        <function-ref name="clr" scoped="" ref="0x40404ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x40408a98" loc="77:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x40408a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40408c70"/>
        <function-ref name="isInput" scoped="" ref="0x40408d50"/>
        <function-ref name="toggle" scoped="" ref="0x40408e30"/>
        <function-ref name="isOutput" scoped="" ref="0x40408f10"/>
        <function-ref name="get" scoped="" ref="0x40407010"/>
        <function-ref name="makeOutput" scoped="" ref="0x404070f0"/>
        <function-ref name="set" scoped="" ref="0x404071d0"/>
        <function-ref name="clr" scoped="" ref="0x404072b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x4040dc08" loc="86:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x4040dc08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4040dde0"/>
        <function-ref name="isInput" scoped="" ref="0x4040dec0"/>
        <function-ref name="toggle" scoped="" ref="0x4040c010"/>
        <function-ref name="isOutput" scoped="" ref="0x4040c0f0"/>
        <function-ref name="get" scoped="" ref="0x4040c1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4040c2b0"/>
        <function-ref name="set" scoped="" ref="0x4040c390"/>
        <function-ref name="clr" scoped="" ref="0x4040c470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x403f30a0" loc="44:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x403f30a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403f3278"/>
        <function-ref name="isInput" scoped="" ref="0x403f3358"/>
        <function-ref name="toggle" scoped="" ref="0x403f3438"/>
        <function-ref name="isOutput" scoped="" ref="0x403f3518"/>
        <function-ref name="get" scoped="" ref="0x403f35f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x403f36d8"/>
        <function-ref name="set" scoped="" ref="0x403f37b8"/>
        <function-ref name="clr" scoped="" ref="0x403f3898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x403f24b0" loc="47:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x403f24b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403f2688"/>
        <function-ref name="isInput" scoped="" ref="0x403f2768"/>
        <function-ref name="toggle" scoped="" ref="0x403f2848"/>
        <function-ref name="isOutput" scoped="" ref="0x403f2928"/>
        <function-ref name="get" scoped="" ref="0x403f2a08"/>
        <function-ref name="makeOutput" scoped="" ref="0x403f2ae8"/>
        <function-ref name="set" scoped="" ref="0x403f2bc8"/>
        <function-ref name="clr" scoped="" ref="0x403f2ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x40400c08" loc="58:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x40400c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40400de0"/>
        <function-ref name="isInput" scoped="" ref="0x40400ec0"/>
        <function-ref name="toggle" scoped="" ref="0x403ff010"/>
        <function-ref name="isOutput" scoped="" ref="0x403ff0f0"/>
        <function-ref name="get" scoped="" ref="0x403ff1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x403ff2b0"/>
        <function-ref name="set" scoped="" ref="0x403ff390"/>
        <function-ref name="clr" scoped="" ref="0x403ff470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x404022f0" loc="69:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x404022f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404024c8"/>
        <function-ref name="isInput" scoped="" ref="0x404025a8"/>
        <function-ref name="toggle" scoped="" ref="0x40402688"/>
        <function-ref name="isOutput" scoped="" ref="0x40402768"/>
        <function-ref name="get" scoped="" ref="0x40402848"/>
        <function-ref name="makeOutput" scoped="" ref="0x40402928"/>
        <function-ref name="set" scoped="" ref="0x40402a08"/>
        <function-ref name="clr" scoped="" ref="0x40402ae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x404068e0" loc="80:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x404068e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40406ab8"/>
        <function-ref name="isInput" scoped="" ref="0x40406b98"/>
        <function-ref name="toggle" scoped="" ref="0x40406c78"/>
        <function-ref name="isOutput" scoped="" ref="0x40406d58"/>
        <function-ref name="get" scoped="" ref="0x40406e38"/>
        <function-ref name="makeOutput" scoped="" ref="0x40406f18"/>
        <function-ref name="set" scoped="" ref="0x4040f010"/>
        <function-ref name="clr" scoped="" ref="0x4040f0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x403edce8" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x403edce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403edec0"/>
        <function-ref name="isInput" scoped="" ref="0x403f6010"/>
        <function-ref name="toggle" scoped="" ref="0x403f60f0"/>
        <function-ref name="isOutput" scoped="" ref="0x403f61d0"/>
        <function-ref name="get" scoped="" ref="0x403f62b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x403f6390"/>
        <function-ref name="set" scoped="" ref="0x403f6470"/>
        <function-ref name="clr" scoped="" ref="0x403f6550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x403fa2f0" loc="50:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x403fa2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403fa548"/>
        <function-ref name="isInput" scoped="" ref="0x403fa628"/>
        <function-ref name="toggle" scoped="" ref="0x403fa708"/>
        <function-ref name="isOutput" scoped="" ref="0x403fa7e8"/>
        <function-ref name="get" scoped="" ref="0x403fa8c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x403fa9a8"/>
        <function-ref name="set" scoped="" ref="0x403faa88"/>
        <function-ref name="clr" scoped="" ref="0x403fab68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x403fda98" loc="61:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x403fda98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403fdc70"/>
        <function-ref name="isInput" scoped="" ref="0x403fdd50"/>
        <function-ref name="toggle" scoped="" ref="0x403fde30"/>
        <function-ref name="isOutput" scoped="" ref="0x403fdf10"/>
        <function-ref name="get" scoped="" ref="0x403fc010"/>
        <function-ref name="makeOutput" scoped="" ref="0x403fc0f0"/>
        <function-ref name="set" scoped="" ref="0x403fc1d0"/>
        <function-ref name="clr" scoped="" ref="0x403fc2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x4040ba98" loc="89:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x4040ba98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4040bc70"/>
        <function-ref name="isInput" scoped="" ref="0x4040bd50"/>
        <function-ref name="toggle" scoped="" ref="0x4040be30"/>
        <function-ref name="isOutput" scoped="" ref="0x4040bf10"/>
        <function-ref name="get" scoped="" ref="0x40414010"/>
        <function-ref name="makeOutput" scoped="" ref="0x404140f0"/>
        <function-ref name="set" scoped="" ref="0x404141d0"/>
        <function-ref name="clr" scoped="" ref="0x404142b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x403fcea8" loc="64:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x403fcea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40405208"/>
        <function-ref name="isInput" scoped="" ref="0x404052e8"/>
        <function-ref name="toggle" scoped="" ref="0x404053c8"/>
        <function-ref name="isOutput" scoped="" ref="0x404054a8"/>
        <function-ref name="get" scoped="" ref="0x40405588"/>
        <function-ref name="makeOutput" scoped="" ref="0x40405668"/>
        <function-ref name="set" scoped="" ref="0x40405748"/>
        <function-ref name="clr" scoped="" ref="0x40405828"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x40409670" loc="75:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x40409670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40409848"/>
        <function-ref name="isInput" scoped="" ref="0x40409928"/>
        <function-ref name="toggle" scoped="" ref="0x40409a08"/>
        <function-ref name="isOutput" scoped="" ref="0x40409ae8"/>
        <function-ref name="get" scoped="" ref="0x40409bc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40409ca8"/>
        <function-ref name="set" scoped="" ref="0x40409d88"/>
        <function-ref name="clr" scoped="" ref="0x40409e68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x4040e750" loc="84:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x4040e750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4040e928"/>
        <function-ref name="isInput" scoped="" ref="0x4040ea08"/>
        <function-ref name="toggle" scoped="" ref="0x4040eae8"/>
        <function-ref name="isOutput" scoped="" ref="0x4040ebc8"/>
        <function-ref name="get" scoped="" ref="0x4040eca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4040ed88"/>
        <function-ref name="set" scoped="" ref="0x4040ee68"/>
        <function-ref name="clr" scoped="" ref="0x4040d010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x40411010" loc="95:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x40411010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404111e8"/>
        <function-ref name="isInput" scoped="" ref="0x404112c8"/>
        <function-ref name="toggle" scoped="" ref="0x404113a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40411488"/>
        <function-ref name="get" scoped="" ref="0x40411568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40411648"/>
        <function-ref name="set" scoped="" ref="0x40411728"/>
        <function-ref name="clr" scoped="" ref="0x40411808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x403f5c08" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x403f5c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403f5de0"/>
        <function-ref name="isInput" scoped="" ref="0x403f5ec0"/>
        <function-ref name="toggle" scoped="" ref="0x403f4010"/>
        <function-ref name="isOutput" scoped="" ref="0x403f40f0"/>
        <function-ref name="get" scoped="" ref="0x403f41d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x403f42b0"/>
        <function-ref name="set" scoped="" ref="0x403f4390"/>
        <function-ref name="clr" scoped="" ref="0x403f4470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x403f82f0" loc="53:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x403f82f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403f84c8"/>
        <function-ref name="isInput" scoped="" ref="0x403f85a8"/>
        <function-ref name="toggle" scoped="" ref="0x403f8688"/>
        <function-ref name="isOutput" scoped="" ref="0x403f8768"/>
        <function-ref name="get" scoped="" ref="0x403f8848"/>
        <function-ref name="makeOutput" scoped="" ref="0x403f8928"/>
        <function-ref name="set" scoped="" ref="0x403f8a08"/>
        <function-ref name="clr" scoped="" ref="0x403f8ae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x4040f2f0" loc="82:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x4040f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4040f4c8"/>
        <function-ref name="isInput" scoped="" ref="0x4040f5a8"/>
        <function-ref name="toggle" scoped="" ref="0x4040f688"/>
        <function-ref name="isOutput" scoped="" ref="0x4040f768"/>
        <function-ref name="get" scoped="" ref="0x4040f848"/>
        <function-ref name="makeOutput" scoped="" ref="0x4040f928"/>
        <function-ref name="set" scoped="" ref="0x4040fa08"/>
        <function-ref name="clr" scoped="" ref="0x4040fae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x403f7750" loc="56:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x403f7750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403f7928"/>
        <function-ref name="isInput" scoped="" ref="0x403f7a08"/>
        <function-ref name="toggle" scoped="" ref="0x403f7ae8"/>
        <function-ref name="isOutput" scoped="" ref="0x403f7bc8"/>
        <function-ref name="get" scoped="" ref="0x403f7ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x403f7d88"/>
        <function-ref name="set" scoped="" ref="0x403f7e68"/>
        <function-ref name="clr" scoped="" ref="0x40400010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x40404ea8" loc="67:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x40404ea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404030c0"/>
        <function-ref name="isInput" scoped="" ref="0x404031a0"/>
        <function-ref name="toggle" scoped="" ref="0x40403280"/>
        <function-ref name="isOutput" scoped="" ref="0x40403360"/>
        <function-ref name="get" scoped="" ref="0x40403440"/>
        <function-ref name="makeOutput" scoped="" ref="0x40403520"/>
        <function-ref name="set" scoped="" ref="0x40403600"/>
        <function-ref name="clr" scoped="" ref="0x404036e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x404074b0" loc="78:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x404074b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40407688"/>
        <function-ref name="isInput" scoped="" ref="0x40407768"/>
        <function-ref name="toggle" scoped="" ref="0x40407848"/>
        <function-ref name="isOutput" scoped="" ref="0x40407928"/>
        <function-ref name="get" scoped="" ref="0x40407a08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40407ae8"/>
        <function-ref name="set" scoped="" ref="0x40407bc8"/>
        <function-ref name="clr" scoped="" ref="0x40407ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x4040c670" loc="87:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x4040c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4040c848"/>
        <function-ref name="isInput" scoped="" ref="0x4040c928"/>
        <function-ref name="toggle" scoped="" ref="0x4040ca08"/>
        <function-ref name="isOutput" scoped="" ref="0x4040cae8"/>
        <function-ref name="get" scoped="" ref="0x4040cbc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4040cca8"/>
        <function-ref name="set" scoped="" ref="0x4040cd88"/>
        <function-ref name="clr" scoped="" ref="0x4040ce68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x403988c0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x403988c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40398a98"/>
        <function-ref name="isInput" scoped="" ref="0x40398b78"/>
        <function-ref name="toggle" scoped="" ref="0x40398c58"/>
        <function-ref name="isOutput" scoped="" ref="0x40398d38"/>
        <function-ref name="get" scoped="" ref="0x40398e18"/>
        <function-ref name="makeOutput" scoped="" ref="0x40398ef8"/>
        <function-ref name="set" scoped="" ref="0x403ed010"/>
        <function-ref name="clr" scoped="" ref="0x403ed0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x403f2ea8" loc="48:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x403f2ea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403fb0c0"/>
        <function-ref name="isInput" scoped="" ref="0x403fb1a0"/>
        <function-ref name="toggle" scoped="" ref="0x403fb280"/>
        <function-ref name="isOutput" scoped="" ref="0x403fb360"/>
        <function-ref name="get" scoped="" ref="0x403fb440"/>
        <function-ref name="makeOutput" scoped="" ref="0x403fb520"/>
        <function-ref name="set" scoped="" ref="0x403fb600"/>
        <function-ref name="clr" scoped="" ref="0x403fb6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x403ff670" loc="59:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x403ff670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403ff848"/>
        <function-ref name="isInput" scoped="" ref="0x403ff928"/>
        <function-ref name="toggle" scoped="" ref="0x403ffa08"/>
        <function-ref name="isOutput" scoped="" ref="0x403ffae8"/>
        <function-ref name="get" scoped="" ref="0x403ffbc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x403ffca8"/>
        <function-ref name="set" scoped="" ref="0x403ffd88"/>
        <function-ref name="clr" scoped="" ref="0x403ffe68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x40402ce8" loc="70:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x40402ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40402ec0"/>
        <function-ref name="isInput" scoped="" ref="0x40401010"/>
        <function-ref name="toggle" scoped="" ref="0x404010f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404011d0"/>
        <function-ref name="get" scoped="" ref="0x404012b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40401390"/>
        <function-ref name="set" scoped="" ref="0x40401470"/>
        <function-ref name="clr" scoped="" ref="0x40401550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x40413ab8" loc="93:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x40413ab8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40413c90"/>
        <function-ref name="isInput" scoped="" ref="0x40413d70"/>
        <function-ref name="toggle" scoped="" ref="0x40413e50"/>
        <function-ref name="isOutput" scoped="" ref="0x40412010"/>
        <function-ref name="get" scoped="" ref="0x404120f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404121d0"/>
        <function-ref name="set" scoped="" ref="0x404122b0"/>
        <function-ref name="clr" scoped="" ref="0x40412390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x4040a210" loc="73:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x4040a210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4040a3e8"/>
        <function-ref name="isInput" scoped="" ref="0x4040a4c8"/>
        <function-ref name="toggle" scoped="" ref="0x4040a5a8"/>
        <function-ref name="isOutput" scoped="" ref="0x4040a688"/>
        <function-ref name="get" scoped="" ref="0x4040a768"/>
        <function-ref name="makeOutput" scoped="" ref="0x4040a848"/>
        <function-ref name="set" scoped="" ref="0x4040a928"/>
        <function-ref name="clr" scoped="" ref="0x4040aa08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x403fc4b0" loc="62:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x403fc4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403fc688"/>
        <function-ref name="isInput" scoped="" ref="0x403fc768"/>
        <function-ref name="toggle" scoped="" ref="0x403fc848"/>
        <function-ref name="isOutput" scoped="" ref="0x403fc928"/>
        <function-ref name="get" scoped="" ref="0x403fca08"/>
        <function-ref name="makeOutput" scoped="" ref="0x403fcae8"/>
        <function-ref name="set" scoped="" ref="0x403fcbc8"/>
        <function-ref name="clr" scoped="" ref="0x403fcca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x403f6750" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x403f6750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403f6928"/>
        <function-ref name="isInput" scoped="" ref="0x403f6a08"/>
        <function-ref name="toggle" scoped="" ref="0x403f6ae8"/>
        <function-ref name="isOutput" scoped="" ref="0x403f6bc8"/>
        <function-ref name="get" scoped="" ref="0x403f6ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x403f6d88"/>
        <function-ref name="set" scoped="" ref="0x403f6e68"/>
        <function-ref name="clr" scoped="" ref="0x403f5010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x403fad68" loc="51:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x403fad68"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x403f9010"/>
        <function-ref name="isInput" scoped="" ref="0x403f90f0"/>
        <function-ref name="toggle" scoped="" ref="0x403f91d0"/>
        <function-ref name="isOutput" scoped="" ref="0x403f92b0"/>
        <function-ref name="get" scoped="" ref="0x403f9390"/>
        <function-ref name="makeOutput" scoped="" ref="0x403f9470"/>
        <function-ref name="set" scoped="" ref="0x403f9550"/>
        <function-ref name="clr" scoped="" ref="0x403f9630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x404414f0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x404414f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404416c8"/>
        <function-ref name="isInput" scoped="" ref="0x404417a8"/>
        <function-ref name="toggle" scoped="" ref="0x40441888"/>
        <function-ref name="isOutput" scoped="" ref="0x40441968"/>
        <function-ref name="get" scoped="" ref="0x40441a48"/>
        <function-ref name="makeOutput" scoped="" ref="0x40441b28"/>
        <function-ref name="set" scoped="" ref="0x40441c08"/>
        <function-ref name="clr" scoped="" ref="0x40441ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x4043e170" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x4043e170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4043e348"/>
        <function-ref name="isInput" scoped="" ref="0x4043e428"/>
        <function-ref name="toggle" scoped="" ref="0x4043e508"/>
        <function-ref name="isOutput" scoped="" ref="0x4043e5e8"/>
        <function-ref name="get" scoped="" ref="0x4043e6c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4043e7a8"/>
        <function-ref name="set" scoped="" ref="0x4043e888"/>
        <function-ref name="clr" scoped="" ref="0x4043e968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x40436228" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x40436228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40436400"/>
        <function-ref name="isInput" scoped="" ref="0x404364e0"/>
        <function-ref name="toggle" scoped="" ref="0x404365c0"/>
        <function-ref name="isOutput" scoped="" ref="0x404366a0"/>
        <function-ref name="get" scoped="" ref="0x40436780"/>
        <function-ref name="makeOutput" scoped="" ref="0x40436860"/>
        <function-ref name="set" scoped="" ref="0x40436940"/>
        <function-ref name="clr" scoped="" ref="0x40436a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x40441e48" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x40441e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4043f050"/>
        <function-ref name="isInput" scoped="" ref="0x4043f130"/>
        <function-ref name="toggle" scoped="" ref="0x4043f210"/>
        <function-ref name="isOutput" scoped="" ref="0x4043f2f0"/>
        <function-ref name="get" scoped="" ref="0x4043f3d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4043f4b0"/>
        <function-ref name="set" scoped="" ref="0x4043f590"/>
        <function-ref name="clr" scoped="" ref="0x4043f670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x4043eac8" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x4043eac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4043eca0"/>
        <function-ref name="isInput" scoped="" ref="0x4043ed80"/>
        <function-ref name="toggle" scoped="" ref="0x4043ee60"/>
        <function-ref name="isOutput" scoped="" ref="0x4043d010"/>
        <function-ref name="get" scoped="" ref="0x4043d0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4043d1d0"/>
        <function-ref name="set" scoped="" ref="0x4043d2b0"/>
        <function-ref name="clr" scoped="" ref="0x4043d390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x40436b80" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x40436b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40436d58"/>
        <function-ref name="isInput" scoped="" ref="0x40436e38"/>
        <function-ref name="toggle" scoped="" ref="0x40436f18"/>
        <function-ref name="isOutput" scoped="" ref="0x40441010"/>
        <function-ref name="get" scoped="" ref="0x404410f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404411d0"/>
        <function-ref name="set" scoped="" ref="0x404412b0"/>
        <function-ref name="clr" scoped="" ref="0x40441390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x4043f7d0" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x4043f7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4043f9a8"/>
        <function-ref name="isInput" scoped="" ref="0x4043fa88"/>
        <function-ref name="toggle" scoped="" ref="0x4043fb68"/>
        <function-ref name="isOutput" scoped="" ref="0x4043fc48"/>
        <function-ref name="get" scoped="" ref="0x4043fd28"/>
        <function-ref name="makeOutput" scoped="" ref="0x4043fe08"/>
        <function-ref name="set" scoped="" ref="0x4043fee8"/>
        <function-ref name="clr" scoped="" ref="0x4043e010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x4043d4f0" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x4043d4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4043d6c8"/>
        <function-ref name="isInput" scoped="" ref="0x4043d7a8"/>
        <function-ref name="toggle" scoped="" ref="0x4043d888"/>
        <function-ref name="isOutput" scoped="" ref="0x4043d968"/>
        <function-ref name="get" scoped="" ref="0x4043da48"/>
        <function-ref name="makeOutput" scoped="" ref="0x4043db28"/>
        <function-ref name="set" scoped="" ref="0x4043dc08"/>
        <function-ref name="clr" scoped="" ref="0x4043dce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4095a3b0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4095a3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4095a588"/>
        <function-ref name="isInput" scoped="" ref="0x4095a668"/>
        <function-ref name="toggle" scoped="" ref="0x4095a748"/>
        <function-ref name="isOutput" scoped="" ref="0x4095a828"/>
        <function-ref name="get" scoped="" ref="0x4095a908"/>
        <function-ref name="makeOutput" scoped="" ref="0x4095a9e8"/>
        <function-ref name="set" scoped="" ref="0x4095aac8"/>
        <function-ref name="clr" scoped="" ref="0x4095aba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40959d70" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40959d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40958010"/>
        <function-ref name="isInput" scoped="" ref="0x409580f0"/>
        <function-ref name="toggle" scoped="" ref="0x409581d0"/>
        <function-ref name="isOutput" scoped="" ref="0x409582b0"/>
        <function-ref name="get" scoped="" ref="0x40958390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40958470"/>
        <function-ref name="set" scoped="" ref="0x40958550"/>
        <function-ref name="clr" scoped="" ref="0x40958630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4097a7f8" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4097a7f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4097a9d0"/>
        <function-ref name="isInput" scoped="" ref="0x4097aab0"/>
        <function-ref name="toggle" scoped="" ref="0x4097ab90"/>
        <function-ref name="isOutput" scoped="" ref="0x4097ac70"/>
        <function-ref name="get" scoped="" ref="0x4097ad50"/>
        <function-ref name="makeOutput" scoped="" ref="0x4097ae30"/>
        <function-ref name="set" scoped="" ref="0x4097af10"/>
        <function-ref name="clr" scoped="" ref="0x40979010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40978228" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40978228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40978400"/>
        <function-ref name="isInput" scoped="" ref="0x409784e0"/>
        <function-ref name="toggle" scoped="" ref="0x409785c0"/>
        <function-ref name="isOutput" scoped="" ref="0x409786a0"/>
        <function-ref name="get" scoped="" ref="0x40978780"/>
        <function-ref name="makeOutput" scoped="" ref="0x40978860"/>
        <function-ref name="set" scoped="" ref="0x40978940"/>
        <function-ref name="clr" scoped="" ref="0x40978a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40976c08" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40976c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40976de0"/>
        <function-ref name="isInput" scoped="" ref="0x40976ec0"/>
        <function-ref name="toggle" scoped="" ref="0x40975010"/>
        <function-ref name="isOutput" scoped="" ref="0x409750f0"/>
        <function-ref name="get" scoped="" ref="0x409751d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x409752b0"/>
        <function-ref name="set" scoped="" ref="0x40975390"/>
        <function-ref name="clr" scoped="" ref="0x40975470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x409746c0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x409746c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40974898"/>
        <function-ref name="isInput" scoped="" ref="0x40974978"/>
        <function-ref name="toggle" scoped="" ref="0x40974a58"/>
        <function-ref name="isOutput" scoped="" ref="0x40974b38"/>
        <function-ref name="get" scoped="" ref="0x40974c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x40974cf8"/>
        <function-ref name="set" scoped="" ref="0x40974dd8"/>
        <function-ref name="clr" scoped="" ref="0x40974eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x409720b0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x409720b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40972288"/>
        <function-ref name="isInput" scoped="" ref="0x40972368"/>
        <function-ref name="toggle" scoped="" ref="0x40972448"/>
        <function-ref name="isOutput" scoped="" ref="0x40972528"/>
        <function-ref name="get" scoped="" ref="0x40972608"/>
        <function-ref name="makeOutput" scoped="" ref="0x409726e8"/>
        <function-ref name="set" scoped="" ref="0x409727c8"/>
        <function-ref name="clr" scoped="" ref="0x409728a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40971a88" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40971a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40971c60"/>
        <function-ref name="isInput" scoped="" ref="0x40971d40"/>
        <function-ref name="toggle" scoped="" ref="0x40971e20"/>
        <function-ref name="isOutput" scoped="" ref="0x40971f00"/>
        <function-ref name="get" scoped="" ref="0x40970010"/>
        <function-ref name="makeOutput" scoped="" ref="0x409700f0"/>
        <function-ref name="set" scoped="" ref="0x409701d0"/>
        <function-ref name="clr" scoped="" ref="0x409702b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x40445e48" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x40445e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40444050"/>
        <function-ref name="isInput" scoped="" ref="0x40444130"/>
        <function-ref name="toggle" scoped="" ref="0x40444210"/>
        <function-ref name="isOutput" scoped="" ref="0x404442f0"/>
        <function-ref name="get" scoped="" ref="0x404443d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404444b0"/>
        <function-ref name="set" scoped="" ref="0x40444590"/>
        <function-ref name="clr" scoped="" ref="0x40444670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x40443ac8" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x40443ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40443ca0"/>
        <function-ref name="isInput" scoped="" ref="0x40443d80"/>
        <function-ref name="toggle" scoped="" ref="0x40443e60"/>
        <function-ref name="isOutput" scoped="" ref="0x40442010"/>
        <function-ref name="get" scoped="" ref="0x404420f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404421d0"/>
        <function-ref name="set" scoped="" ref="0x404422b0"/>
        <function-ref name="clr" scoped="" ref="0x40442390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x40446b00" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x40446b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40446cd8"/>
        <function-ref name="isInput" scoped="" ref="0x40446db8"/>
        <function-ref name="toggle" scoped="" ref="0x40446e98"/>
        <function-ref name="isOutput" scoped="" ref="0x40445010"/>
        <function-ref name="get" scoped="" ref="0x404450f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404451d0"/>
        <function-ref name="set" scoped="" ref="0x404452b0"/>
        <function-ref name="clr" scoped="" ref="0x40445390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x404447d0" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x404447d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404449a8"/>
        <function-ref name="isInput" scoped="" ref="0x40444a88"/>
        <function-ref name="toggle" scoped="" ref="0x40444b68"/>
        <function-ref name="isOutput" scoped="" ref="0x40444c48"/>
        <function-ref name="get" scoped="" ref="0x40444d28"/>
        <function-ref name="makeOutput" scoped="" ref="0x40444e08"/>
        <function-ref name="set" scoped="" ref="0x40444ee8"/>
        <function-ref name="clr" scoped="" ref="0x40443010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x404424f0" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x404424f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404426c8"/>
        <function-ref name="isInput" scoped="" ref="0x404427a8"/>
        <function-ref name="toggle" scoped="" ref="0x40442888"/>
        <function-ref name="isOutput" scoped="" ref="0x40442968"/>
        <function-ref name="get" scoped="" ref="0x40442a48"/>
        <function-ref name="makeOutput" scoped="" ref="0x40442b28"/>
        <function-ref name="set" scoped="" ref="0x40442c08"/>
        <function-ref name="clr" scoped="" ref="0x40442ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x404454f0" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x404454f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404456c8"/>
        <function-ref name="isInput" scoped="" ref="0x404457a8"/>
        <function-ref name="toggle" scoped="" ref="0x40445888"/>
        <function-ref name="isOutput" scoped="" ref="0x40445968"/>
        <function-ref name="get" scoped="" ref="0x40445a48"/>
        <function-ref name="makeOutput" scoped="" ref="0x40445b28"/>
        <function-ref name="set" scoped="" ref="0x40445c08"/>
        <function-ref name="clr" scoped="" ref="0x40445ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x40443170" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x40443170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40443348"/>
        <function-ref name="isInput" scoped="" ref="0x40443428"/>
        <function-ref name="toggle" scoped="" ref="0x40443508"/>
        <function-ref name="isOutput" scoped="" ref="0x404435e8"/>
        <function-ref name="get" scoped="" ref="0x404436c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404437a8"/>
        <function-ref name="set" scoped="" ref="0x40443888"/>
        <function-ref name="clr" scoped="" ref="0x40443968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x40442e48" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x40442e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4044d050"/>
        <function-ref name="isInput" scoped="" ref="0x4044d130"/>
        <function-ref name="toggle" scoped="" ref="0x4044d210"/>
        <function-ref name="isOutput" scoped="" ref="0x4044d2f0"/>
        <function-ref name="get" scoped="" ref="0x4044d3d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4044d4b0"/>
        <function-ref name="set" scoped="" ref="0x4044d590"/>
        <function-ref name="clr" scoped="" ref="0x4044d670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x409a8de8" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x409a8de8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x409a4010"/>
        <function-ref name="isInput" scoped="" ref="0x409a40f0"/>
        <function-ref name="toggle" scoped="" ref="0x409a41d0"/>
        <function-ref name="isOutput" scoped="" ref="0x409a42b0"/>
        <function-ref name="get" scoped="" ref="0x409a4390"/>
        <function-ref name="makeOutput" scoped="" ref="0x409a4470"/>
        <function-ref name="set" scoped="" ref="0x409a4550"/>
        <function-ref name="clr" scoped="" ref="0x409a4630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x409a37f8" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x409a37f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x409a39d0"/>
        <function-ref name="isInput" scoped="" ref="0x409a3ab0"/>
        <function-ref name="toggle" scoped="" ref="0x409a3b90"/>
        <function-ref name="isOutput" scoped="" ref="0x409a3c70"/>
        <function-ref name="get" scoped="" ref="0x409a3d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x409a3e30"/>
        <function-ref name="set" scoped="" ref="0x409a3f10"/>
        <function-ref name="clr" scoped="" ref="0x409a2010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x409a1228" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x409a1228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x409a1400"/>
        <function-ref name="isInput" scoped="" ref="0x409a14e0"/>
        <function-ref name="toggle" scoped="" ref="0x409a15c0"/>
        <function-ref name="isOutput" scoped="" ref="0x409a16a0"/>
        <function-ref name="get" scoped="" ref="0x409a1780"/>
        <function-ref name="makeOutput" scoped="" ref="0x409a1860"/>
        <function-ref name="set" scoped="" ref="0x409a1940"/>
        <function-ref name="clr" scoped="" ref="0x409a1a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x409a0c08" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x409a0c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x409a0de0"/>
        <function-ref name="isInput" scoped="" ref="0x409a0ec0"/>
        <function-ref name="toggle" scoped="" ref="0x4099f010"/>
        <function-ref name="isOutput" scoped="" ref="0x4099f0f0"/>
        <function-ref name="get" scoped="" ref="0x4099f1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4099f2b0"/>
        <function-ref name="set" scoped="" ref="0x4099f390"/>
        <function-ref name="clr" scoped="" ref="0x4099f470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4099e6c0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4099e6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4099e898"/>
        <function-ref name="isInput" scoped="" ref="0x4099e978"/>
        <function-ref name="toggle" scoped="" ref="0x4099ea58"/>
        <function-ref name="isOutput" scoped="" ref="0x4099eb38"/>
        <function-ref name="get" scoped="" ref="0x4099ec18"/>
        <function-ref name="makeOutput" scoped="" ref="0x4099ecf8"/>
        <function-ref name="set" scoped="" ref="0x4099edd8"/>
        <function-ref name="clr" scoped="" ref="0x4099eeb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4099c0b0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4099c0b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4099c288"/>
        <function-ref name="isInput" scoped="" ref="0x4099c368"/>
        <function-ref name="toggle" scoped="" ref="0x4099c448"/>
        <function-ref name="isOutput" scoped="" ref="0x4099c528"/>
        <function-ref name="get" scoped="" ref="0x4099c608"/>
        <function-ref name="makeOutput" scoped="" ref="0x4099c6e8"/>
        <function-ref name="set" scoped="" ref="0x4099c7c8"/>
        <function-ref name="clr" scoped="" ref="0x4099c8a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4099ba88" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4099ba88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4099bc60"/>
        <function-ref name="isInput" scoped="" ref="0x4099bd40"/>
        <function-ref name="toggle" scoped="" ref="0x4099be20"/>
        <function-ref name="isOutput" scoped="" ref="0x4099bf00"/>
        <function-ref name="get" scoped="" ref="0x409bb010"/>
        <function-ref name="makeOutput" scoped="" ref="0x409bb0f0"/>
        <function-ref name="set" scoped="" ref="0x409bb1d0"/>
        <function-ref name="clr" scoped="" ref="0x409bb2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x409ba538" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x409ba538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x409ba710"/>
        <function-ref name="isInput" scoped="" ref="0x409ba7f0"/>
        <function-ref name="toggle" scoped="" ref="0x409ba8d0"/>
        <function-ref name="isOutput" scoped="" ref="0x409ba9b0"/>
        <function-ref name="get" scoped="" ref="0x409baa90"/>
        <function-ref name="makeOutput" scoped="" ref="0x409bab70"/>
        <function-ref name="set" scoped="" ref="0x409bac50"/>
        <function-ref name="clr" scoped="" ref="0x409bad30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x404486b0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x404486b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40448888"/>
        <function-ref name="isInput" scoped="" ref="0x40448968"/>
        <function-ref name="toggle" scoped="" ref="0x40448a48"/>
        <function-ref name="isOutput" scoped="" ref="0x40448b28"/>
        <function-ref name="get" scoped="" ref="0x40448c08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40448ce8"/>
        <function-ref name="set" scoped="" ref="0x40448dc8"/>
        <function-ref name="clr" scoped="" ref="0x40448ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x40452330" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x40452330"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40452508"/>
        <function-ref name="isInput" scoped="" ref="0x404525e8"/>
        <function-ref name="toggle" scoped="" ref="0x404526c8"/>
        <function-ref name="isOutput" scoped="" ref="0x404527a8"/>
        <function-ref name="get" scoped="" ref="0x40452888"/>
        <function-ref name="makeOutput" scoped="" ref="0x40452968"/>
        <function-ref name="set" scoped="" ref="0x40452a48"/>
        <function-ref name="clr" scoped="" ref="0x40452b28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x404493d8" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x404493d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404495b0"/>
        <function-ref name="isInput" scoped="" ref="0x40449690"/>
        <function-ref name="toggle" scoped="" ref="0x40449770"/>
        <function-ref name="isOutput" scoped="" ref="0x40449850"/>
        <function-ref name="get" scoped="" ref="0x40449930"/>
        <function-ref name="makeOutput" scoped="" ref="0x40449a10"/>
        <function-ref name="set" scoped="" ref="0x40449af0"/>
        <function-ref name="clr" scoped="" ref="0x40449bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x40453030" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x40453030"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40453208"/>
        <function-ref name="isInput" scoped="" ref="0x404532e8"/>
        <function-ref name="toggle" scoped="" ref="0x404533c8"/>
        <function-ref name="isOutput" scoped="" ref="0x404534a8"/>
        <function-ref name="get" scoped="" ref="0x40453588"/>
        <function-ref name="makeOutput" scoped="" ref="0x40453668"/>
        <function-ref name="set" scoped="" ref="0x40453748"/>
        <function-ref name="clr" scoped="" ref="0x40453828"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x40452c88" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x40452c88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40452e60"/>
        <function-ref name="isInput" scoped="" ref="0x40451010"/>
        <function-ref name="toggle" scoped="" ref="0x404510f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404511d0"/>
        <function-ref name="get" scoped="" ref="0x404512b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40451390"/>
        <function-ref name="set" scoped="" ref="0x40451470"/>
        <function-ref name="clr" scoped="" ref="0x40451550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x40449d30" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x40449d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40449f08"/>
        <function-ref name="isInput" scoped="" ref="0x40448010"/>
        <function-ref name="toggle" scoped="" ref="0x404480f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404481d0"/>
        <function-ref name="get" scoped="" ref="0x404482b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40448390"/>
        <function-ref name="set" scoped="" ref="0x40448470"/>
        <function-ref name="clr" scoped="" ref="0x40448550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x40453988" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x40453988"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40453b60"/>
        <function-ref name="isInput" scoped="" ref="0x40453c40"/>
        <function-ref name="toggle" scoped="" ref="0x40453d20"/>
        <function-ref name="isOutput" scoped="" ref="0x40453e00"/>
        <function-ref name="get" scoped="" ref="0x40453ee0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40452010"/>
        <function-ref name="set" scoped="" ref="0x404520f0"/>
        <function-ref name="clr" scoped="" ref="0x404521d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x404516b0" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x404516b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40451888"/>
        <function-ref name="isInput" scoped="" ref="0x40451968"/>
        <function-ref name="toggle" scoped="" ref="0x40451a48"/>
        <function-ref name="isOutput" scoped="" ref="0x40451b28"/>
        <function-ref name="get" scoped="" ref="0x40451c08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40451ce8"/>
        <function-ref name="set" scoped="" ref="0x40451dc8"/>
        <function-ref name="clr" scoped="" ref="0x40451ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x409d2938" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x409d2938"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x409d2b10"/>
        <function-ref name="isInput" scoped="" ref="0x409d2bf0"/>
        <function-ref name="toggle" scoped="" ref="0x409d2cd0"/>
        <function-ref name="isOutput" scoped="" ref="0x409d2db0"/>
        <function-ref name="get" scoped="" ref="0x409d2e90"/>
        <function-ref name="makeOutput" scoped="" ref="0x409d1010"/>
        <function-ref name="set" scoped="" ref="0x409d10f0"/>
        <function-ref name="clr" scoped="" ref="0x409d11d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x409d03b0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x409d03b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x409d0588"/>
        <function-ref name="isInput" scoped="" ref="0x409d0668"/>
        <function-ref name="toggle" scoped="" ref="0x409d0748"/>
        <function-ref name="isOutput" scoped="" ref="0x409d0828"/>
        <function-ref name="get" scoped="" ref="0x409d0908"/>
        <function-ref name="makeOutput" scoped="" ref="0x409d09e8"/>
        <function-ref name="set" scoped="" ref="0x409d0ac8"/>
        <function-ref name="clr" scoped="" ref="0x409d0ba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x409cfd70" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x409cfd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x409cd010"/>
        <function-ref name="isInput" scoped="" ref="0x409cd0f0"/>
        <function-ref name="toggle" scoped="" ref="0x409cd1d0"/>
        <function-ref name="isOutput" scoped="" ref="0x409cd2b0"/>
        <function-ref name="get" scoped="" ref="0x409cd390"/>
        <function-ref name="makeOutput" scoped="" ref="0x409cd470"/>
        <function-ref name="set" scoped="" ref="0x409cd550"/>
        <function-ref name="clr" scoped="" ref="0x409cd630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x409ee7f8" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x409ee7f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x409ee9d0"/>
        <function-ref name="isInput" scoped="" ref="0x409eeab0"/>
        <function-ref name="toggle" scoped="" ref="0x409eeb90"/>
        <function-ref name="isOutput" scoped="" ref="0x409eec70"/>
        <function-ref name="get" scoped="" ref="0x409eed50"/>
        <function-ref name="makeOutput" scoped="" ref="0x409eee30"/>
        <function-ref name="set" scoped="" ref="0x409eef10"/>
        <function-ref name="clr" scoped="" ref="0x409ed010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x409ec228" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x409ec228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x409ec400"/>
        <function-ref name="isInput" scoped="" ref="0x409ec4e0"/>
        <function-ref name="toggle" scoped="" ref="0x409ec5c0"/>
        <function-ref name="isOutput" scoped="" ref="0x409ec6a0"/>
        <function-ref name="get" scoped="" ref="0x409ec780"/>
        <function-ref name="makeOutput" scoped="" ref="0x409ec860"/>
        <function-ref name="set" scoped="" ref="0x409ec940"/>
        <function-ref name="clr" scoped="" ref="0x409eca20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x409ebc08" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x409ebc08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x409ebde0"/>
        <function-ref name="isInput" scoped="" ref="0x409ebec0"/>
        <function-ref name="toggle" scoped="" ref="0x409ea010"/>
        <function-ref name="isOutput" scoped="" ref="0x409ea0f0"/>
        <function-ref name="get" scoped="" ref="0x409ea1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x409ea2b0"/>
        <function-ref name="set" scoped="" ref="0x409ea390"/>
        <function-ref name="clr" scoped="" ref="0x409ea470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x409e96c0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x409e96c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x409e9898"/>
        <function-ref name="isInput" scoped="" ref="0x409e9978"/>
        <function-ref name="toggle" scoped="" ref="0x409e9a58"/>
        <function-ref name="isOutput" scoped="" ref="0x409e9b38"/>
        <function-ref name="get" scoped="" ref="0x409e9c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x409e9cf8"/>
        <function-ref name="set" scoped="" ref="0x409e9dd8"/>
        <function-ref name="clr" scoped="" ref="0x409e9eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x409e70b0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x409e70b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x409e7288"/>
        <function-ref name="isInput" scoped="" ref="0x409e7368"/>
        <function-ref name="toggle" scoped="" ref="0x409e7448"/>
        <function-ref name="isOutput" scoped="" ref="0x409e7528"/>
        <function-ref name="get" scoped="" ref="0x409e7608"/>
        <function-ref name="makeOutput" scoped="" ref="0x409e76e8"/>
        <function-ref name="set" scoped="" ref="0x409e77c8"/>
        <function-ref name="clr" scoped="" ref="0x409e78a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x40457170" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x40457170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40457348"/>
        <function-ref name="isInput" scoped="" ref="0x40457428"/>
        <function-ref name="toggle" scoped="" ref="0x40457508"/>
        <function-ref name="isOutput" scoped="" ref="0x404575e8"/>
        <function-ref name="get" scoped="" ref="0x404576c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404577a8"/>
        <function-ref name="set" scoped="" ref="0x40457888"/>
        <function-ref name="clr" scoped="" ref="0x40457968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x40456e48" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x40456e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40455050"/>
        <function-ref name="isInput" scoped="" ref="0x40455130"/>
        <function-ref name="toggle" scoped="" ref="0x40455210"/>
        <function-ref name="isOutput" scoped="" ref="0x404552f0"/>
        <function-ref name="get" scoped="" ref="0x404553d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404554b0"/>
        <function-ref name="set" scoped="" ref="0x40455590"/>
        <function-ref name="clr" scoped="" ref="0x40455670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x4044edc8" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x4044edc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40458010"/>
        <function-ref name="isInput" scoped="" ref="0x404580f0"/>
        <function-ref name="toggle" scoped="" ref="0x404581d0"/>
        <function-ref name="isOutput" scoped="" ref="0x404582b0"/>
        <function-ref name="get" scoped="" ref="0x40458390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40458470"/>
        <function-ref name="set" scoped="" ref="0x40458550"/>
        <function-ref name="clr" scoped="" ref="0x40458630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x40457ac8" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x40457ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40457ca0"/>
        <function-ref name="isInput" scoped="" ref="0x40457d80"/>
        <function-ref name="toggle" scoped="" ref="0x40457e60"/>
        <function-ref name="isOutput" scoped="" ref="0x40456010"/>
        <function-ref name="get" scoped="" ref="0x404560f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404561d0"/>
        <function-ref name="set" scoped="" ref="0x404562b0"/>
        <function-ref name="clr" scoped="" ref="0x40456390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x404557d0" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x404557d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404559a8"/>
        <function-ref name="isInput" scoped="" ref="0x40455a88"/>
        <function-ref name="toggle" scoped="" ref="0x40455b68"/>
        <function-ref name="isOutput" scoped="" ref="0x40455c48"/>
        <function-ref name="get" scoped="" ref="0x40455d28"/>
        <function-ref name="makeOutput" scoped="" ref="0x40455e08"/>
        <function-ref name="set" scoped="" ref="0x40455ee8"/>
        <function-ref name="clr" scoped="" ref="0x40454010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x40458790" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x40458790"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40458968"/>
        <function-ref name="isInput" scoped="" ref="0x40458a48"/>
        <function-ref name="toggle" scoped="" ref="0x40458b28"/>
        <function-ref name="isOutput" scoped="" ref="0x40458c08"/>
        <function-ref name="get" scoped="" ref="0x40458ce8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40458dc8"/>
        <function-ref name="set" scoped="" ref="0x40458ea8"/>
        <function-ref name="clr" scoped="" ref="0x40457010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x404564f0" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x404564f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404566c8"/>
        <function-ref name="isInput" scoped="" ref="0x404567a8"/>
        <function-ref name="toggle" scoped="" ref="0x40456888"/>
        <function-ref name="isOutput" scoped="" ref="0x40456968"/>
        <function-ref name="get" scoped="" ref="0x40456a48"/>
        <function-ref name="makeOutput" scoped="" ref="0x40456b28"/>
        <function-ref name="set" scoped="" ref="0x40456c08"/>
        <function-ref name="clr" scoped="" ref="0x40456ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x40454170" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x40454170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40454348"/>
        <function-ref name="isInput" scoped="" ref="0x40454428"/>
        <function-ref name="toggle" scoped="" ref="0x40454508"/>
        <function-ref name="isOutput" scoped="" ref="0x404545e8"/>
        <function-ref name="get" scoped="" ref="0x404546c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404547a8"/>
        <function-ref name="set" scoped="" ref="0x40454888"/>
        <function-ref name="clr" scoped="" ref="0x40454968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a21538" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a21538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a21710"/>
        <function-ref name="isInput" scoped="" ref="0x40a217f0"/>
        <function-ref name="toggle" scoped="" ref="0x40a218d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40a219b0"/>
        <function-ref name="get" scoped="" ref="0x40a21a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a21b70"/>
        <function-ref name="set" scoped="" ref="0x40a21c50"/>
        <function-ref name="clr" scoped="" ref="0x40a21d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a1f010" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a1f010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a1f1e8"/>
        <function-ref name="isInput" scoped="" ref="0x40a1f2c8"/>
        <function-ref name="toggle" scoped="" ref="0x40a1f3a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40a1f488"/>
        <function-ref name="get" scoped="" ref="0x40a1f568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a1f648"/>
        <function-ref name="set" scoped="" ref="0x40a1f728"/>
        <function-ref name="clr" scoped="" ref="0x40a1f808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a1e9e8" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a1e9e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a1ebc0"/>
        <function-ref name="isInput" scoped="" ref="0x40a1eca0"/>
        <function-ref name="toggle" scoped="" ref="0x40a1ed80"/>
        <function-ref name="isOutput" scoped="" ref="0x40a1ee60"/>
        <function-ref name="get" scoped="" ref="0x40a1d010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a1d0f0"/>
        <function-ref name="set" scoped="" ref="0x40a1d1d0"/>
        <function-ref name="clr" scoped="" ref="0x40a1d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a1c538" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a1c538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a1c710"/>
        <function-ref name="isInput" scoped="" ref="0x40a1c7f0"/>
        <function-ref name="toggle" scoped="" ref="0x40a1c8d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40a1c9b0"/>
        <function-ref name="get" scoped="" ref="0x40a1ca90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a1cb70"/>
        <function-ref name="set" scoped="" ref="0x40a1cc50"/>
        <function-ref name="clr" scoped="" ref="0x40a1cd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a1a010" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a1a010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a1a1e8"/>
        <function-ref name="isInput" scoped="" ref="0x40a1a2c8"/>
        <function-ref name="toggle" scoped="" ref="0x40a1a3a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40a1a488"/>
        <function-ref name="get" scoped="" ref="0x40a1a568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a1a648"/>
        <function-ref name="set" scoped="" ref="0x40a1a728"/>
        <function-ref name="clr" scoped="" ref="0x40a1a808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a199e8" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a199e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a19bc0"/>
        <function-ref name="isInput" scoped="" ref="0x40a19ca0"/>
        <function-ref name="toggle" scoped="" ref="0x40a19d80"/>
        <function-ref name="isOutput" scoped="" ref="0x40a19e60"/>
        <function-ref name="get" scoped="" ref="0x40a18010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a180f0"/>
        <function-ref name="set" scoped="" ref="0x40a181d0"/>
        <function-ref name="clr" scoped="" ref="0x40a182b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a17538" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a17538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a17710"/>
        <function-ref name="isInput" scoped="" ref="0x40a177f0"/>
        <function-ref name="toggle" scoped="" ref="0x40a178d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40a179b0"/>
        <function-ref name="get" scoped="" ref="0x40a17a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a17b70"/>
        <function-ref name="set" scoped="" ref="0x40a17c50"/>
        <function-ref name="clr" scoped="" ref="0x40a17d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a15010" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a15010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a151e8"/>
        <function-ref name="isInput" scoped="" ref="0x40a152c8"/>
        <function-ref name="toggle" scoped="" ref="0x40a153a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40a15488"/>
        <function-ref name="get" scoped="" ref="0x40a15568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a15648"/>
        <function-ref name="set" scoped="" ref="0x40a15728"/>
        <function-ref name="clr" scoped="" ref="0x40a15808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x4045c9e8" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x4045c9e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4045cbc0"/>
        <function-ref name="isInput" scoped="" ref="0x4045cca0"/>
        <function-ref name="toggle" scoped="" ref="0x4045cd80"/>
        <function-ref name="isOutput" scoped="" ref="0x4045ce60"/>
        <function-ref name="get" scoped="" ref="0x4045b010"/>
        <function-ref name="makeOutput" scoped="" ref="0x4045b0f0"/>
        <function-ref name="set" scoped="" ref="0x4045b1d0"/>
        <function-ref name="clr" scoped="" ref="0x4045b2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x40465790" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x40465790"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40465968"/>
        <function-ref name="isInput" scoped="" ref="0x40465a48"/>
        <function-ref name="toggle" scoped="" ref="0x40465b28"/>
        <function-ref name="isOutput" scoped="" ref="0x40465c08"/>
        <function-ref name="get" scoped="" ref="0x40465ce8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40465dc8"/>
        <function-ref name="set" scoped="" ref="0x40465ea8"/>
        <function-ref name="clr" scoped="" ref="0x40464010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x4045d6f8" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x4045d6f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4045d8d0"/>
        <function-ref name="isInput" scoped="" ref="0x4045d9b0"/>
        <function-ref name="toggle" scoped="" ref="0x4045da90"/>
        <function-ref name="isOutput" scoped="" ref="0x4045db70"/>
        <function-ref name="get" scoped="" ref="0x4045dc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x4045dd30"/>
        <function-ref name="set" scoped="" ref="0x4045de10"/>
        <function-ref name="clr" scoped="" ref="0x4045def0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x4045b410" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x4045b410"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4045b5e8"/>
        <function-ref name="isInput" scoped="" ref="0x4045b6c8"/>
        <function-ref name="toggle" scoped="" ref="0x4045b7a8"/>
        <function-ref name="isOutput" scoped="" ref="0x4045b888"/>
        <function-ref name="get" scoped="" ref="0x4045b968"/>
        <function-ref name="makeOutput" scoped="" ref="0x4045ba48"/>
        <function-ref name="set" scoped="" ref="0x4045bb28"/>
        <function-ref name="clr" scoped="" ref="0x4045bc08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x40464170" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x40464170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40464348"/>
        <function-ref name="isInput" scoped="" ref="0x40464428"/>
        <function-ref name="toggle" scoped="" ref="0x40464508"/>
        <function-ref name="isOutput" scoped="" ref="0x404645e8"/>
        <function-ref name="get" scoped="" ref="0x404646c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404647a8"/>
        <function-ref name="set" scoped="" ref="0x40464888"/>
        <function-ref name="clr" scoped="" ref="0x40464968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x4045c090" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x4045c090"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4045c268"/>
        <function-ref name="isInput" scoped="" ref="0x4045c348"/>
        <function-ref name="toggle" scoped="" ref="0x4045c428"/>
        <function-ref name="isOutput" scoped="" ref="0x4045c508"/>
        <function-ref name="get" scoped="" ref="0x4045c5e8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4045c6c8"/>
        <function-ref name="set" scoped="" ref="0x4045c7a8"/>
        <function-ref name="clr" scoped="" ref="0x4045c888"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x4045bd68" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x4045bd68"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40465010"/>
        <function-ref name="isInput" scoped="" ref="0x404650f0"/>
        <function-ref name="toggle" scoped="" ref="0x404651d0"/>
        <function-ref name="isOutput" scoped="" ref="0x404652b0"/>
        <function-ref name="get" scoped="" ref="0x40465390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40465470"/>
        <function-ref name="set" scoped="" ref="0x40465550"/>
        <function-ref name="clr" scoped="" ref="0x40465630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x40464ac8" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x40464ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40464ca0"/>
        <function-ref name="isInput" scoped="" ref="0x40464d80"/>
        <function-ref name="toggle" scoped="" ref="0x40464e60"/>
        <function-ref name="isOutput" scoped="" ref="0x40463010"/>
        <function-ref name="get" scoped="" ref="0x404630f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404631d0"/>
        <function-ref name="set" scoped="" ref="0x404632b0"/>
        <function-ref name="clr" scoped="" ref="0x40463390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a54418" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a54418"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a545f0"/>
        <function-ref name="isInput" scoped="" ref="0x40a546d0"/>
        <function-ref name="toggle" scoped="" ref="0x40a547b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40a54890"/>
        <function-ref name="get" scoped="" ref="0x40a54970"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a54a50"/>
        <function-ref name="set" scoped="" ref="0x40a54b30"/>
        <function-ref name="clr" scoped="" ref="0x40a54c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a52de0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a52de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a51010"/>
        <function-ref name="isInput" scoped="" ref="0x40a510f0"/>
        <function-ref name="toggle" scoped="" ref="0x40a511d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40a512b0"/>
        <function-ref name="get" scoped="" ref="0x40a51390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a51470"/>
        <function-ref name="set" scoped="" ref="0x40a51550"/>
        <function-ref name="clr" scoped="" ref="0x40a51630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a507f8" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a507f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a509d0"/>
        <function-ref name="isInput" scoped="" ref="0x40a50ab0"/>
        <function-ref name="toggle" scoped="" ref="0x40a50b90"/>
        <function-ref name="isOutput" scoped="" ref="0x40a50c70"/>
        <function-ref name="get" scoped="" ref="0x40a50d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a50e30"/>
        <function-ref name="set" scoped="" ref="0x40a50f10"/>
        <function-ref name="clr" scoped="" ref="0x40a4f010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a4e228" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a4e228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a4e400"/>
        <function-ref name="isInput" scoped="" ref="0x40a4e4e0"/>
        <function-ref name="toggle" scoped="" ref="0x40a4e5c0"/>
        <function-ref name="isOutput" scoped="" ref="0x40a4e6a0"/>
        <function-ref name="get" scoped="" ref="0x40a4e780"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a4e860"/>
        <function-ref name="set" scoped="" ref="0x40a4e940"/>
        <function-ref name="clr" scoped="" ref="0x40a4ea20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a4dc08" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a4dc08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a4dde0"/>
        <function-ref name="isInput" scoped="" ref="0x40a4dec0"/>
        <function-ref name="toggle" scoped="" ref="0x40a4c010"/>
        <function-ref name="isOutput" scoped="" ref="0x40a4c0f0"/>
        <function-ref name="get" scoped="" ref="0x40a4c1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a4c2b0"/>
        <function-ref name="set" scoped="" ref="0x40a4c390"/>
        <function-ref name="clr" scoped="" ref="0x40a4c470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a4b6c0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a4b6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a4b898"/>
        <function-ref name="isInput" scoped="" ref="0x40a4b978"/>
        <function-ref name="toggle" scoped="" ref="0x40a4ba58"/>
        <function-ref name="isOutput" scoped="" ref="0x40a4bb38"/>
        <function-ref name="get" scoped="" ref="0x40a4bc18"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a4bcf8"/>
        <function-ref name="set" scoped="" ref="0x40a4bdd8"/>
        <function-ref name="clr" scoped="" ref="0x40a4beb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a490b0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a490b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a49288"/>
        <function-ref name="isInput" scoped="" ref="0x40a49368"/>
        <function-ref name="toggle" scoped="" ref="0x40a49448"/>
        <function-ref name="isOutput" scoped="" ref="0x40a49528"/>
        <function-ref name="get" scoped="" ref="0x40a49608"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a496e8"/>
        <function-ref name="set" scoped="" ref="0x40a497c8"/>
        <function-ref name="clr" scoped="" ref="0x40a498a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a48a88" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a48a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a48c60"/>
        <function-ref name="isInput" scoped="" ref="0x40a48d40"/>
        <function-ref name="toggle" scoped="" ref="0x40a48e20"/>
        <function-ref name="isOutput" scoped="" ref="0x40a48f00"/>
        <function-ref name="get" scoped="" ref="0x40a47010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a470f0"/>
        <function-ref name="set" scoped="" ref="0x40a471d0"/>
        <function-ref name="clr" scoped="" ref="0x40a472b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x4046b330" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x4046b330"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4046b508"/>
        <function-ref name="isInput" scoped="" ref="0x4046b5e8"/>
        <function-ref name="toggle" scoped="" ref="0x4046b6c8"/>
        <function-ref name="isOutput" scoped="" ref="0x4046b7a8"/>
        <function-ref name="get" scoped="" ref="0x4046b888"/>
        <function-ref name="makeOutput" scoped="" ref="0x4046b968"/>
        <function-ref name="set" scoped="" ref="0x4046ba48"/>
        <function-ref name="clr" scoped="" ref="0x4046bb28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x40469030" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x40469030"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40469208"/>
        <function-ref name="isInput" scoped="" ref="0x404692e8"/>
        <function-ref name="toggle" scoped="" ref="0x404693c8"/>
        <function-ref name="isOutput" scoped="" ref="0x404694a8"/>
        <function-ref name="get" scoped="" ref="0x40469588"/>
        <function-ref name="makeOutput" scoped="" ref="0x40469668"/>
        <function-ref name="set" scoped="" ref="0x40469748"/>
        <function-ref name="clr" scoped="" ref="0x40469828"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x40460010" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x40460010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404601e8"/>
        <function-ref name="isInput" scoped="" ref="0x404602c8"/>
        <function-ref name="toggle" scoped="" ref="0x404603a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40460488"/>
        <function-ref name="get" scoped="" ref="0x40460568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40460648"/>
        <function-ref name="set" scoped="" ref="0x40460728"/>
        <function-ref name="clr" scoped="" ref="0x40460808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x4046bc88" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x4046bc88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4046be60"/>
        <function-ref name="isInput" scoped="" ref="0x4046a010"/>
        <function-ref name="toggle" scoped="" ref="0x4046a0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4046a1d0"/>
        <function-ref name="get" scoped="" ref="0x4046a2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4046a390"/>
        <function-ref name="set" scoped="" ref="0x4046a470"/>
        <function-ref name="clr" scoped="" ref="0x4046a550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x40469988" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x40469988"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40469b60"/>
        <function-ref name="isInput" scoped="" ref="0x40469c40"/>
        <function-ref name="toggle" scoped="" ref="0x40469d20"/>
        <function-ref name="isOutput" scoped="" ref="0x40469e00"/>
        <function-ref name="get" scoped="" ref="0x40469ee0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40468010"/>
        <function-ref name="set" scoped="" ref="0x404680f0"/>
        <function-ref name="clr" scoped="" ref="0x404681d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x40460968" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x40460968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40460b40"/>
        <function-ref name="isInput" scoped="" ref="0x40460c20"/>
        <function-ref name="toggle" scoped="" ref="0x40460d00"/>
        <function-ref name="isOutput" scoped="" ref="0x40460de0"/>
        <function-ref name="get" scoped="" ref="0x40460ec0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4046b010"/>
        <function-ref name="set" scoped="" ref="0x4046b0f0"/>
        <function-ref name="clr" scoped="" ref="0x4046b1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x4046a6b0" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x4046a6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4046a888"/>
        <function-ref name="isInput" scoped="" ref="0x4046a968"/>
        <function-ref name="toggle" scoped="" ref="0x4046aa48"/>
        <function-ref name="isOutput" scoped="" ref="0x4046ab28"/>
        <function-ref name="get" scoped="" ref="0x4046ac08"/>
        <function-ref name="makeOutput" scoped="" ref="0x4046ace8"/>
        <function-ref name="set" scoped="" ref="0x4046adc8"/>
        <function-ref name="clr" scoped="" ref="0x4046aea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x40468330" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x40468330"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40468508"/>
        <function-ref name="isInput" scoped="" ref="0x404685e8"/>
        <function-ref name="toggle" scoped="" ref="0x404686c8"/>
        <function-ref name="isOutput" scoped="" ref="0x404687a8"/>
        <function-ref name="get" scoped="" ref="0x40468888"/>
        <function-ref name="makeOutput" scoped="" ref="0x40468968"/>
        <function-ref name="set" scoped="" ref="0x40468a48"/>
        <function-ref name="clr" scoped="" ref="0x40468b28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a876c0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a876c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a87898"/>
        <function-ref name="isInput" scoped="" ref="0x40a87978"/>
        <function-ref name="toggle" scoped="" ref="0x40a87a58"/>
        <function-ref name="isOutput" scoped="" ref="0x40a87b38"/>
        <function-ref name="get" scoped="" ref="0x40a87c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a87cf8"/>
        <function-ref name="set" scoped="" ref="0x40a87dd8"/>
        <function-ref name="clr" scoped="" ref="0x40a87eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a850b0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a850b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a85288"/>
        <function-ref name="isInput" scoped="" ref="0x40a85368"/>
        <function-ref name="toggle" scoped="" ref="0x40a85448"/>
        <function-ref name="isOutput" scoped="" ref="0x40a85528"/>
        <function-ref name="get" scoped="" ref="0x40a85608"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a856e8"/>
        <function-ref name="set" scoped="" ref="0x40a857c8"/>
        <function-ref name="clr" scoped="" ref="0x40a858a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a84a88" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a84a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a84c60"/>
        <function-ref name="isInput" scoped="" ref="0x40a84d40"/>
        <function-ref name="toggle" scoped="" ref="0x40a84e20"/>
        <function-ref name="isOutput" scoped="" ref="0x40a84f00"/>
        <function-ref name="get" scoped="" ref="0x40a83010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a830f0"/>
        <function-ref name="set" scoped="" ref="0x40a831d0"/>
        <function-ref name="clr" scoped="" ref="0x40a832b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a82538" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a82538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a82710"/>
        <function-ref name="isInput" scoped="" ref="0x40a827f0"/>
        <function-ref name="toggle" scoped="" ref="0x40a828d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40a829b0"/>
        <function-ref name="get" scoped="" ref="0x40a82a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a82b70"/>
        <function-ref name="set" scoped="" ref="0x40a82c50"/>
        <function-ref name="clr" scoped="" ref="0x40a82d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a80010" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a80010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a801e8"/>
        <function-ref name="isInput" scoped="" ref="0x40a802c8"/>
        <function-ref name="toggle" scoped="" ref="0x40a803a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40a80488"/>
        <function-ref name="get" scoped="" ref="0x40a80568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a80648"/>
        <function-ref name="set" scoped="" ref="0x40a80728"/>
        <function-ref name="clr" scoped="" ref="0x40a80808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a7f9e8" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a7f9e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a7fbc0"/>
        <function-ref name="isInput" scoped="" ref="0x40a7fca0"/>
        <function-ref name="toggle" scoped="" ref="0x40a7fd80"/>
        <function-ref name="isOutput" scoped="" ref="0x40a7fe60"/>
        <function-ref name="get" scoped="" ref="0x40a7e010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a7e0f0"/>
        <function-ref name="set" scoped="" ref="0x40a7e1d0"/>
        <function-ref name="clr" scoped="" ref="0x40a7e2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a7d538" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a7d538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a7d710"/>
        <function-ref name="isInput" scoped="" ref="0x40a7d7f0"/>
        <function-ref name="toggle" scoped="" ref="0x40a7d8d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40a7d9b0"/>
        <function-ref name="get" scoped="" ref="0x40a7da90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a7db70"/>
        <function-ref name="set" scoped="" ref="0x40a7dc50"/>
        <function-ref name="clr" scoped="" ref="0x40a7dd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40a9f010" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40a9f010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a9f1e8"/>
        <function-ref name="isInput" scoped="" ref="0x40a9f2c8"/>
        <function-ref name="toggle" scoped="" ref="0x40a9f3a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40a9f488"/>
        <function-ref name="get" scoped="" ref="0x40a9f568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a9f648"/>
        <function-ref name="set" scoped="" ref="0x40a9f728"/>
        <function-ref name="clr" scoped="" ref="0x40a9f808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404702d0" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404702d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404704a8"/>
        <function-ref name="isInput" scoped="" ref="0x40470588"/>
        <function-ref name="toggle" scoped="" ref="0x40470668"/>
        <function-ref name="isOutput" scoped="" ref="0x40470748"/>
        <function-ref name="get" scoped="" ref="0x40470828"/>
        <function-ref name="makeOutput" scoped="" ref="0x40470908"/>
        <function-ref name="set" scoped="" ref="0x404709e8"/>
        <function-ref name="clr" scoped="" ref="0x40470ac8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404798a0" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404798a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40479a78"/>
        <function-ref name="isInput" scoped="" ref="0x40479b58"/>
        <function-ref name="toggle" scoped="" ref="0x40479c38"/>
        <function-ref name="isOutput" scoped="" ref="0x40479d18"/>
        <function-ref name="get" scoped="" ref="0x40479df8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40479ed8"/>
        <function-ref name="set" scoped="" ref="0x40478010"/>
        <function-ref name="clr" scoped="" ref="0x404780f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40483ec0" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40483ec0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404820c0"/>
        <function-ref name="isInput" scoped="" ref="0x404821a0"/>
        <function-ref name="toggle" scoped="" ref="0x40482280"/>
        <function-ref name="isOutput" scoped="" ref="0x40482360"/>
        <function-ref name="get" scoped="" ref="0x40482440"/>
        <function-ref name="makeOutput" scoped="" ref="0x40482520"/>
        <function-ref name="set" scoped="" ref="0x40482600"/>
        <function-ref name="clr" scoped="" ref="0x404826e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4047f538" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4047f538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4047f710"/>
        <function-ref name="isInput" scoped="" ref="0x4047f7f0"/>
        <function-ref name="toggle" scoped="" ref="0x4047f8d0"/>
        <function-ref name="isOutput" scoped="" ref="0x4047f9b0"/>
        <function-ref name="get" scoped="" ref="0x4047fa90"/>
        <function-ref name="makeOutput" scoped="" ref="0x4047fb70"/>
        <function-ref name="set" scoped="" ref="0x4047fc50"/>
        <function-ref name="clr" scoped="" ref="0x4047fd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40489b68" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40489b68"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40489d40"/>
        <function-ref name="isInput" scoped="" ref="0x40489e20"/>
        <function-ref name="toggle" scoped="" ref="0x40489f00"/>
        <function-ref name="isOutput" scoped="" ref="0x40488010"/>
        <function-ref name="get" scoped="" ref="0x404880f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404881d0"/>
        <function-ref name="set" scoped="" ref="0x404882b0"/>
        <function-ref name="clr" scoped="" ref="0x40488390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40486228" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40486228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40486400"/>
        <function-ref name="isInput" scoped="" ref="0x404864e0"/>
        <function-ref name="toggle" scoped="" ref="0x404865c0"/>
        <function-ref name="isOutput" scoped="" ref="0x404866a0"/>
        <function-ref name="get" scoped="" ref="0x40486780"/>
        <function-ref name="makeOutput" scoped="" ref="0x40486860"/>
        <function-ref name="set" scoped="" ref="0x40486940"/>
        <function-ref name="clr" scoped="" ref="0x40486a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4048f8f0" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4048f8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4048fac8"/>
        <function-ref name="isInput" scoped="" ref="0x4048fba8"/>
        <function-ref name="toggle" scoped="" ref="0x4048fc88"/>
        <function-ref name="isOutput" scoped="" ref="0x4048fd68"/>
        <function-ref name="get" scoped="" ref="0x4048fe48"/>
        <function-ref name="makeOutput" scoped="" ref="0x4048ff28"/>
        <function-ref name="set" scoped="" ref="0x4048e018"/>
        <function-ref name="clr" scoped="" ref="0x4048e0f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4048dec0" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4048dec0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4048c0c0"/>
        <function-ref name="isInput" scoped="" ref="0x4048c1a0"/>
        <function-ref name="toggle" scoped="" ref="0x4048c280"/>
        <function-ref name="isOutput" scoped="" ref="0x4048c360"/>
        <function-ref name="get" scoped="" ref="0x4048c440"/>
        <function-ref name="makeOutput" scoped="" ref="0x4048c520"/>
        <function-ref name="set" scoped="" ref="0x4048c600"/>
        <function-ref name="clr" scoped="" ref="0x4048c6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404953e8" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404953e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404955c0"/>
        <function-ref name="isInput" scoped="" ref="0x404956a0"/>
        <function-ref name="toggle" scoped="" ref="0x40495780"/>
        <function-ref name="isOutput" scoped="" ref="0x40495860"/>
        <function-ref name="get" scoped="" ref="0x40495940"/>
        <function-ref name="makeOutput" scoped="" ref="0x40495a20"/>
        <function-ref name="set" scoped="" ref="0x40495b00"/>
        <function-ref name="clr" scoped="" ref="0x40495be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404938f0" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404938f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40493ac8"/>
        <function-ref name="isInput" scoped="" ref="0x40493ba8"/>
        <function-ref name="toggle" scoped="" ref="0x40493c88"/>
        <function-ref name="isOutput" scoped="" ref="0x40493d68"/>
        <function-ref name="get" scoped="" ref="0x40493e48"/>
        <function-ref name="makeOutput" scoped="" ref="0x40493f28"/>
        <function-ref name="set" scoped="" ref="0x40492018"/>
        <function-ref name="clr" scoped="" ref="0x404920f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40491dd8" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40491dd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40490010"/>
        <function-ref name="isInput" scoped="" ref="0x404900f0"/>
        <function-ref name="toggle" scoped="" ref="0x404901d0"/>
        <function-ref name="isOutput" scoped="" ref="0x404902b0"/>
        <function-ref name="get" scoped="" ref="0x40490390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40490470"/>
        <function-ref name="set" scoped="" ref="0x40490550"/>
        <function-ref name="clr" scoped="" ref="0x40490630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404993b0" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404993b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40499588"/>
        <function-ref name="isInput" scoped="" ref="0x40499668"/>
        <function-ref name="toggle" scoped="" ref="0x40499748"/>
        <function-ref name="isOutput" scoped="" ref="0x40499828"/>
        <function-ref name="get" scoped="" ref="0x40499908"/>
        <function-ref name="makeOutput" scoped="" ref="0x404999e8"/>
        <function-ref name="set" scoped="" ref="0x40499ac8"/>
        <function-ref name="clr" scoped="" ref="0x40499ba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404978a0" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404978a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40497a78"/>
        <function-ref name="isInput" scoped="" ref="0x40497b58"/>
        <function-ref name="toggle" scoped="" ref="0x40497c38"/>
        <function-ref name="isOutput" scoped="" ref="0x40497d18"/>
        <function-ref name="get" scoped="" ref="0x40497df8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40497ed8"/>
        <function-ref name="set" scoped="" ref="0x40496010"/>
        <function-ref name="clr" scoped="" ref="0x404960f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x404c14d8" loc="27:/opt/tinyos-2.1.0/tos/platforms/mica/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x404c14d8"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x402e4ce0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x402e4ce0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404c16b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x404c1888" loc="28:/opt/tinyos-2.1.0/tos/platforms/mica/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x404c1888"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x404c1a60"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x404c1b40"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x404c1c20"/>
        <function-ref name="actualMicro" scoped="" ref="0x404c1d00"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x404c1de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x404ca010" loc="49:/opt/tinyos-2.1.0/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x404ca010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404ca1e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x404b6240" loc="46:/opt/tinyos-2.1.0/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x404b6240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x404b6418"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x404b6ba0" loc="48:/opt/tinyos-2.1.0/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x404b6ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404b6d78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x404b65d8" loc="47:/opt/tinyos-2.1.0/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x404b65d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404b67b0"/>
        <function-ref name="taskLoop" scoped="" ref="0x404b6890"/>
        <function-ref name="runNextTask" scoped="" ref="0x404b6970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x402f2bc0" loc="37:/opt/tinyos-2.1.0/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x402f2bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x402f2d98"/>
        <function-ref name="runTask" scoped="" ref="0x402f2e78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x402eb408" loc="36:/opt/tinyos-2.1.0/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x402eb408"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x402eb5e0"/>
        <function-ref name="taskLoop" scoped="" ref="0x402eb6c0"/>
        <function-ref name="runNextTask" scoped="" ref="0x402eb7a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x40358f18" loc="45:/opt/tinyos-2.1.0/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x40358f18"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40357108"/>
        <function-ref name="runTask" scoped="" ref="0x403571e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x40357b90" loc="46:/opt/tinyos-2.1.0/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x40357b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x40357d68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x403586e0" loc="44:/opt/tinyos-2.1.0/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x403586e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x403588b8"/>
        <function-ref name="taskLoop" scoped="" ref="0x40358998"/>
        <function-ref name="runNextTask" scoped="" ref="0x40358a78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x4036a218" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x4036a218"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x4036a3f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x40366438" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x40366438"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x40366610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x4036b148" loc="43:/opt/tinyos-2.1.0/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x4036b148"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x4036b320"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMControl" ref="0x404fca10" loc="53:RadioCountToLedsC.nc">
      <component-ref qname="RadioCountToLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMControl" scoped="" ref="0x404fca10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x404fcbe8"/>
        <function-ref name="stopDone" scoped="" ref="0x404fccc8"/>
        <function-ref name="start" scoped="" ref="0x404fcda8"/>
        <function-ref name="stop" scoped="" ref="0x404fce88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x404d8ea0" loc="49:RadioCountToLedsC.nc">
      <component-ref qname="RadioCountToLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x404d8ea0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x404d20c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x404f8380" loc="51:RadioCountToLedsC.nc">
      <component-ref qname="RadioCountToLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x404f8380"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x404f8558"/>
        <function-ref name="getPayload" scoped="" ref="0x404f8638"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x404f8718"/>
        <function-ref name="cancel" scoped="" ref="0x404f87f8"/>
        <function-ref name="sendDone" scoped="" ref="0x404f88d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x40505ce8" loc="54:RadioCountToLedsC.nc">
      <component-ref qname="RadioCountToLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40505ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40505ec0"/>
        <function-ref name="payloadLength" scoped="" ref="0x404fe010"/>
        <function-ref name="getPayload" scoped="" ref="0x404fe0f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x404fe1d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x404fe2b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0x404f2d50" loc="50:RadioCountToLedsC.nc">
      <component-ref qname="RadioCountToLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x404f2d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x404f2f28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MilliTimer" ref="0x405014e0" loc="52:RadioCountToLedsC.nc">
      <component-ref qname="RadioCountToLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MilliTimer" scoped="" ref="0x405014e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40500010"/>
        <function-ref name="fired" scoped="" ref="0x404e52a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x404e59a8"/>
        <function-ref name="isOneShot" scoped="" ref="0x404e5750"/>
        <function-ref name="getdt" scoped="" ref="0x405004c0"/>
        <function-ref name="gett0" scoped="" ref="0x40500268"/>
        <function-ref name="isRunning" scoped="" ref="0x404e54f8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40501b08"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x404e5cc8"/>
        <function-ref name="startOneShot" scoped="" ref="0x40501d88"/>
        <function-ref name="stop" scoped="" ref="0x404e5048"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x404d8298" loc="48:RadioCountToLedsC.nc">
      <component-ref qname="RadioCountToLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x404d8298"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x404d8470"/>
        <function-ref name="led0Toggle" scoped="" ref="0x404d8550"/>
        <function-ref name="led1On" scoped="" ref="0x404d8630"/>
        <function-ref name="led1Toggle" scoped="" ref="0x404d8710"/>
        <function-ref name="led2Toggle" scoped="" ref="0x404d87f0"/>
        <function-ref name="get" scoped="" ref="0x404d88d0"/>
        <function-ref name="led1Off" scoped="" ref="0x404d89b0"/>
        <function-ref name="led2Off" scoped="" ref="0x404d8d30"/>
        <function-ref name="set" scoped="" ref="0x404d8a90"/>
        <function-ref name="led0On" scoped="" ref="0x404d8b70"/>
        <function-ref name="led2On" scoped="" ref="0x404d8c50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x40376d28" loc="35:/opt/tinyos-2.1.0/tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40376d28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40376f00"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40514010"/>
        <function-ref name="led1On" scoped="" ref="0x405140f0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x405141d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x405142b0"/>
        <function-ref name="get" scoped="" ref="0x40514390"/>
        <function-ref name="led1Off" scoped="" ref="0x40514470"/>
        <function-ref name="led2Off" scoped="" ref="0x405147f0"/>
        <function-ref name="set" scoped="" ref="0x40514550"/>
        <function-ref name="led0On" scoped="" ref="0x40514630"/>
        <function-ref name="led2On" scoped="" ref="0x40514710"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x405100b0" loc="39:/opt/tinyos-2.1.0/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x405100b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40510288"/>
        <function-ref name="isInput" scoped="" ref="0x40510368"/>
        <function-ref name="toggle" scoped="" ref="0x40510448"/>
        <function-ref name="isOutput" scoped="" ref="0x40510528"/>
        <function-ref name="get" scoped="" ref="0x40510608"/>
        <function-ref name="makeOutput" scoped="" ref="0x405106e8"/>
        <function-ref name="set" scoped="" ref="0x405107c8"/>
        <function-ref name="clr" scoped="" ref="0x405108a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40511090" loc="35:/opt/tinyos-2.1.0/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40511090"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40511268"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x40510a98" loc="40:/opt/tinyos-2.1.0/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x40510a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40510c70"/>
        <function-ref name="isInput" scoped="" ref="0x40510d50"/>
        <function-ref name="toggle" scoped="" ref="0x40510e30"/>
        <function-ref name="isOutput" scoped="" ref="0x40510f10"/>
        <function-ref name="get" scoped="" ref="0x4051d010"/>
        <function-ref name="makeOutput" scoped="" ref="0x4051d0f0"/>
        <function-ref name="set" scoped="" ref="0x4051d1d0"/>
        <function-ref name="clr" scoped="" ref="0x4051d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x405113d8" loc="36:/opt/tinyos-2.1.0/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x405113d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x405115b0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40511690"/>
        <function-ref name="led1On" scoped="" ref="0x40511770"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40511850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40511930"/>
        <function-ref name="get" scoped="" ref="0x40511a10"/>
        <function-ref name="led1Off" scoped="" ref="0x40511af0"/>
        <function-ref name="led2Off" scoped="" ref="0x40511e70"/>
        <function-ref name="set" scoped="" ref="0x40511bd0"/>
        <function-ref name="led0On" scoped="" ref="0x40511cb0"/>
        <function-ref name="led2On" scoped="" ref="0x40511d90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x4051d4a0" loc="41:/opt/tinyos-2.1.0/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x4051d4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4051d678"/>
        <function-ref name="isInput" scoped="" ref="0x4051d758"/>
        <function-ref name="toggle" scoped="" ref="0x4051d838"/>
        <function-ref name="isOutput" scoped="" ref="0x4051d918"/>
        <function-ref name="get" scoped="" ref="0x4051d9f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4051dad8"/>
        <function-ref name="set" scoped="" ref="0x4051dbb8"/>
        <function-ref name="clr" scoped="" ref="0x4051dc98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x40513e30" loc="35:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x40513e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4052a050"/>
        <function-ref name="isInput" scoped="" ref="0x4052a130"/>
        <function-ref name="toggle" scoped="" ref="0x4052a210"/>
        <function-ref name="isOutput" scoped="" ref="0x4052a2f0"/>
        <function-ref name="get" scoped="" ref="0x4052a3d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4052a4b0"/>
        <function-ref name="set" scoped="" ref="0x4052a590"/>
        <function-ref name="clr" scoped="" ref="0x4052a670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x4052a880" loc="36:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x4052a880"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4052aa58"/>
        <function-ref name="isInput" scoped="" ref="0x4052ab38"/>
        <function-ref name="toggle" scoped="" ref="0x4052ac18"/>
        <function-ref name="isOutput" scoped="" ref="0x4052acf8"/>
        <function-ref name="get" scoped="" ref="0x4052add8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4052aeb8"/>
        <function-ref name="set" scoped="" ref="0x40529010"/>
        <function-ref name="clr" scoped="" ref="0x405290f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x40529c88" loc="38:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40529c88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40529e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x40529300" loc="37:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x40529300"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405294d8"/>
        <function-ref name="isInput" scoped="" ref="0x405295b8"/>
        <function-ref name="toggle" scoped="" ref="0x40529698"/>
        <function-ref name="isOutput" scoped="" ref="0x40529778"/>
        <function-ref name="get" scoped="" ref="0x40529858"/>
        <function-ref name="makeOutput" scoped="" ref="0x40529938"/>
        <function-ref name="set" scoped="" ref="0x40529a18"/>
        <function-ref name="clr" scoped="" ref="0x40529af8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x4093f888" loc="41:/opt/tinyos-2.1.0/tos/system/AMSenderC.nc">
      <component-ref qname="RadioCountToLedsAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x4093f888"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x4093fa60"/>
        <function-ref name="getPayload" scoped="" ref="0x4093fb40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x4093fc20"/>
        <function-ref name="cancel" scoped="" ref="0x4093fd00"/>
        <function-ref name="sendDone" scoped="" ref="0x4093fde0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x4093ff20" loc="42:/opt/tinyos-2.1.0/tos/system/AMSenderC.nc">
      <component-ref qname="RadioCountToLedsAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x4093ff20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x4093e110"/>
        <function-ref name="payloadLength" scoped="" ref="0x4093e1f0"/>
        <function-ref name="getPayload" scoped="" ref="0x4093e2d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x4093e3b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x4093e490"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x4093e5d0" loc="43:/opt/tinyos-2.1.0/tos/system/AMSenderC.nc">
      <component-ref qname="RadioCountToLedsAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x4093e5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x4093e7a8"/>
        <function-ref name="source" scoped="" ref="0x4093e888"/>
        <function-ref name="address" scoped="" ref="0x4093e968"/>
        <function-ref name="destination" scoped="" ref="0x4093ea48"/>
        <function-ref name="setSource" scoped="" ref="0x4093eb28"/>
        <function-ref name="setDestination" scoped="" ref="0x4093ec08"/>
        <function-ref name="type" scoped="" ref="0x4093ece8"/>
        <function-ref name="setType" scoped="" ref="0x4093edc8"/>
        <function-ref name="isForMe" scoped="" ref="0x4093eea8"/>
        <function-ref name="setGroup" scoped="" ref="0x4093d010"/>
        <function-ref name="localGroup" scoped="" ref="0x4093d0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x4093d250" loc="44:/opt/tinyos-2.1.0/tos/system/AMSenderC.nc">
      <component-ref qname="RadioCountToLedsAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x4093d250"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x4093d428"/>
        <function-ref name="noAck" scoped="" ref="0x4093d508"/>
        <function-ref name="wasAcked" scoped="" ref="0x4093d5e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x40af1538" loc="36:/opt/tinyos-2.1.0/tos/system/AMQueueEntryP.nc">
      <component-ref qname="RadioCountToLedsAppC.AMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40af1538"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40af1710"/>
        <function-ref name="getPayload" scoped="" ref="0x40af17f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40af18d0"/>
        <function-ref name="cancel" scoped="" ref="0x40af19b0"/>
        <function-ref name="sendDone" scoped="" ref="0x40af1a90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x40af1c00" loc="38:/opt/tinyos-2.1.0/tos/system/AMQueueEntryP.nc">
      <component-ref qname="RadioCountToLedsAppC.AMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40af1c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40af1dd8"/>
        <function-ref name="getPayload" scoped="" ref="0x40af1eb8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40af0010"/>
        <function-ref name="cancel" scoped="" ref="0x40af00f0"/>
        <function-ref name="sendDone" scoped="" ref="0x40af01d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x40af0310" loc="39:/opt/tinyos-2.1.0/tos/system/AMQueueEntryP.nc">
      <component-ref qname="RadioCountToLedsAppC.AMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40af0310"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40af04e8"/>
        <function-ref name="source" scoped="" ref="0x40af05c8"/>
        <function-ref name="address" scoped="" ref="0x40af06a8"/>
        <function-ref name="destination" scoped="" ref="0x40af0788"/>
        <function-ref name="setSource" scoped="" ref="0x40af0868"/>
        <function-ref name="setDestination" scoped="" ref="0x40af0948"/>
        <function-ref name="type" scoped="" ref="0x40af0a28"/>
        <function-ref name="setType" scoped="" ref="0x40af0b08"/>
        <function-ref name="isForMe" scoped="" ref="0x40af0be8"/>
        <function-ref name="setGroup" scoped="" ref="0x40af0cc8"/>
        <function-ref name="localGroup" scoped="" ref="0x40af0da8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x405539f0" loc="35:/opt/tinyos-2.1.0/tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x405539f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40553bc8"/>
        <function-ref name="getPayload" scoped="" ref="0x40553ca8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40553d88"/>
        <function-ref name="cancel" scoped="" ref="0x40553e68"/>
        <function-ref name="sendDone" scoped="" ref="0x40550010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x405760a8" loc="40:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x405760a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x404d2e58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40576290"/>
        <function-ref name="getPayload" scoped="" ref="0x40576370"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40576450"/>
        <function-ref name="cancel" scoped="" ref="0x40576530"/>
        <function-ref name="sendDone" scoped="" ref="0x40576610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40577908" loc="38:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40577908"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40577af0"/>
        <function-ref name="getPayload" scoped="" ref="0x40577bd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40577cb0"/>
        <function-ref name="cancel" scoped="" ref="0x40577d90"/>
        <function-ref name="sendDone" scoped="" ref="0x40577e70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x405753f0" loc="42:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x405753f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x405755c8"/>
        <function-ref name="payloadLength" scoped="" ref="0x405756a8"/>
        <function-ref name="getPayload" scoped="" ref="0x40575788"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40575868"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40575948"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x40575ac8" loc="161:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0x40575ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40575ca0"/>
        <function-ref name="runTask" scoped="" ref="0x40575d80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x40575f00" loc="118:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0x40575f00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x405840f0"/>
        <function-ref name="runTask" scoped="" ref="0x405841d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x40576750" loc="41:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40576750"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40576928"/>
        <function-ref name="source" scoped="" ref="0x40576a08"/>
        <function-ref name="address" scoped="" ref="0x40576ae8"/>
        <function-ref name="destination" scoped="" ref="0x40576bc8"/>
        <function-ref name="setSource" scoped="" ref="0x40576ca8"/>
        <function-ref name="setDestination" scoped="" ref="0x40576d88"/>
        <function-ref name="type" scoped="" ref="0x40576e68"/>
        <function-ref name="setType" scoped="" ref="0x40575010"/>
        <function-ref name="isForMe" scoped="" ref="0x405750f0"/>
        <function-ref name="setGroup" scoped="" ref="0x405751d0"/>
        <function-ref name="localGroup" scoped="" ref="0x405752b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x40581288" loc="48:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x40581288"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40581460"/>
        <function-ref name="stopDone" scoped="" ref="0x40581540"/>
        <function-ref name="start" scoped="" ref="0x40581620"/>
        <function-ref name="stop" scoped="" ref="0x40581700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x40581b60" loc="50:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40581b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40581d38"/>
        <function-ref name="getPayload" scoped="" ref="0x40581e18"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40581ef8"/>
        <function-ref name="cancel" scoped="" ref="0x40580010"/>
        <function-ref name="sendDone" scoped="" ref="0x405800f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x40580bf0" loc="52:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x40580bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40580dc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x4057f010" loc="54:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x4057f010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x4057f1e8"/>
        <function-ref name="payloadLength" scoped="" ref="0x4057f2c8"/>
        <function-ref name="getPayload" scoped="" ref="0x4057f3a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x4057f488"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x4057f568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40580558" loc="51:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40580558"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40580730"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x4057e3f0" loc="56:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x4057e3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x4057e5c8"/>
        <function-ref name="noAck" scoped="" ref="0x4057e6a8"/>
        <function-ref name="wasAcked" scoped="" ref="0x4057e788"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x4057f700" loc="55:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x4057f700"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x4057f8d8"/>
        <function-ref name="source" scoped="" ref="0x4057f9b8"/>
        <function-ref name="address" scoped="" ref="0x4057fa98"/>
        <function-ref name="destination" scoped="" ref="0x4057fb78"/>
        <function-ref name="setSource" scoped="" ref="0x4057fc58"/>
        <function-ref name="setDestination" scoped="" ref="0x4057fd38"/>
        <function-ref name="type" scoped="" ref="0x4057fe18"/>
        <function-ref name="setType" scoped="" ref="0x4057fef8"/>
        <function-ref name="isForMe" scoped="" ref="0x4057e010"/>
        <function-ref name="setGroup" scoped="" ref="0x4057e0f0"/>
        <function-ref name="localGroup" scoped="" ref="0x4057e1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x4058b2a0" loc="46:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x4058b2a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x4058b478"/>
        <function-ref name="stopDone" scoped="" ref="0x4058b558"/>
        <function-ref name="start" scoped="" ref="0x4058b638"/>
        <function-ref name="stop" scoped="" ref="0x4058b718"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x4058bb78" loc="47:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x4058bb78"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x404d2e58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x4058bd50"/>
        <function-ref name="getPayload" scoped="" ref="0x4058be30"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x4058bf10"/>
        <function-ref name="cancel" scoped="" ref="0x4058a010"/>
        <function-ref name="sendDone" scoped="" ref="0x4058a0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x4058abf0" loc="49:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x4058abf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x404d2e58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x4058adc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40588c28" loc="51:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40588c28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40588e00"/>
        <function-ref name="payloadLength" scoped="" ref="0x40588ee0"/>
        <function-ref name="getPayload" scoped="" ref="0x40587010"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x405870f0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x405871d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x4058a558" loc="48:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x4058a558"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x404d2e58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x4058a730"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x405873f0" loc="52:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x405873f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x405875c8"/>
        <function-ref name="noAck" scoped="" ref="0x405876a8"/>
        <function-ref name="wasAcked" scoped="" ref="0x40587788"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x40588010" loc="50:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40588010"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x405881e8"/>
        <function-ref name="source" scoped="" ref="0x405882c8"/>
        <function-ref name="address" scoped="" ref="0x405883a8"/>
        <function-ref name="destination" scoped="" ref="0x40588488"/>
        <function-ref name="setSource" scoped="" ref="0x40588568"/>
        <function-ref name="setDestination" scoped="" ref="0x40588648"/>
        <function-ref name="type" scoped="" ref="0x40588728"/>
        <function-ref name="setType" scoped="" ref="0x40588808"/>
        <function-ref name="isForMe" scoped="" ref="0x405888e8"/>
        <function-ref name="setGroup" scoped="" ref="0x405889c8"/>
        <function-ref name="localGroup" scoped="" ref="0x40588aa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x405947e8" loc="53:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x405947e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x405949c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x40591848" loc="46:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x40591848"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40591a20"/>
        <function-ref name="getPayload" scoped="" ref="0x40591b00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40591be0"/>
        <function-ref name="cancel" scoped="" ref="0x40591cc0"/>
        <function-ref name="sendDone" scoped="" ref="0x40591da0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x40590010" loc="47:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x40590010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x405901e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x40593748" loc="40:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40593748"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x404d2e58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40593920"/>
        <function-ref name="getPayload" scoped="" ref="0x40593a00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40593ae0"/>
        <function-ref name="cancel" scoped="" ref="0x40593bc0"/>
        <function-ref name="sendDone" scoped="" ref="0x40593ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x405927b8" loc="42:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x405927b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x404d2e58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40592990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x405903c8" loc="48:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x405903c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x405905a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x40590680"/>
        <function-ref name="getPayload" scoped="" ref="0x40590760"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40590840"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40590920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40592120" loc="41:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40592120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x404d2e58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x405922f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x40592b28" loc="43:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40592b28"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40592d00"/>
        <function-ref name="source" scoped="" ref="0x40592de0"/>
        <function-ref name="address" scoped="" ref="0x40592ec0"/>
        <function-ref name="destination" scoped="" ref="0x40591010"/>
        <function-ref name="setSource" scoped="" ref="0x405910f0"/>
        <function-ref name="setDestination" scoped="" ref="0x405911d0"/>
        <function-ref name="type" scoped="" ref="0x405912b0"/>
        <function-ref name="setType" scoped="" ref="0x40591390"/>
        <function-ref name="isForMe" scoped="" ref="0x40591470"/>
        <function-ref name="setGroup" scoped="" ref="0x40591550"/>
        <function-ref name="localGroup" scoped="" ref="0x40591630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x405867c8" loc="54:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x405867c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x405869a0"/>
        <function-ref name="stopDone" scoped="" ref="0x40586a80"/>
        <function-ref name="start" scoped="" ref="0x40586b60"/>
        <function-ref name="stop" scoped="" ref="0x40586c40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x405ba010" loc="63:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x405ba010"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x405ba1e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x405bd870" loc="58:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x405bd870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x405bda48"/>
        <function-ref name="payloadLength" scoped="" ref="0x405bdb28"/>
        <function-ref name="getPayload" scoped="" ref="0x405bdc08"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x405bdce8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x405bddc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40586db0" loc="55:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40586db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x405bd010"/>
        <function-ref name="getPayload" scoped="" ref="0x405bd0f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x405bd1d0"/>
        <function-ref name="cancel" scoped="" ref="0x405bd2b0"/>
        <function-ref name="sendDone" scoped="" ref="0x405bd390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x405c0500" loc="65:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x405c0500"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="getLocalSleepInterval" scoped="" ref="0x405c06d8"/>
        <function-ref name="getRxDutyCycle" scoped="" ref="0x405c07b8"/>
        <function-ref name="sleepIntervalToDutyCycle" scoped="" ref="0x405c0898"/>
        <function-ref name="getLocalDutyCycle" scoped="" ref="0x405c0978"/>
        <function-ref name="setRxSleepInterval" scoped="" ref="0x405c0a58"/>
        <function-ref name="setLocalDutyCycle" scoped="" ref="0x405c0b38"/>
        <function-ref name="setRxDutyCycle" scoped="" ref="0x405c0c18"/>
        <function-ref name="dutyCycleToSleepInterval" scoped="" ref="0x405c0cf8"/>
        <function-ref name="getRxSleepInterval" scoped="" ref="0x405c0dd8"/>
        <function-ref name="setLocalSleepInterval" scoped="" ref="0x405c0eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaControl" ref="0x405bcc48" loc="59:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaControl" scoped="" ref="0x405bcc48"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="disableCca" scoped="" ref="0x405bce20"/>
        <function-ref name="enableCca" scoped="" ref="0x405bcf00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x405bd518" loc="56:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x405bd518"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x405bd6f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x405c79d0" loc="62:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x405c79d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x405c7ba8"/>
        <function-ref name="noAck" scoped="" ref="0x405c7c88"/>
        <function-ref name="wasAcked" scoped="" ref="0x405c7d68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaBackoff" ref="0x405b87e8" loc="60:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaBackoff" scoped="" ref="0x405b87e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="congestion" scoped="" ref="0x405b89c0"/>
        <function-ref name="initial" scoped="" ref="0x405b8aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioTimeStamping" ref="0x405c74f8" loc="61:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioTimeStamping" scoped="" ref="0x405c74f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioTimeStamping"/>
      </instance>
      <interface-functions>
        <function-ref name="transmittedSFD" scoped="" ref="0x405c76d0"/>
        <function-ref name="receivedSFD" scoped="" ref="0x405c77b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x405d3e20" loc="56:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x405d3e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x405d2010"/>
        <function-ref name="stopDone" scoped="" ref="0x405d20f0"/>
        <function-ref name="start" scoped="" ref="0x405d21d0"/>
        <function-ref name="stop" scoped="" ref="0x405d22b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x405efa28" loc="71:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x405efa28"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40333288"/>
            <typename><typedef-ref name="TMicro" ref="0x40333450"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x405f2228"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="setWakeupTask" ref="0x405fa040" loc="108:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="setWakeupTask" scoped="" ref="0x405fa040"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x405fa218"/>
        <function-ref name="runTask" scoped="" ref="0x405fa2f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startStopDone" ref="0x405ffd18" loc="175:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startStopDone" scoped="" ref="0x405ffd18"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x405ffef0"/>
        <function-ref name="runTask" scoped="" ref="0x40610010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiNoiseFloor" ref="0x405edac0" loc="73:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiNoiseFloor" scoped="" ref="0x405edac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x405f1120"/>
        <function-ref name="readDone" scoped="" ref="0x405f1398"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x405e5010" loc="69:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x405e5010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x405e51e8"/>
        <function-ref name="rand32" scoped="" ref="0x405e52c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x405d2d70" loc="59:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x405d2d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="getLocalSleepInterval" scoped="" ref="0x405e3010"/>
        <function-ref name="getRxDutyCycle" scoped="" ref="0x405e30f0"/>
        <function-ref name="sleepIntervalToDutyCycle" scoped="" ref="0x405e31d0"/>
        <function-ref name="getLocalDutyCycle" scoped="" ref="0x405e32b0"/>
        <function-ref name="setRxSleepInterval" scoped="" ref="0x405e3390"/>
        <function-ref name="setLocalDutyCycle" scoped="" ref="0x405e3470"/>
        <function-ref name="setRxDutyCycle" scoped="" ref="0x405e3550"/>
        <function-ref name="dutyCycleToSleepInterval" scoped="" ref="0x405e3630"/>
        <function-ref name="getRxSleepInterval" scoped="" ref="0x405e3710"/>
        <function-ref name="setLocalSleepInterval" scoped="" ref="0x405e37f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaControl" ref="0x405d2460" loc="57:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaControl" scoped="" ref="0x405d2460"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="disableCca" scoped="" ref="0x405d2638"/>
        <function-ref name="enableCca" scoped="" ref="0x405d2718"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x405d3a88" loc="55:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x405d3a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x405d3c60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiCheckChannel" ref="0x405f1868" loc="74:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiCheckChannel" scoped="" ref="0x405f1868"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x405f1eb0"/>
        <function-ref name="readDone" scoped="" ref="0x405ee150"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC1000Squelch" ref="0x405e4d88" loc="68:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Squelch" scoped="" ref="0x405e4d88"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Squelch"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x405eb010"/>
        <function-ref name="settled" scoped="" ref="0x405eb0f0"/>
        <function-ref name="adjust" scoped="" ref="0x405eb1d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sleepCheck" ref="0x406178b0" loc="293:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sleepCheck" scoped="" ref="0x406178b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40617a88"/>
        <function-ref name="runTask" scoped="" ref="0x40617b68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="WakeupTimer" ref="0x405e55a0" loc="70:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="WakeupTimer" scoped="" ref="0x405e55a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x405f3098"/>
        <function-ref name="fired" scoped="" ref="0x405f4330"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x405f4a38"/>
        <function-ref name="isOneShot" scoped="" ref="0x405f47e0"/>
        <function-ref name="getdt" scoped="" ref="0x405f3548"/>
        <function-ref name="gett0" scoped="" ref="0x405f32f0"/>
        <function-ref name="isRunning" scoped="" ref="0x405f4588"/>
        <function-ref name="startPeriodic" scoped="" ref="0x405e5bc8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x405f4d58"/>
        <function-ref name="startOneShot" scoped="" ref="0x405e5e48"/>
        <function-ref name="stop" scoped="" ref="0x405f40d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ByteRadioInit" ref="0x405e3a48" loc="62:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ByteRadioInit" scoped="" ref="0x405e3a48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x405e3c20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="adjustSquelch" ref="0x406141f0" loc="316:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="adjustSquelch" scoped="" ref="0x406141f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x406143c8"/>
        <function-ref name="runTask" scoped="" ref="0x406144a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC1000Control" ref="0x405e6c10" loc="67:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Control" scoped="" ref="0x405e6c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Control"/>
      </instance>
      <interface-functions>
        <function-ref name="tunePreset" scoped="" ref="0x405e6de8"/>
        <function-ref name="biasOn" scoped="" ref="0x405e6ec8"/>
        <function-ref name="getRFPower" scoped="" ref="0x405df010"/>
        <function-ref name="tuneManual" scoped="" ref="0x405df0f0"/>
        <function-ref name="selectLock" scoped="" ref="0x405df1d0"/>
        <function-ref name="init" scoped="" ref="0x405df2b0"/>
        <function-ref name="getLock" scoped="" ref="0x405df390"/>
        <function-ref name="coreOn" scoped="" ref="0x405df470"/>
        <function-ref name="txMode" scoped="" ref="0x405df550"/>
        <function-ref name="getLOStatus" scoped="" ref="0x405df630"/>
        <function-ref name="rxMode" scoped="" ref="0x405df710"/>
        <function-ref name="off" scoped="" ref="0x405df7f0"/>
        <function-ref name="setRFPower" scoped="" ref="0x405df8d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ByteRadioControl" ref="0x405e0e28" loc="63:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ByteRadioControl" scoped="" ref="0x405e0e28"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x405e2050"/>
        <function-ref name="stop" scoped="" ref="0x405e2130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiPulseCheck" ref="0x405ee608" loc="75:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiPulseCheck" scoped="" ref="0x405ee608"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x405eec50"/>
        <function-ref name="readDone" scoped="" ref="0x405eeec8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaBackoff" ref="0x405d28c8" loc="58:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaBackoff" scoped="" ref="0x405d28c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="congestion" scoped="" ref="0x405d2aa0"/>
        <function-ref name="initial" scoped="" ref="0x405d2b80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ByteRadio" ref="0x405ec4c8" loc="64:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ByteRadio" scoped="" ref="0x405ec4c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ByteRadio"/>
      </instance>
      <interface-functions>
        <function-ref name="rts" scoped="" ref="0x405ec6a0"/>
        <function-ref name="listen" scoped="" ref="0x405ec780"/>
        <function-ref name="syncing" scoped="" ref="0x405ec860"/>
        <function-ref name="rxDone" scoped="" ref="0x405ec940"/>
        <function-ref name="getPreambleLength" scoped="" ref="0x405eca20"/>
        <function-ref name="idleByte" scoped="" ref="0x405ecb00"/>
        <function-ref name="cts" scoped="" ref="0x405ecbe0"/>
        <function-ref name="setPreambleLength" scoped="" ref="0x405eccc0"/>
        <function-ref name="sendDone" scoped="" ref="0x405ecda0"/>
        <function-ref name="off" scoped="" ref="0x405ece80"/>
        <function-ref name="getTxMessage" scoped="" ref="0x405e1010"/>
        <function-ref name="rx" scoped="" ref="0x405e10f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40654548" loc="62:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40654548"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40654720"/>
        <function-ref name="payloadLength" scoped="" ref="0x40654800"/>
        <function-ref name="getPayload" scoped="" ref="0x406548e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x406549c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40654aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplCC1000Spi" ref="0x40651330" loc="70:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000Spi" scoped="" ref="0x40651330"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="isBufBusy" scoped="" ref="0x40651508"/>
        <function-ref name="initSlave" scoped="" ref="0x406515e8"/>
        <function-ref name="disableIntr" scoped="" ref="0x406516c8"/>
        <function-ref name="writeByte" scoped="" ref="0x406517a8"/>
        <function-ref name="enableIntr" scoped="" ref="0x40651888"/>
        <function-ref name="txMode" scoped="" ref="0x40651968"/>
        <function-ref name="readByte" scoped="" ref="0x40651a48"/>
        <function-ref name="rxMode" scoped="" ref="0x40651b28"/>
        <function-ref name="dataReady" scoped="" ref="0x40651c08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40641620" loc="59:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40641620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x406417f8"/>
        <function-ref name="getPayload" scoped="" ref="0x406418d8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x406419b8"/>
        <function-ref name="cancel" scoped="" ref="0x40641a98"/>
        <function-ref name="sendDone" scoped="" ref="0x40641b78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40645e28" loc="57:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40645e28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40641050"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiRx" ref="0x406504a0" loc="72:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiRx" scoped="" ref="0x406504a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40650b68"/>
        <function-ref name="readDone" scoped="" ref="0x40650de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40641d00" loc="60:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40641d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40641ed8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC1000Squelch" ref="0x40651dd0" loc="71:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Squelch" scoped="" ref="0x40651dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Squelch"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40650010"/>
        <function-ref name="settled" scoped="" ref="0x406500f0"/>
        <function-ref name="adjust" scoped="" ref="0x406501d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalPacketSent" ref="0x4067dd20" loc="377:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalPacketSent" scoped="" ref="0x4067dd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4067def8"/>
        <function-ref name="runTask" scoped="" ref="0x40690010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x40653a10" loc="64:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40653a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x40653be8"/>
        <function-ref name="noAck" scoped="" ref="0x40653cc8"/>
        <function-ref name="wasAcked" scoped="" ref="0x40653da8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC1000Control" ref="0x40652400" loc="69:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Control" scoped="" ref="0x40652400"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Control"/>
      </instance>
      <interface-functions>
        <function-ref name="tunePreset" scoped="" ref="0x406525d8"/>
        <function-ref name="biasOn" scoped="" ref="0x406526b8"/>
        <function-ref name="getRFPower" scoped="" ref="0x40652798"/>
        <function-ref name="tuneManual" scoped="" ref="0x40652878"/>
        <function-ref name="selectLock" scoped="" ref="0x40652958"/>
        <function-ref name="init" scoped="" ref="0x40652a38"/>
        <function-ref name="getLock" scoped="" ref="0x40652b18"/>
        <function-ref name="coreOn" scoped="" ref="0x40652bf8"/>
        <function-ref name="txMode" scoped="" ref="0x40652cd8"/>
        <function-ref name="getLOStatus" scoped="" ref="0x40652db8"/>
        <function-ref name="rxMode" scoped="" ref="0x40652e98"/>
        <function-ref name="off" scoped="" ref="0x40651010"/>
        <function-ref name="setRFPower" scoped="" ref="0x406510f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalPacketReceived" ref="0x4069cbd8" loc="548:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalPacketReceived" scoped="" ref="0x4069cbd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4069cdb0"/>
        <function-ref name="runTask" scoped="" ref="0x4069ce90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ByteRadio" ref="0x40654c40" loc="63:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ByteRadio" scoped="" ref="0x40654c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ByteRadio"/>
      </instance>
      <interface-functions>
        <function-ref name="rts" scoped="" ref="0x40654e18"/>
        <function-ref name="listen" scoped="" ref="0x40654ef8"/>
        <function-ref name="syncing" scoped="" ref="0x40653010"/>
        <function-ref name="rxDone" scoped="" ref="0x406530f0"/>
        <function-ref name="getPreambleLength" scoped="" ref="0x406531d0"/>
        <function-ref name="idleByte" scoped="" ref="0x406532b0"/>
        <function-ref name="cts" scoped="" ref="0x40653390"/>
        <function-ref name="setPreambleLength" scoped="" ref="0x40653470"/>
        <function-ref name="sendDone" scoped="" ref="0x40653550"/>
        <function-ref name="off" scoped="" ref="0x40653630"/>
        <function-ref name="getTxMessage" scoped="" ref="0x40653710"/>
        <function-ref name="rx" scoped="" ref="0x406537f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x406411f8" loc="58:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x406411f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x406413d0"/>
        <function-ref name="stop" scoped="" ref="0x406414b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x40652010" loc="65:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x40652010"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x406521e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioTimeStamping" ref="0x40654110" loc="61:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioTimeStamping" scoped="" ref="0x40654110"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioTimeStamping"/>
      </instance>
      <interface-functions>
        <function-ref name="transmittedSFD" scoped="" ref="0x406542e8"/>
        <function-ref name="receivedSFD" scoped="" ref="0x406543c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActualRssi" ref="0x406cbbe8" loc="52:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000RssiP.nc">
      <component-ref qname="CC1000RssiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActualRssi" scoped="" ref="0x406cbbe8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x406cd278"/>
        <function-ref name="readDone" scoped="" ref="0x406cd4f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x406cb398" loc="51:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000RssiP.nc">
      <component-ref qname="CC1000RssiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x406cb398"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x406cb570"/>
        <function-ref name="immediateRequest" scoped="" ref="0x406cb650"/>
        <function-ref name="request" scoped="" ref="0x406cb730"/>
        <function-ref name="granted" scoped="" ref="0x406cb810"/>
        <function-ref name="isOwner" scoped="" ref="0x406cb8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Rssi" ref="0x406d0368" loc="47:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000RssiP.nc">
      <component-ref qname="CC1000RssiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Rssi" scoped="" ref="0x406d0368"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x406d09b0"/>
        <function-ref name="readDone" scoped="" ref="0x406d0c28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x406bcac0" loc="43:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SquelchP.nc">
      <component-ref qname="CC1000SquelchP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x406bcac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x406bcc98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC1000Squelch" ref="0x406bce60" loc="44:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SquelchP.nc">
      <component-ref qname="CC1000SquelchP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Squelch" scoped="" ref="0x406bce60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Squelch"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x406d6050"/>
        <function-ref name="settled" scoped="" ref="0x406d6130"/>
        <function-ref name="adjust" scoped="" ref="0x406d6210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x406e0df0" loc="47:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ControlP.nc">
      <component-ref qname="CC1000ControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x406e0df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40333288"/>
            <typename><typedef-ref name="TMicro" ref="0x40333450"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x406df570"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC" ref="0x406e0628" loc="46:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ControlP.nc">
      <component-ref qname="CC1000ControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC" scoped="" ref="0x406e0628"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x406e0800"/>
        <function-ref name="read" scoped="" ref="0x406e08e0"/>
        <function-ref name="write" scoped="" ref="0x406e09c0"/>
        <function-ref name="getLOCK" scoped="" ref="0x406e0aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC1000Control" ref="0x406bb6a0" loc="43:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ControlP.nc">
      <component-ref qname="CC1000ControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Control" scoped="" ref="0x406bb6a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Control"/>
      </instance>
      <interface-functions>
        <function-ref name="tunePreset" scoped="" ref="0x406bb878"/>
        <function-ref name="biasOn" scoped="" ref="0x406bb958"/>
        <function-ref name="getRFPower" scoped="" ref="0x406bba38"/>
        <function-ref name="tuneManual" scoped="" ref="0x406bbb18"/>
        <function-ref name="selectLock" scoped="" ref="0x406bbbf8"/>
        <function-ref name="init" scoped="" ref="0x406bbcd8"/>
        <function-ref name="getLock" scoped="" ref="0x406bbdb8"/>
        <function-ref name="coreOn" scoped="" ref="0x406bbe98"/>
        <function-ref name="txMode" scoped="" ref="0x406e0010"/>
        <function-ref name="getLOStatus" scoped="" ref="0x406e00f0"/>
        <function-ref name="rxMode" scoped="" ref="0x406e01d0"/>
        <function-ref name="off" scoped="" ref="0x406e02b0"/>
        <function-ref name="setRFPower" scoped="" ref="0x406e0390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplCC1000Spi" ref="0x40724728" loc="39:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <component-ref qname="HplCC1000C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000Spi" scoped="" ref="0x40724728"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="isBufBusy" scoped="" ref="0x40724900"/>
        <function-ref name="initSlave" scoped="" ref="0x407249e0"/>
        <function-ref name="disableIntr" scoped="" ref="0x40724ac0"/>
        <function-ref name="writeByte" scoped="" ref="0x40724ba0"/>
        <function-ref name="enableIntr" scoped="" ref="0x40724c80"/>
        <function-ref name="txMode" scoped="" ref="0x40724d60"/>
        <function-ref name="readByte" scoped="" ref="0x40724e40"/>
        <function-ref name="rxMode" scoped="" ref="0x40724f20"/>
        <function-ref name="dataReady" scoped="" ref="0x40723018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RssiAdc" ref="0x40725328" loc="37:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <component-ref qname="HplCC1000C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiAdc" scoped="" ref="0x40725328"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40725970"/>
        <function-ref name="readDone" scoped="" ref="0x40725be8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RssiResource" ref="0x40724010" loc="38:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <component-ref qname="HplCC1000C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiResource" scoped="" ref="0x40724010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x407241e8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x407242c8"/>
        <function-ref name="request" scoped="" ref="0x407243a8"/>
        <function-ref name="granted" scoped="" ref="0x40724488"/>
        <function-ref name="isOwner" scoped="" ref="0x40724568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplCC1000" ref="0x407231b8" loc="40:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <component-ref qname="HplCC1000C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000" scoped="" ref="0x407231b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40723390"/>
        <function-ref name="read" scoped="" ref="0x40723470"/>
        <function-ref name="write" scoped="" ref="0x40723550"/>
        <function-ref name="getLOCK" scoped="" ref="0x40723630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x4080e548" loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <component-ref qname="HplCC1000C.RssiChannel"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x4080e548"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x4080e720"/>
        <function-ref name="configure" scoped="" ref="0x4080e800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x40721480" loc="24:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <component-ref qname="HplCC1000C.RssiChannel"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x40721480"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40721ac8"/>
        <function-ref name="readDone" scoped="" ref="0x40721d40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x4080e070" loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <component-ref qname="HplCC1000C.RssiChannel"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x4080e070"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x4080e248"/>
        <function-ref name="getChannel" scoped="" ref="0x4080e328"/>
        <function-ref name="getPrescaler" scoped="" ref="0x4080e408"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40722cc8" loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <component-ref qname="HplCC1000C.RssiChannel"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40722cc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40722ea0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40721010"/>
        <function-ref name="request" scoped="" ref="0x407210f0"/>
        <function-ref name="granted" scoped="" ref="0x407211d0"/>
        <function-ref name="isOwner" scoped="" ref="0x407212b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x4072eec0" loc="18:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x4072eec0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40730500"/>
        <function-ref name="readDone" scoped="" ref="0x40730758"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x40730e68" loc="19:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x40730e68"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x4072f4d8"/>
        <function-ref name="readDone" scoped="" ref="0x4072f750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x4072fe08" loc="22:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x4072fe08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x4072d010"/>
        <function-ref name="getChannel" scoped="" ref="0x4072d0f0"/>
        <function-ref name="getPrescaler" scoped="" ref="0x4072d1d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x4072d670" loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x4072d670"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x4072d848"/>
        <function-ref name="immediateRequest" scoped="" ref="0x4072d928"/>
        <function-ref name="request" scoped="" ref="0x4072da08"/>
        <function-ref name="granted" scoped="" ref="0x4072dae8"/>
        <function-ref name="isOwner" scoped="" ref="0x4072dbc8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x40740100" loc="49:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x40740100"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x407402d8"/>
        <function-ref name="configure" scoped="" ref="0x407403b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x40738870" loc="47:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x40738870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x40738a48"/>
        <function-ref name="dataReady" scoped="" ref="0x40738b28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x4073c300" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x4073c300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x4073c4d8"/>
        <function-ref name="cancel" scoped="" ref="0x4073c5b8"/>
        <function-ref name="dataReady" scoped="" ref="0x4073c698"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x4072b620" loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x4072b620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x4072b7f8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x4072b8d8"/>
        <function-ref name="request" scoped="" ref="0x4072b9b8"/>
        <function-ref name="granted" scoped="" ref="0x4072ba98"/>
        <function-ref name="isOwner" scoped="" ref="0x4072bb78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40740d10" loc="65:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40740d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40740ee8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x4074bbb0" loc="68:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x4074bbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x4074bd88"/>
        <function-ref name="dataReady" scoped="" ref="0x4074be68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x4074b628" loc="67:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x4074b628"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x4074b800"/>
        <function-ref name="cancel" scoped="" ref="0x4074b8e0"/>
        <function-ref name="dataReady" scoped="" ref="0x4074b9c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Adc" ref="0x40742498" loc="71:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x40742498"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x40742670"/>
        <function-ref name="getAdmux" scoped="" ref="0x40742750"/>
        <function-ref name="setPrescaler" scoped="" ref="0x40742830"/>
        <function-ref name="isEnabled" scoped="" ref="0x40742910"/>
        <function-ref name="enableAdc" scoped="" ref="0x407429f0"/>
        <function-ref name="setAdmux" scoped="" ref="0x40742ad0"/>
        <function-ref name="enableInterruption" scoped="" ref="0x40742bb0"/>
        <function-ref name="isComplete" scoped="" ref="0x40742c90"/>
        <function-ref name="cancel" scoped="" ref="0x40742d70"/>
        <function-ref name="disableAdc" scoped="" ref="0x40742e50"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x4074c010"/>
        <function-ref name="disableInterruption" scoped="" ref="0x4074c0f0"/>
        <function-ref name="startConversion" scoped="" ref="0x4074c1d0"/>
        <function-ref name="isStarted" scoped="" ref="0x4074c330"/>
        <function-ref name="setAdcsra" scoped="" ref="0x4074c410"/>
        <function-ref name="setContinuous" scoped="" ref="0x4074c4f0"/>
        <function-ref name="getAdcsra" scoped="" ref="0x4074c5d0"/>
        <function-ref name="getValue" scoped="" ref="0x4074c6b0"/>
        <function-ref name="dataReady" scoped="" ref="0x4074c790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x4074b198" loc="66:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x4074b198"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x4074b370"/>
        <function-ref name="stop" scoped="" ref="0x4074b450"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x4074c968" loc="72:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x4074c968"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x4074cb40"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x4074cc20"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x4074cd00"/>
        <function-ref name="actualMicro" scoped="" ref="0x4074cde0"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x4074cec0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x4073f9f8" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <component-ref qname="HplAtm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x4073f9f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x4073fbd0"/>
        <function-ref name="getAdmux" scoped="" ref="0x4073fcb0"/>
        <function-ref name="setPrescaler" scoped="" ref="0x4073fd90"/>
        <function-ref name="isEnabled" scoped="" ref="0x4073fe70"/>
        <function-ref name="enableAdc" scoped="" ref="0x4076d010"/>
        <function-ref name="setAdmux" scoped="" ref="0x4076d0f0"/>
        <function-ref name="enableInterruption" scoped="" ref="0x4076d1d0"/>
        <function-ref name="isComplete" scoped="" ref="0x4076d2b0"/>
        <function-ref name="cancel" scoped="" ref="0x4076d390"/>
        <function-ref name="disableAdc" scoped="" ref="0x4076d470"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x4076d550"/>
        <function-ref name="disableInterruption" scoped="" ref="0x4076d630"/>
        <function-ref name="startConversion" scoped="" ref="0x4076d710"/>
        <function-ref name="isStarted" scoped="" ref="0x4076d870"/>
        <function-ref name="setAdcsra" scoped="" ref="0x4076d950"/>
        <function-ref name="setContinuous" scoped="" ref="0x4076da30"/>
        <function-ref name="getAdcsra" scoped="" ref="0x4076db10"/>
        <function-ref name="getValue" scoped="" ref="0x4076dbf0"/>
        <function-ref name="dataReady" scoped="" ref="0x4076dcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x4076c6c0" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x4076c6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x4076c898"/>
        <function-ref name="getAdmux" scoped="" ref="0x4076c978"/>
        <function-ref name="setPrescaler" scoped="" ref="0x4076ca58"/>
        <function-ref name="isEnabled" scoped="" ref="0x4076cb38"/>
        <function-ref name="enableAdc" scoped="" ref="0x4076cc18"/>
        <function-ref name="setAdmux" scoped="" ref="0x4076ccf8"/>
        <function-ref name="enableInterruption" scoped="" ref="0x4076cdd8"/>
        <function-ref name="isComplete" scoped="" ref="0x4076ceb8"/>
        <function-ref name="cancel" scoped="" ref="0x40769010"/>
        <function-ref name="disableAdc" scoped="" ref="0x407690f0"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x407691d0"/>
        <function-ref name="disableInterruption" scoped="" ref="0x407692b0"/>
        <function-ref name="startConversion" scoped="" ref="0x40769390"/>
        <function-ref name="isStarted" scoped="" ref="0x407694f0"/>
        <function-ref name="setAdcsra" scoped="" ref="0x407695d0"/>
        <function-ref name="setContinuous" scoped="" ref="0x407696b0"/>
        <function-ref name="getAdcsra" scoped="" ref="0x40769790"/>
        <function-ref name="getValue" scoped="" ref="0x40769870"/>
        <function-ref name="dataReady" scoped="" ref="0x40769950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x40769b38" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x40769b38"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x40769d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x407929f8" loc="82:/opt/tinyos-2.1.0/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x407929f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x40792be0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40792cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x407c9980" loc="86:/opt/tinyos-2.1.0/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x407c9980"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x407c9b68"/>
        <function-ref name="configure" scoped="" ref="0x407c9c48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x40792e00" loc="83:/opt/tinyos-2.1.0/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40792e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x407c9010"/>
        <function-ref name="requested" scoped="" ref="0x407c90f0"/>
        <function-ref name="granted" scoped="" ref="0x407c91d0"/>
        <function-ref name="isOwner" scoped="" ref="0x407c92b0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x407c9390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x407922b8" loc="81:/opt/tinyos-2.1.0/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x407922b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x407924a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40792580"/>
        <function-ref name="request" scoped="" ref="0x40792660"/>
        <function-ref name="granted" scoped="" ref="0x40792740"/>
        <function-ref name="isOwner" scoped="" ref="0x40792820"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x407c94d0" loc="84:/opt/tinyos-2.1.0/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x407c94d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x407c96a8"/>
        <function-ref name="userId" scoped="" ref="0x407c9788"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40b33300" loc="34:/opt/tinyos-2.1.0/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40b33300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40b334d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0x40b33638" loc="35:/opt/tinyos-2.1.0/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RoundRobinQueue" scoped="" ref="0x40b33638"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x40b33810"/>
        <function-ref name="isEmpty" scoped="" ref="0x40b338f0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x40b339d0"/>
        <function-ref name="dequeue" scoped="" ref="0x40b33ab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x40b32ee0" loc="55:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x40b32ee0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x40b310e0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40b311c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x40b31e58" loc="60:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x40b31e58"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x40b2f050"/>
        <function-ref name="configure" scoped="" ref="0x40b2f130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x40b2f290" loc="61:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x40b2f290"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x40b2f468"/>
        <function-ref name="isEmpty" scoped="" ref="0x40b2f548"/>
        <function-ref name="isEnqueued" scoped="" ref="0x40b2f628"/>
        <function-ref name="dequeue" scoped="" ref="0x40b2f708"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x40b31300" loc="56:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40b31300"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40b314d8"/>
        <function-ref name="requested" scoped="" ref="0x40b315b8"/>
        <function-ref name="granted" scoped="" ref="0x40b31698"/>
        <function-ref name="isOwner" scoped="" ref="0x40b31778"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40b31858"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40b2f848" loc="62:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40b2f848"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40b2fa20"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40b2fb00"/>
        <function-ref name="led1On" scoped="" ref="0x40b2fbe0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40b2fcc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40b2fda0"/>
        <function-ref name="get" scoped="" ref="0x40b2fe80"/>
        <function-ref name="led1Off" scoped="" ref="0x40b2e010"/>
        <function-ref name="led0On" scoped="" ref="0x40b2e390"/>
        <function-ref name="set" scoped="" ref="0x40b2e1d0"/>
        <function-ref name="led2On" scoped="" ref="0x40b2e0f0"/>
        <function-ref name="led2Off" scoped="" ref="0x40b2e2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40b327a0" loc="54:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40b327a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40b32988"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40b32a68"/>
        <function-ref name="request" scoped="" ref="0x40b32b48"/>
        <function-ref name="granted" scoped="" ref="0x40b32c28"/>
        <function-ref name="isOwner" scoped="" ref="0x40b32d08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x40b31998" loc="57:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x40b31998"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40b31b70"/>
        <function-ref name="userId" scoped="" ref="0x40b31c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x40b2e510" loc="75:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x40b2e510"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40b2e6e8"/>
        <function-ref name="runTask" scoped="" ref="0x40b2e7c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x407c7510" loc="62:/opt/tinyos-2.1.0/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x407c7510"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x407c76e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x407c7828" loc="63:/opt/tinyos-2.1.0/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x407c7828"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x407c7a00"/>
        <function-ref name="requested" scoped="" ref="0x407c7ae0"/>
        <function-ref name="granted" scoped="" ref="0x407c7bc0"/>
        <function-ref name="isOwner" scoped="" ref="0x407c7ca0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x407c7d80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x407c7118" loc="60:/opt/tinyos-2.1.0/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x407c7118"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x407c72f0"/>
        <function-ref name="stop" scoped="" ref="0x407c73d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x407c7ec0" loc="64:/opt/tinyos-2.1.0/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x407c7ec0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x407e00c0"/>
        <function-ref name="userId" scoped="" ref="0x407e01a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x40b3ddb0" loc="52:/opt/tinyos-2.1.0/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x40b3ddb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x40b65010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x40b65150" loc="53:/opt/tinyos-2.1.0/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40b65150"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40b65328"/>
        <function-ref name="requested" scoped="" ref="0x40b65408"/>
        <function-ref name="granted" scoped="" ref="0x40b654e8"/>
        <function-ref name="isOwner" scoped="" ref="0x40b655c8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40b656a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x40b3d9b8" loc="50:/opt/tinyos-2.1.0/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x40b3d9b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40b3db90"/>
        <function-ref name="stop" scoped="" ref="0x40b3dc70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x40b657e8" loc="54:/opt/tinyos-2.1.0/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x40b657e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40b659c0"/>
        <function-ref name="userId" scoped="" ref="0x40b65aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x407eb968" loc="48:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x407eb968"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x407e8010"/>
        <function-ref name="readDone" scoped="" ref="0x407e8268"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x407e8978" loc="49:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x407e8978"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x407e7010"/>
        <function-ref name="readDone" scoped="" ref="0x407e7288"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x407e7eb0" loc="53:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x407e7eb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x407e60c0"/>
        <function-ref name="getChannel" scoped="" ref="0x407e61a0"/>
        <function-ref name="getPrescaler" scoped="" ref="0x407e6280"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcSingle" ref="0x407e7638" loc="52:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x407e7638"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x407e7810"/>
        <function-ref name="cancel" scoped="" ref="0x407e78f0"/>
        <function-ref name="dataReady" scoped="" ref="0x407e79d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="acquiredData" ref="0x407f7538" loc="103:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="acquiredData" scoped="" ref="0x407f7538"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x407f7710"/>
        <function-ref name="runTask" scoped="" ref="0x407f77f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x40812e78" loc="24:/opt/tinyos-2.1.0/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x40812e78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x407e94d8"/>
        <function-ref name="readDone" scoped="" ref="0x407e9740"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0x407e9ba0" loc="26:/opt/tinyos-2.1.0/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Service" scoped="" ref="0x407e9ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x408061f0"/>
        <function-ref name="readDone" scoped="" ref="0x40806458"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x408067d8" loc="27:/opt/tinyos-2.1.0/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x408067d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x408069c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40806aa0"/>
        <function-ref name="request" scoped="" ref="0x40806b80"/>
        <function-ref name="granted" scoped="" ref="0x40806c60"/>
        <function-ref name="isOwner" scoped="" ref="0x40806d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x40821d50" loc="35:/opt/tinyos-2.1.0/tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x40821d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x40821f28"/>
        <function-ref name="rand32" scoped="" ref="0x40809018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x40821490" loc="34:/opt/tinyos-2.1.0/tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x40821490"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40821ab8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x406e1278" loc="33:/opt/tinyos-2.1.0/tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x406e1278"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x406e1450"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x4081fc18" loc="37:/opt/tinyos-2.1.0/tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x4081fc18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x4081fdf0"/>
        <function-ref name="rand32" scoped="" ref="0x4081fed0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x4081f358" loc="36:/opt/tinyos-2.1.0/tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x4081f358"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4081f980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40809db8" loc="35:/opt/tinyos-2.1.0/tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40809db8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4081f010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x4080a660" loc="37:/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
      <component-ref qname="CC1000CsmaRadioC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x4080a660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4091f170"/>
        <function-ref name="fired" scoped="" ref="0x408203f8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40820b00"/>
        <function-ref name="isOneShot" scoped="" ref="0x408208a8"/>
        <function-ref name="getdt" scoped="" ref="0x4091f620"/>
        <function-ref name="gett0" scoped="" ref="0x4091f3c8"/>
        <function-ref name="isRunning" scoped="" ref="0x40820650"/>
        <function-ref name="startPeriodic" scoped="" ref="0x4080ac88"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40820e20"/>
        <function-ref name="startOneShot" scoped="" ref="0x4080af08"/>
        <function-ref name="stop" scoped="" ref="0x408201a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x4082fa68" loc="38:/opt/tinyos-2.1.0/tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x4082fa68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4082b570"/>
        <function-ref name="fired" scoped="" ref="0x4082c810"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x4082cf18"/>
        <function-ref name="isOneShot" scoped="" ref="0x4082ccc0"/>
        <function-ref name="getdt" scoped="" ref="0x4082ba20"/>
        <function-ref name="gett0" scoped="" ref="0x4082b7c8"/>
        <function-ref name="isRunning" scoped="" ref="0x4082ca68"/>
        <function-ref name="startPeriodic" scoped="" ref="0x4082c0b8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x4082b250"/>
        <function-ref name="startOneShot" scoped="" ref="0x4082c338"/>
        <function-ref name="stop" scoped="" ref="0x4082c5b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x40827a70" loc="35:/opt/tinyos-2.1.0/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x40827a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40825570"/>
        <function-ref name="fired" scoped="" ref="0x40826810"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40826f18"/>
        <function-ref name="isOneShot" scoped="" ref="0x40826cc0"/>
        <function-ref name="getdt" scoped="" ref="0x40825a20"/>
        <function-ref name="gett0" scoped="" ref="0x408257c8"/>
        <function-ref name="isRunning" scoped="" ref="0x40826a68"/>
        <function-ref name="startPeriodic" scoped="" ref="0x408260b8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40825250"/>
        <function-ref name="startOneShot" scoped="" ref="0x40826338"/>
        <function-ref name="stop" scoped="" ref="0x408265b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x4083daf0" loc="36:/opt/tinyos-2.1.0/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x4083daf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40823200"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x408272c0" loc="34:/opt/tinyos-2.1.0/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x408272c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40827498"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0x40830310" loc="29:/opt/tinyos-2.1.0/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0x40830310"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40830a60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40834010"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40830cd8"/>
        <function-ref name="overflow" scoped="" ref="0x40834288"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4083b240" loc="27:/opt/tinyos-2.1.0/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x4083b240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4083b418"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0x40835978" loc="28:/opt/tinyos-2.1.0/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0x40835978"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4083ae40"/>
        <function-ref name="fired" scoped="" ref="0x4083a610"/>
        <function-ref name="startAt" scoped="" ref="0x4083ab00"/>
        <function-ref name="isRunning" scoped="" ref="0x4083a888"/>
        <function-ref name="getAlarm" scoped="" ref="0x408390d8"/>
        <function-ref name="start" scoped="" ref="0x4083a0f8"/>
        <function-ref name="stop" scoped="" ref="0x4083a398"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x408c19e0" loc="26:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x408c19e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x408be010"/>
        <function-ref name="fired" scoped="" ref="0x408c0718"/>
        <function-ref name="startAt" scoped="" ref="0x408c0c08"/>
        <function-ref name="isRunning" scoped="" ref="0x408c0990"/>
        <function-ref name="getAlarm" scoped="" ref="0x408be288"/>
        <function-ref name="start" scoped="" ref="0x408c0200"/>
        <function-ref name="stop" scoped="" ref="0x408c04a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x408c15a8" loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x408c15a8"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x402e4ae0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x402e4ae0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x408c1780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x408be5b8" loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x408be5b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x408bed08"/>
        <function-ref name="clearOverflow" scoped="" ref="0x408bd288"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x408bd010"/>
        <function-ref name="overflow" scoped="" ref="0x408bd500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0x40b792b8" loc="31:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x40b792b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x40b79490"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x40b79570"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x40b79650"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x40b79730"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x40b79810"/>
        <function-ref name="setControl" scoped="" ref="0x40b798f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x40b584a8" loc="26:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x40b584a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40b56960"/>
        <function-ref name="fired" scoped="" ref="0x40b56130"/>
        <function-ref name="startAt" scoped="" ref="0x40b56620"/>
        <function-ref name="isRunning" scoped="" ref="0x40b563a8"/>
        <function-ref name="getAlarm" scoped="" ref="0x40b56bd8"/>
        <function-ref name="start" scoped="" ref="0x40b58bf8"/>
        <function-ref name="stop" scoped="" ref="0x40b58e98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40b58070" loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40b58070"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40b58248"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40b56f08" loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40b56f08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40b55680"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40b55b70"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40b558f8"/>
        <function-ref name="overflow" scoped="" ref="0x40b55de8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerAsync" ref="0x40b775b8" loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x40b775b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="controlBusy" scoped="" ref="0x40b77790"/>
        <function-ref name="compareBusy" scoped="" ref="0x40b77870"/>
        <function-ref name="setTimer0Asynchronous" scoped="" ref="0x40b77950"/>
        <function-ref name="countBusy" scoped="" ref="0x40b77a30"/>
        <function-ref name="getAssr" scoped="" ref="0x40b77b10"/>
        <function-ref name="setAssr" scoped="" ref="0x40b77bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0x40b79ae0" loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x40b79ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x40b77110"/>
        <function-ref name="fired" scoped="" ref="0x40b78718"/>
        <function-ref name="get" scoped="" ref="0x40b78200"/>
        <function-ref name="reset" scoped="" ref="0x40b78990"/>
        <function-ref name="isOn" scoped="" ref="0x40b77388"/>
        <function-ref name="set" scoped="" ref="0x40b78478"/>
        <function-ref name="start" scoped="" ref="0x40b78c08"/>
        <function-ref name="stop" scoped="" ref="0x40b78e80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x40b540f0" loc="30:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40b540f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x40b53b50"/>
        <function-ref name="test" scoped="" ref="0x40b53660"/>
        <function-ref name="get" scoped="" ref="0x40b54738"/>
        <function-ref name="setScale" scoped="" ref="0x40b53dc8"/>
        <function-ref name="getScale" scoped="" ref="0x40b79088"/>
        <function-ref name="reset" scoped="" ref="0x40b54ec8"/>
        <function-ref name="overflow" scoped="" ref="0x40b54c50"/>
        <function-ref name="isOn" scoped="" ref="0x40b538d8"/>
        <function-ref name="set" scoped="" ref="0x40b549b0"/>
        <function-ref name="start" scoped="" ref="0x40b53170"/>
        <function-ref name="stop" scoped="" ref="0x40b533e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x4088d760" loc="48:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x4088d760"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x4088d938"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x4088da18"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x4088daf8"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x4088dbd8"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x4088dcb8"/>
        <function-ref name="setControl" scoped="" ref="0x4088dd98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x4088ac30" loc="50:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x4088ac30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="controlBusy" scoped="" ref="0x4088ae08"/>
        <function-ref name="compareBusy" scoped="" ref="0x4088aee8"/>
        <function-ref name="setTimer0Asynchronous" scoped="" ref="0x40889010"/>
        <function-ref name="countBusy" scoped="" ref="0x408890f0"/>
        <function-ref name="getAssr" scoped="" ref="0x408891d0"/>
        <function-ref name="setAssr" scoped="" ref="0x408892b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x4088b0f0" loc="49:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x4088b0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x4088a660"/>
        <function-ref name="fired" scoped="" ref="0x4088bc50"/>
        <function-ref name="get" scoped="" ref="0x4088b738"/>
        <function-ref name="reset" scoped="" ref="0x4088bec8"/>
        <function-ref name="isOn" scoped="" ref="0x4088a8d8"/>
        <function-ref name="set" scoped="" ref="0x4088b9b0"/>
        <function-ref name="start" scoped="" ref="0x4088a170"/>
        <function-ref name="stop" scoped="" ref="0x4088a3e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x4088f488" loc="47:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x4088f488"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x4088eee0"/>
        <function-ref name="test" scoped="" ref="0x4088e9f0"/>
        <function-ref name="get" scoped="" ref="0x4088fad0"/>
        <function-ref name="setScale" scoped="" ref="0x4088d170"/>
        <function-ref name="getScale" scoped="" ref="0x4088d410"/>
        <function-ref name="reset" scoped="" ref="0x4088e288"/>
        <function-ref name="overflow" scoped="" ref="0x4088e010"/>
        <function-ref name="isOn" scoped="" ref="0x4088ec68"/>
        <function-ref name="set" scoped="" ref="0x4088fd48"/>
        <function-ref name="start" scoped="" ref="0x4088e500"/>
        <function-ref name="stop" scoped="" ref="0x4088e778"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x4089f360" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x4089f360"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x4089f538"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x4089f618"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x4089f6f8"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x4089f7d8"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x4089f8b8"/>
        <function-ref name="setControl" scoped="" ref="0x4089f998"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x4089d7b8" loc="43:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x4089d7b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x4089d990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x4089dc18" loc="44:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x4089dc18"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="controlBusy" scoped="" ref="0x4089ddf0"/>
        <function-ref name="compareBusy" scoped="" ref="0x4089ded0"/>
        <function-ref name="setTimer0Asynchronous" scoped="" ref="0x4089c010"/>
        <function-ref name="countBusy" scoped="" ref="0x4089c0f0"/>
        <function-ref name="getAssr" scoped="" ref="0x4089c1d0"/>
        <function-ref name="setAssr" scoped="" ref="0x4089c2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x4089fcc0" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x4089fcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x4089d288"/>
        <function-ref name="fired" scoped="" ref="0x4089e830"/>
        <function-ref name="get" scoped="" ref="0x4089e318"/>
        <function-ref name="reset" scoped="" ref="0x4089eaa8"/>
        <function-ref name="isOn" scoped="" ref="0x4089d500"/>
        <function-ref name="set" scoped="" ref="0x4089e590"/>
        <function-ref name="start" scoped="" ref="0x4089ed20"/>
        <function-ref name="stop" scoped="" ref="0x4089d010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40886010" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40886010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x40885a68"/>
        <function-ref name="test" scoped="" ref="0x40885578"/>
        <function-ref name="get" scoped="" ref="0x40886658"/>
        <function-ref name="setScale" scoped="" ref="0x40885ce0"/>
        <function-ref name="getScale" scoped="" ref="0x4089f010"/>
        <function-ref name="reset" scoped="" ref="0x40886de8"/>
        <function-ref name="overflow" scoped="" ref="0x40886b70"/>
        <function-ref name="isOn" scoped="" ref="0x408857f0"/>
        <function-ref name="set" scoped="" ref="0x408868d0"/>
        <function-ref name="start" scoped="" ref="0x40885088"/>
        <function-ref name="stop" scoped="" ref="0x40885300"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x408df818" loc="63:/opt/tinyos-2.1.0/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x408df818"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x408df9f0"/>
        <function-ref name="runTask" scoped="" ref="0x408dfad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x408e1e50" loc="38:/opt/tinyos-2.1.0/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x408e1e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x408df350"/>
        <function-ref name="fired" scoped="" ref="0x408e0af8"/>
        <function-ref name="startAt" scoped="" ref="0x408df010"/>
        <function-ref name="isRunning" scoped="" ref="0x408e0d70"/>
        <function-ref name="getAlarm" scoped="" ref="0x408df5c8"/>
        <function-ref name="start" scoped="" ref="0x408e05e0"/>
        <function-ref name="stop" scoped="" ref="0x408e0880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x4083ca88" loc="37:/opt/tinyos-2.1.0/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x4083ca88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x408e1650"/>
        <function-ref name="fired" scoped="" ref="0x408d9830"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x408e1010"/>
        <function-ref name="isOneShot" scoped="" ref="0x408d9ce0"/>
        <function-ref name="getdt" scoped="" ref="0x408e1b00"/>
        <function-ref name="gett0" scoped="" ref="0x408e18a8"/>
        <function-ref name="isRunning" scoped="" ref="0x408d9a88"/>
        <function-ref name="startPeriodic" scoped="" ref="0x408d90d8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x408e1330"/>
        <function-ref name="startOneShot" scoped="" ref="0x408d9358"/>
        <function-ref name="stop" scoped="" ref="0x408d95d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x4090dda8" loc="60:/opt/tinyos-2.1.0/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x4090dda8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4090b010"/>
        <function-ref name="runTask" scoped="" ref="0x4090b0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x4090fb78" loc="38:/opt/tinyos-2.1.0/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x4090fb78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4090d6a8"/>
        <function-ref name="fired" scoped="" ref="0x4090e938"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x4090d068"/>
        <function-ref name="isOneShot" scoped="" ref="0x4090ede8"/>
        <function-ref name="getdt" scoped="" ref="0x4090db58"/>
        <function-ref name="gett0" scoped="" ref="0x4090d900"/>
        <function-ref name="isRunning" scoped="" ref="0x4090eb90"/>
        <function-ref name="startPeriodic" scoped="" ref="0x4090e1e0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x4090d388"/>
        <function-ref name="startOneShot" scoped="" ref="0x4090e460"/>
        <function-ref name="stop" scoped="" ref="0x4090e6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x408dc808" loc="37:/opt/tinyos-2.1.0/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x408dc808"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4090f3b8"/>
        <function-ref name="fired" scoped="" ref="0x40911608"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40911d40"/>
        <function-ref name="isOneShot" scoped="" ref="0x40911ad8"/>
        <function-ref name="getdt" scoped="" ref="0x4090f888"/>
        <function-ref name="gett0" scoped="" ref="0x4090f620"/>
        <function-ref name="isRunning" scoped="" ref="0x40911870"/>
        <function-ref name="startPeriodic" scoped="" ref="0x408dce40"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x4090f088"/>
        <function-ref name="startOneShot" scoped="" ref="0x40911110"/>
        <function-ref name="stop" scoped="" ref="0x409113a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x4090a348" loc="37:/opt/tinyos-2.1.0/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x4090a348"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x4090a990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x4090ace0" loc="38:/opt/tinyos-2.1.0/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x4090ace0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40909478"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40909968"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x409096f0"/>
        <function-ref name="overflow" scoped="" ref="0x40909be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0x40919e48" loc="43:/opt/tinyos-2.1.0/tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x40919e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x4091b050"/>
        <function-ref name="changed" scoped="" ref="0x4091b130"/>
        <function-ref name="amGroup" scoped="" ref="0x4091b210"/>
        <function-ref name="setAddress" scoped="" ref="0x4091b2f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x4091e868" loc="40:/opt/tinyos-2.1.0/tos/platforms/mica/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x4091e868"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40333288"/>
            <typename><typedef-ref name="TMicro" ref="0x40333450"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x4092e010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x4093a010" loc="38:/opt/tinyos-2.1.0/tos/system/AMReceiverC.nc">
      <component-ref qname="RadioCountToLedsAppC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x4093a010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x4093a1e8"/>
        <function-ref name="payloadLength" scoped="" ref="0x4093a2c8"/>
        <function-ref name="getPayload" scoped="" ref="0x4093a3a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x4093a488"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x4093a568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x4093bcc8" loc="37:/opt/tinyos-2.1.0/tos/system/AMReceiverC.nc">
      <component-ref qname="RadioCountToLedsAppC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x4093bcc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x4093bea0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x4093a6a8" loc="39:/opt/tinyos-2.1.0/tos/system/AMReceiverC.nc">
      <component-ref qname="RadioCountToLedsAppC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x4093a6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x4093a880"/>
        <function-ref name="source" scoped="" ref="0x4093a960"/>
        <function-ref name="address" scoped="" ref="0x4093aa40"/>
        <function-ref name="destination" scoped="" ref="0x4093ab20"/>
        <function-ref name="setSource" scoped="" ref="0x4093ac00"/>
        <function-ref name="setDestination" scoped="" ref="0x4093ace0"/>
        <function-ref name="type" scoped="" ref="0x4093adc0"/>
        <function-ref name="setType" scoped="" ref="0x4093aea0"/>
        <function-ref name="isForMe" scoped="" ref="0x40937010"/>
        <function-ref name="setGroup" scoped="" ref="0x409370f0"/>
        <function-ref name="localGroup" scoped="" ref="0x409371d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40936030" loc="37:/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
      <component-ref qname="RadioCountToLedsAppC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40936030"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403349d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40334b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40954b38"/>
        <function-ref name="fired" scoped="" ref="0x40936db0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x409544f8"/>
        <function-ref name="isOneShot" scoped="" ref="0x409542a0"/>
        <function-ref name="getdt" scoped="" ref="0x40953010"/>
        <function-ref name="gett0" scoped="" ref="0x40954d90"/>
        <function-ref name="isRunning" scoped="" ref="0x40954048"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40936658"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40954818"/>
        <function-ref name="startOneShot" scoped="" ref="0x409368d8"/>
        <function-ref name="stop" scoped="" ref="0x40936b58"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="40:/opt/tinyos-2.1.0/tos/interfaces/Init.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.11 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x4037ac38" loc="51:/opt/tinyos-2.1.0/tos/interfaces/Init.nc">
        <documentation loc="42:/opt/tinyos-2.1.0/tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="39:/opt/tinyos-2.1.0/tos/interfaces/Boot.nc">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x4037a0c8" loc="49:/opt/tinyos-2.1.0/tos/interfaces/Boot.nc">
        <documentation loc="40:/opt/tinyos-2.1.0/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
      <documentation loc="11:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x40382010" loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="55:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x40383e48" loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x40385630" loc="31:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x40385c68" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x40385b10" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x40383348" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x403831f0" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x403838a0" loc="53:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="48:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="27:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x4038e5e0" loc="33:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x4038e9c8" loc="34:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x40391e28" loc="31:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x403951a8" loc="36:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x4038e210" loc="32:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x4038eda0" loc="35:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x403916e8" loc="29:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x40391a78" loc="30:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcConfig" loc="19:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcConfig.nc">
      <documentation loc="13:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <short>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.</short>
        <long>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRefVoltage" ref="0x403c3dd0" loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain reference voltage&#10; </short>
          <long>&#10; Obtain reference voltage&#10; @return The reference voltage to use. Must be one of the &#10;   ATM128_ADC_VREF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x403c38d8" loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="20:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain channel.</short>
          <long>&#10; Obtain channel.&#10; @return The A/D channel to use. Must be one of the ATM128_ADC_SNGL_xxx&#10;   or ATM128_ADC_DIFF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPrescaler" ref="0x403c82f8" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="34:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain prescaler value.</short>
          <long>&#10; Obtain prescaler value.&#10; @return The prescaler value to use. Must be one of the &#10;   ATM128_ADC_PRESCALE_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplCC1000" loc="48:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
      <documentation loc="38:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
        <short>&#10; Low-level CC1000 radio-access operations that must be provided by a&#10; platform wishing to use this CC1000 implementation.</short>
        <long>&#10; Low-level CC1000 radio-access operations that must be provided by a&#10; platform wishing to use this CC1000 implementation.&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x403c47a8" loc="52:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
        <documentation loc="49:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
          <short>&#10; Initialize CC1K pins&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplCC1000"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x403c0510" loc="66:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
        <documentation loc="61:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
          <short>&#10; Read a value from a CC1000 register.</short>
          <long>&#10; Read a value from a CC1000 register.&#10; @param addr Which CC1000 register&#10; @return Value of register&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x403c03b8" loc="66:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x403c4ef0" loc="59:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
        <documentation loc="54:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
          <short>&#10; Write a value to a CC1000 register.</short>
          <long>&#10; Write a value to a CC1000 register.&#10; @param addr Which CC1000 register&#10; @param data Value to write&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x403c4ba0" loc="59:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x403c4d90" loc="59:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLOCK" ref="0x403c0998" loc="72:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
        <documentation loc="68:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
          <short>&#10; Read the state of the CHP_OUT pin&#10; </short>
          <long>&#10; Read the state of the CHP_OUT pin&#10; @return State of CHP_OUT as a boolean (TRUE for high)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplCC1000Spi" loc="39:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
        <short>&#10; Interface to the CC1000 chip's serial bus.</short>
        <long>&#10; Interface to the CC1000 chip's serial bus. This isn't really an SPI,&#10; but the mica2 interface was done using the Atmega128 SPI hardware. Hence&#10; the name.&#10;&#10; @author Jaein Jeong&#10; @author Philip buonadonna&#10;</long>
      </documentation>
      <function command="" provided="0" name="isBufBusy" ref="0x403ddd18" loc="51:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="47:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Is write buffer busy with the last transmission?&#10; </short>
          <long>&#10; Is write buffer busy with the last transmission?&#10; @return TRUE if the buffer is busy, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="initSlave" ref="0x403d9010" loc="74:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="71:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Initialise the interface to the CC1000 bus.</short>
          <long>&#10; Initialise the interface to the CC1000 bus.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x403dab68" loc="69:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="66:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Disable CC1000 bus interrupts.</short>
          <long>&#10; Disable CC1000 bus interrupts.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="writeByte" ref="0x403dd8a0" loc="45:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="41:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Write a byte to the CC1000 bus.</short>
          <long>&#10; Write a byte to the CC1000 bus.&#10; @param data Byte to write.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x403dd748" loc="45:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x403da680" loc="64:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="59:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Enable dataReady events on every byte sent or received from the CC1000&#10; bus.</short>
          <long>&#10; Enable dataReady events on every byte sent or received from the CC1000&#10; bus. After this is called, dataReady events will be signaled every&#10; 8 CC1000 data clocks.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="txMode" ref="0x403d9430" loc="79:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="76:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Switch the interface to the CC1000 bus &#34;transmit&#34; mode.</short>
          <long>&#10; Switch the interface to the CC1000 bus &#34;transmit&#34; mode.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="readByte" ref="0x403da210" loc="57:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="53:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Get the last byte received from the CC1000 bus.</short>
          <long>&#10; Get the last byte received from the CC1000 bus.&#10; @return Last byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rxMode" ref="0x403d9870" loc="84:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="81:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Switch the interface to the CC1000 bus to &#34;receive&#34; mode.</short>
          <long>&#10; Switch the interface to the CC1000 bus to &#34;receive&#34; mode.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x403d9e50" loc="92:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="86:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; If enableIntr() is called, this event will be signaled every 8 CC1000&#10; data clocks.</short>
          <long>&#10; If enableIntr() is called, this event will be signaled every 8 CC1000&#10; data clocks. &#10; @param data In &#34;receive&#34; mode, the last value received from the CC1000 &#10;   bus.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x403d9cf8" loc="92:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="41:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x402e9898" loc="46:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
        <documentation loc="43:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x402eb1c8" loc="61:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
        <documentation loc="56:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x402e9cd8" loc="54:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
        <documentation loc="48:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="44:/opt/tinyos-2.1.0/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x402f2138" loc="56:/opt/tinyos-2.1.0/tos/interfaces/TaskBasic.nc">
        <documentation loc="46:/opt/tinyos-2.1.0/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x402f2650" loc="64:/opt/tinyos-2.1.0/tos/interfaces/TaskBasic.nc">
        <documentation loc="58:/opt/tinyos-2.1.0/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="57:/opt/tinyos-2.1.0/tos/interfaces/McuSleep.nc">
      <documentation loc="46:/opt/tinyos-2.1.0/tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x403579b8" loc="59:/opt/tinyos-2.1.0/tos/interfaces/McuSleep.nc">
        <documentation loc="58:/opt/tinyos-2.1.0/tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="42:/opt/tinyos-2.1.0/tos/interfaces/McuPowerOverride.nc">
      <documentation loc="27:/opt/tinyos-2.1.0/tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x4036bd68" loc="54:/opt/tinyos-2.1.0/tos/interfaces/McuPowerOverride.nc">
        <documentation loc="44:/opt/tinyos-2.1.0/tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x40321798"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="38:/opt/tinyos-2.1.0/tos/interfaces/McuPowerState.nc">
      <documentation loc="27:/opt/tinyos-2.1.0/tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x40366e70" loc="44:/opt/tinyos-2.1.0/tos/interfaces/McuPowerState.nc">
        <documentation loc="39:/opt/tinyos-2.1.0/tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="66:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
      <documentation loc="51:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x404fd850" loc="92:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
        <documentation loc="85:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x404fd6f8" loc="92:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x404fc730" loc="117:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
        <documentation loc="111:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x404fc5d8" loc="117:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x404fd010" loc="83:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
        <documentation loc="68:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x404fdd60" loc="109:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
        <documentation loc="94:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="47:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.11 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x404d1be0" loc="69:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
        <documentation loc="49:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x404e4330"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x404d1680" loc="69:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x404e4330"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x404d1898" loc="69:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x404d1a78" loc="69:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x404eea88" loc="124:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
        <documentation loc="115:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x404ee728" loc="124:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x404ee908" loc="124:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x404ee1c8" loc="112:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
        <documentation loc="102:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x404efb80" loc="85:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
        <documentation loc="71:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x404efa28" loc="85:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x404ed898" loc="99:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
        <documentation loc="87:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x404ed540" loc="99:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x404ed738" loc="99:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="44:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x404ff788" loc="54:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
        <documentation loc="47:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x404ff630" loc="54:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x40508188" loc="67:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
        <documentation loc="56:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40508030" loc="67:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x40505208" loc="115:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
        <documentation loc="98:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40507e88" loc="115:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40505088" loc="115:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x405078a0" loc="95:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
        <documentation loc="85:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x40508de8" loc="83:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
        <documentation loc="69:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40508aa8" loc="83:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40508c88" loc="83:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="45:/opt/tinyos-2.1.0/tos/interfaces/Receive.nc">
      <function event="" provided="0" name="receive" ref="0x404f3db8" loc="67:/opt/tinyos-2.1.0/tos/interfaces/Receive.nc">
        <documentation loc="47:/opt/tinyos-2.1.0/tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
              <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x404f3870" loc="67:/opt/tinyos-2.1.0/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x404f3a50" loc="67:/opt/tinyos-2.1.0/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x404f3c30" loc="67:/opt/tinyos-2.1.0/tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="42:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x404f9010" loc="42:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x404f9010"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x404f4790" loc="125:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <documentation loc="121:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x404f75b8" loc="72:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <documentation loc="69:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x404f5720" loc="103:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <documentation loc="89:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x404f53d8" loc="103:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x404f55c0" loc="103:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x404f7f08" loc="87:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <documentation loc="83:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x40501138" loc="140:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <documentation loc="135:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x404f4bd8" loc="133:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <documentation loc="127:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x404f7a48" loc="81:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <documentation loc="75:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x404f9668" loc="53:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <documentation loc="45:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x404f9510" loc="53:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x404f4170" loc="118:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <documentation loc="105:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x404f5dc0" loc="118:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x404f4010" loc="118:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x404f9d00" loc="62:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <documentation loc="55:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x404f9ba8" loc="62:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x404f71f0" loc="67:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <documentation loc="64:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="40:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
      <documentation loc="22:/opt/tinyos-2.1.0/tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x404dc460" loc="50:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
        <documentation loc="47:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x404dc8a8" loc="56:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
        <documentation loc="52:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x404dcd28" loc="61:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
        <documentation loc="58:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x404db5b0" loc="72:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
        <documentation loc="68:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x404da2b8" loc="89:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
        <documentation loc="85:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x404da760" loc="106:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
        <documentation loc="92:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x404db168" loc="66:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
        <documentation loc="63:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x404daea0" loc="123:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
        <documentation loc="109:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x404dad48" loc="123:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x404dc038" loc="45:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
        <documentation loc="42:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x404dba30" loc="78:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
        <documentation loc="75:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x404dbe58" loc="83:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
        <documentation loc="80:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="50:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x4053a168" loc="166:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <documentation loc="153:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x404e40d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x4053a010" loc="166:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x40530a10" loc="77:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <documentation loc="69:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x404e4330"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x405308b8" loc="77:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x40534930" loc="57:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <documentation loc="52:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x404e4330"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x40530010" loc="67:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <documentation loc="59:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x404e4330"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x40534e70" loc="67:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x4052e378" loc="110:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <documentation loc="94:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x404e4330"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x4052e010" loc="110:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x4052e218" loc="110:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x404e4330"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x4052f668" loc="92:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <documentation loc="79:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x404e4330"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x4052f300" loc="92:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x4052f508" loc="92:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x404e4330"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x4053ca68" loc="136:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <documentation loc="127:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x404d2e58"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x4053c910" loc="136:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x4053b5e8" loc="151:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <documentation loc="138:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x404d2e58"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x4053b2b8" loc="151:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x4053b488" loc="151:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x404d2e58"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x4052ef18" loc="125:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <documentation loc="112:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x4052edc0" loc="125:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x4053ade8" loc="176:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <documentation loc="168:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x404e40d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x4053aa88" loc="176:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x4053ac88" loc="176:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x404e40d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x40537670" loc="184:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <documentation loc="178:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x404e40d0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="33:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x40533e48" loc="48:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="35:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40533cf0" loc="48:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x405369c8" loc="60:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="50:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40536870" loc="60:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x40535460" loc="74:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="62:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40535308" loc="74:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="44:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.11 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x40542c78" loc="64:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
        <documentation loc="46:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40542938" loc="64:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40542b18" loc="64:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x4053da18" loc="114:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
        <documentation loc="104:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4053d6b8" loc="114:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x4053d898" loc="114:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x4053d158" loc="101:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
        <documentation loc="91:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x4053eb38" loc="78:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
        <documentation loc="66:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4053e9e0" loc="78:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x4054c820" loc="89:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
        <documentation loc="80:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4054c4c8" loc="89:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x4054c6c0" loc="89:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkPacketMetadata" loc="37:/opt/tinyos-2.1.0/tos/interfaces/LinkPacketMetadata.nc">
      <documentation loc="32:/opt/tinyos-2.1.0/tos/interfaces/LinkPacketMetadata.nc">
        <short>&#10; This interface provides metadata associated with a link layer packet.</short>
        <long>&#10; This interface provides metadata associated with a link layer packet.&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="highChannelQuality" ref="0x405941c0" loc="47:/opt/tinyos-2.1.0/tos/interfaces/LinkPacketMetadata.nc">
        <documentation loc="39:/opt/tinyos-2.1.0/tos/interfaces/LinkPacketMetadata.nc">
          <short>&#10; Return true if the channel during this packet had high quality (few bit errors).</short>
          <long>&#10; Return true if the channel during this packet had high quality (few bit errors).&#10; A good rule of thumb for &#34;high quality&#34; is that the channel quality&#10; would enable MTU packets to have a reception rate of 90% or greater.&#10;&#10; @param 'message_t* ONE msg' A received packet during which the channel was measured.&#10; @return Whether the channel had high quality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LinkPacketMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40594068" loc="47:/opt/tinyos-2.1.0/tos/interfaces/LinkPacketMetadata.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
      <documentation loc="32:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author David Moss&#10; @author Jonathan Hui&#10;</long>
      </documentation>
      <function command="" provided="0" name="getLocalSleepInterval" ref="0x405c52e8" loc="58:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="55:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's sleep interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRxDutyCycle" ref="0x405c1350" loc="113:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="109:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the destination node's duty cycle configured in this message&#10;     in units of [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x405c11f8" loc="113:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sleepIntervalToDutyCycle" ref="0x405c0268" loc="129:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="123:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Convert a sleep interval, in units of [ms], to a duty cycle&#10; in units of [percentage*100]&#10; </short>
          <long>&#10; Convert a sleep interval, in units of [ms], to a duty cycle&#10; in units of [percentage*100]&#10; @param sleepInterval The sleep interval in units of [ms]&#10; @return The duty cycle in units of [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sleepInterval" ref="0x405c0110" loc="129:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalDutyCycle" ref="0x405c4010" loc="82:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="79:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return this node's radio duty cycle rate, in units of [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRxSleepInterval" ref="0x405c4898" loc="91:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="85:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified Rx sleep interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified Rx sleep interval.&#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param sleepInterval The receiving node's sleep interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x405c44d0" loc="91:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="sleepIntervalMs" ref="0x405c4738" loc="91:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalDutyCycle" ref="0x405c58f8" loc="77:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="60:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Set this node's radio duty cycle rate, in units of [percentage*100].</short>
          <long>&#10; Set this node's radio duty cycle rate, in units of [percentage*100].&#10; For example, to get a 0.05% duty cycle,&#10; &#60;code>&#10;   call LowPowerListening.setDutyCycle(5);  // or equivalently...&#10;   call LowPowerListening.setDutyCycle(00005);  // for better readability?&#10; &#60;/code>&#10;&#10; For a 100% duty cycle (always on),&#10; &#60;code>&#10;   call LowPowerListening.setDutyCycle(10000);&#10; &#60;/code>&#10;&#10; This is the equivalent of setting the local sleep interval explicitly.&#10; &#10; @param dutyCycle The duty cycle percentage, in units of [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dutyCycle" ref="0x405c57a0" loc="77:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRxDutyCycle" ref="0x405c3b78" loc="107:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="98:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified Rx duty cycle rate.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified Rx duty cycle rate.&#10; Duty cycle is in units of [percentage*100], i.e. 0.25% duty cycle = 25.&#10; &#10; @param msg Pointer to the message that will be sent&#10; @param dutyCycle The duty cycle of the receiving mote, in units of &#10;     [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x405c37e8" loc="107:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dutyCycle" ref="0x405c3a18" loc="107:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dutyCycleToSleepInterval" ref="0x405c1a38" loc="121:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="115:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Convert a duty cycle, in units of [percentage*100], to&#10; the sleep interval of the mote in milliseconds&#10; </short>
          <long>&#10; Convert a duty cycle, in units of [percentage*100], to&#10; the sleep interval of the mote in milliseconds&#10; @param dutyCycle The duty cycle in units of [percentage*100]&#10; @return The equivalent sleep interval, in units of [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dutyCycle" ref="0x405c18e0" loc="121:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRxSleepInterval" ref="0x405c3350" loc="96:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="93:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the destination node's sleep interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x405c31f8" loc="96:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalSleepInterval" ref="0x405babe0" loc="53:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="43:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Set this this node's radio sleep interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio sleep interval, in milliseconds.&#10; Once every interval, the node will sleep and perform an Rx check &#10; on the radio.  Setting the sleep interval to 0 will keep the radio&#10; always on.&#10;&#10; This is the equivalent of setting the local duty cycle rate.&#10;&#10; @param sleepIntervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sleepIntervalMs" ref="0x405baa88" loc="53:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CsmaControl" loc="29:/opt/tinyos-2.1.0/tos/chips/cc1000/CsmaControl.nc">
      <documentation loc="22:/opt/tinyos-2.1.0/tos/chips/cc1000/CsmaControl.nc">
        <short>&#10; Interface for activating/deactivating congestion control.</short>
        <long>&#10; Interface for activating/deactivating congestion control.&#10;&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   August 31 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="disableCca" ref="0x405bca60" loc="40:/opt/tinyos-2.1.0/tos/chips/cc1000/CsmaControl.nc">
        <documentation loc="36:/opt/tinyos-2.1.0/tos/chips/cc1000/CsmaControl.nc">
          <short>&#10; Disable congestion control.</short>
          <long>&#10; Disable congestion control.&#10; @return SUCCESS if congestion control disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableCca" ref="0x405bc5b0" loc="34:/opt/tinyos-2.1.0/tos/chips/cc1000/CsmaControl.nc">
        <documentation loc="30:/opt/tinyos-2.1.0/tos/chips/cc1000/CsmaControl.nc">
          <short>&#10; Enable congestion control.</short>
          <long>&#10; Enable congestion control.&#10; @return SUCCESS if congestion control enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CsmaBackoff" loc="29:/opt/tinyos-2.1.0/tos/interfaces/CsmaBackoff.nc">
      <documentation loc="22:/opt/tinyos-2.1.0/tos/interfaces/CsmaBackoff.nc">
        <short>&#10; Interface for MAC Backoff values from the radio stack.</short>
        <long>&#10; Interface for MAC Backoff values from the radio stack.&#10; Allows application to change the backoff on a per packet basis.&#10; Only used if congestion control is enabled.&#10;&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function event="" provided="0" name="congestion" ref="0x405b8290" loc="45:/opt/tinyos-2.1.0/tos/interfaces/CsmaBackoff.nc">
        <documentation loc="39:/opt/tinyos-2.1.0/tos/interfaces/CsmaBackoff.nc">
          <short>&#10; Return backoff time after message m could not be send due to congestion.</short>
          <long>&#10; Return backoff time after message m could not be send due to congestion.&#10; The units are raio dependent.&#10; @param 'message_t* ONE m'&#10; @return Backoff time after congestion&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x405b8138" loc="45:/opt/tinyos-2.1.0/tos/interfaces/CsmaBackoff.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="initial" ref="0x405bb8b0" loc="37:/opt/tinyos-2.1.0/tos/interfaces/CsmaBackoff.nc">
        <documentation loc="31:/opt/tinyos-2.1.0/tos/interfaces/CsmaBackoff.nc">
          <short>&#10; Return initial backoff time before attempting to send message m.</short>
          <long>&#10; Return initial backoff time before attempting to send message m. The&#10; units are radio dependent.&#10; @param 'message_t* ONE m'&#10; @return Initial backoff time&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x405bb758" loc="37:/opt/tinyos-2.1.0/tos/interfaces/CsmaBackoff.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioTimeStamping" loc="33:/opt/tinyos-2.1.0/tos/interfaces/RadioTimeStamping.nc">
      <documentation loc="22:/opt/tinyos-2.1.0/tos/interfaces/RadioTimeStamping.nc">
        <short>&#10; Interface for receiving time stamp information from the radio.</short>
        <long>&#10; Interface for receiving time stamp information from the radio.&#10; This information is also embedded in packet metadata.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   October 10 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="transmittedSFD" ref="0x405b77d0" loc="40:/opt/tinyos-2.1.0/tos/interfaces/RadioTimeStamping.nc">
        <documentation loc="35:/opt/tinyos-2.1.0/tos/interfaces/RadioTimeStamping.nc">
          <short> &#10; Provides the time at which start of frame delimiter has been&#10; transmitted: units are in terms of a 32kHz clock.</short>
          <long> &#10; Provides the time at which start of frame delimiter has been&#10; transmitted: units are in terms of a 32kHz clock.&#10; @param 'message_t* ONE p_msg'&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioTimeStamping"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x405b7440" loc="40:/opt/tinyos-2.1.0/tos/interfaces/RadioTimeStamping.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </variable>
          <variable name="p_msg" ref="0x405b7670" loc="40:/opt/tinyos-2.1.0/tos/interfaces/RadioTimeStamping.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedSFD" ref="0x405c7188" loc="51:/opt/tinyos-2.1.0/tos/interfaces/RadioTimeStamping.nc">
        <documentation loc="42:/opt/tinyos-2.1.0/tos/interfaces/RadioTimeStamping.nc">
          <short> &#10; Provides the time at which start of frame delimiter was received:&#10; units are in terms of a 32kHz clock.</short>
          <long> &#10; Provides the time at which start of frame delimiter was received:&#10; units are in terms of a 32kHz clock.  &#60;b>NOTE&#60;/b> that receiving&#10; a receivedSFD() event does NOT mean that a packet will be&#10; received; the transmission may stop, become corrupted, or be&#10; filtered by the physical or link layers.  The number of rxSFD&#10; events will always be great than or equal to the number of&#10; Receive message events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioTimeStamping"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x405c7030" loc="51:/opt/tinyos-2.1.0/tos/interfaces/RadioTimeStamping.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="48:/opt/tinyos-2.1.0/tos/lib/timer/BusyWait.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x405f3e38" loc="48:/opt/tinyos-2.1.0/tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x405f3e38"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x405ef010" loc="48:/opt/tinyos-2.1.0/tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x405ef010"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x405ef628" loc="55:/opt/tinyos-2.1.0/tos/lib/timer/BusyWait.nc">
        <documentation loc="50:/opt/tinyos-2.1.0/tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x405ef010"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x405ef4d0" loc="55:/opt/tinyos-2.1.0/tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x405ef010"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadNow" loc="52:/opt/tinyos-2.1.0/tos/interfaces/ReadNow.nc">
      <documentation loc="33:/opt/tinyos-2.1.0/tos/interfaces/ReadNow.nc">
        <short>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values.</short>
        <long>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values. The type of the value is given as a&#10; template argument. Because this interface is split-phase, these&#10; values may be backed by hardware. Providers of this interface&#10; should also provide a Resource interface, and this interface should&#10; only be used after the resource has been acquired. Otherwise, the&#10; low-latency requirement may be impossible to meet.&#10;&#10; &#60;p>&#10; This interface has the same calling semantics as the Read interface&#10; described in TEP 114, except that it is async.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008/06/16 18:58:51 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x405f2a30" loc="52:/opt/tinyos-2.1.0/tos/interfaces/ReadNow.nc">
          <interfacedef-ref qname="ReadNow"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x405f2a30"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x405f2f00" loc="58:/opt/tinyos-2.1.0/tos/interfaces/ReadNow.nc">
        <documentation loc="53:/opt/tinyos-2.1.0/tos/interfaces/ReadNow.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x405ed700" loc="66:/opt/tinyos-2.1.0/tos/interfaces/ReadNow.nc">
        <documentation loc="60:/opt/tinyos-2.1.0/tos/interfaces/ReadNow.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x405f2a30"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x405ed3d0" loc="66:/opt/tinyos-2.1.0/tos/interfaces/ReadNow.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x405ed5a0" loc="66:/opt/tinyos-2.1.0/tos/interfaces/ReadNow.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x405f2a30"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="29:/opt/tinyos-2.1.0/tos/interfaces/Random.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x405ebdb8" loc="41:/opt/tinyos-2.1.0/tos/interfaces/Random.nc">
        <documentation loc="37:/opt/tinyos-2.1.0/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x405eb910" loc="35:/opt/tinyos-2.1.0/tos/interfaces/Random.nc">
        <documentation loc="31:/opt/tinyos-2.1.0/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC1000Squelch" loc="34:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Squelch.nc">
      <documentation loc="30:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Squelch.nc">
        <short>&#10; CC1000 internal noise floor (aka squelch value) interface&#10; </short>
        <long>&#10; CC1000 internal noise floor (aka squelch value) interface&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="get" ref="0x405e46b8" loc="46:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Squelch.nc">
        <documentation loc="42:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Squelch.nc">
          <short>&#10; Return current estimated noise floor&#10; </short>
          <long>&#10; Return current estimated noise floor&#10; @return Noise floor value&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Squelch"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="settled" ref="0x405e4b08" loc="53:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Squelch.nc">
        <documentation loc="48:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Squelch.nc">
          <short>&#10; Check if noise floor estimate is considered stable (typically after&#10; some number of measurements)&#10; </short>
          <long>&#10; Check if noise floor estimate is considered stable (typically after&#10; some number of measurements)&#10; @return TRUE if noise floor estimate considered stable, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Squelch"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="adjust" ref="0x405e4230" loc="40:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Squelch.nc">
        <documentation loc="36:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Squelch.nc">
          <short>&#10; Adjust noise floor based on new noise measurement&#10; </short>
          <long>&#10; Adjust noise floor based on new noise measurement&#10; @param data noise measurement&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Squelch"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x405e40d8" loc="40:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Squelch.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC1000Control" loc="34:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
      <documentation loc="29:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <short>&#10; CC1000 internal radio control interface.</short>
        <long>&#10; CC1000 internal radio control interface.&#10; @author Philip Buonadonna&#10; @aythor Jaein Jeong&#10;</long>
      </documentation>
      <function command="" provided="0" name="tunePreset" ref="0x405e1dd8" loc="49:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="41:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Tune the radio to one of the frequencies available in the CC1K_Params&#10; table.</short>
          <long>&#10; Tune the radio to one of the frequencies available in the CC1K_Params&#10; table.  Calling Tune will allso reset the rfpower and LockVal&#10; selections to the table values.&#10; &#10; @param freq The index into the CC1K_Params table that holds the&#10; desired preset frequency parameters.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="freq" ref="0x405e1c80" loc="49:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="biasOn" ref="0x405e8d18" loc="93:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="87:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Turn the bias power on.</short>
          <long>&#10; Turn the bias power on. This function must be followed by a call to&#10; either rxMode() or txMode() to place the radio in a recieve/transmit&#10; state respectively. There is approximately a 200us delay when&#10; restoring bias power.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRFPower" ref="0x405e78e0" loc="110:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="105:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Get the present RF power index.</short>
          <long>&#10; Get the present RF power index.&#10;&#10; @return The power index value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="tuneManual" ref="0x405ea638" loc="63:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="51:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Tune the radio to a given frequency.</short>
          <long>&#10; Tune the radio to a given frequency. Since the CC1000 uses a digital&#10; frequency synthesizer, it cannot tune to just an arbitrary frequency.&#10; This routine will determine the closest achievable channel, compute&#10; the necessary parameters and tune the radio.&#10; &#10; @param The desired channel frequency, in Hz.&#10; &#10; @return The actual computed channel frequency, in Hz.  A return value&#10; of '0' indicates that no frequency was computed and the radio was not&#10; tuned.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="DesiredFreq" ref="0x405ea4e0" loc="63:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="selectLock" ref="0x405e7eb0" loc="118:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="112:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short> &#10; Select the signal to monitor at the CHP_OUT pin of the CC1000.</short>
          <long> &#10; Select the signal to monitor at the CHP_OUT pin of the CC1000.  See&#10; the CC1000 data sheet for the available signals.&#10; &#10; @param LockVal The index of the signal to monitor at the CHP_OUT pin&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="LockVal" ref="0x405e7d58" loc="118:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="init" ref="0x405e1830" loc="39:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="36:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Initialise the radio to its default state.</short>
          <long>&#10; Initialise the radio to its default state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getLock" ref="0x405e63e8" loc="126:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="120:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Get the binary value from the CHP_OUT pin.</short>
          <long>&#10; Get the binary value from the CHP_OUT pin.  Analog signals cannot be&#10; read using function.&#10;&#10; @return 1 - Pin is high or 0 - Pin is low&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="coreOn" ref="0x405e8850" loc="85:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="80:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Turn off the bias power on the CC1000 radio, but leave the core and&#10; crystal oscillator powered.</short>
          <long>&#10; Turn off the bias power on the CC1000 radio, but leave the core and&#10; crystal oscillator powered.  This will result in approximately a 750&#10; uA power savings.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="txMode" ref="0x405e8010" loc="73:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="70:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Shift the CC1000 Radio into transmit mode.</short>
          <long>&#10; Shift the CC1000 Radio into transmit mode.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getLOStatus" ref="0x405e68a8" loc="136:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="128:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Returns whether the present frequency set is using high-side LO&#10; injection or not.</short>
          <long>&#10; Returns whether the present frequency set is using high-side LO&#10; injection or not.  This information is used to determine if the data&#10; from the CC1000 needs to be inverted or not.&#10;&#10; @return TRUE if high-side LO injection is being used (i.e. data does NOT need to be inverted&#10; at the receiver.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rxMode" ref="0x405e8430" loc="78:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="75:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Shift the CC1000 Radio in receive mode.</short>
          <long>&#10; Shift the CC1000 Radio in receive mode.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="off" ref="0x405eabd0" loc="68:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="65:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Turn the CC1000 off&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRFPower" ref="0x405e7398" loc="103:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="95:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Set the transmit RF power value.</short>
          <long>&#10; Set the transmit RF power value.  The input value is simply an&#10; arbitrary index that is programmed into the CC1000 registers.  Consult&#10; the CC1000 datasheet for the resulting power output/current&#10; consumption values.&#10;&#10; @param power A power index between 1 and 255.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="power" ref="0x405e7240" loc="103:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="65:/opt/tinyos-2.1.0/tos/interfaces/StdControl.nc">
      <documentation loc="51:/opt/tinyos-2.1.0/tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x405e05a0" loc="74:/opt/tinyos-2.1.0/tos/interfaces/StdControl.nc">
        <documentation loc="67:/opt/tinyos-2.1.0/tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x405e0a68" loc="84:/opt/tinyos-2.1.0/tos/interfaces/StdControl.nc">
        <documentation loc="76:/opt/tinyos-2.1.0/tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ByteRadio" loc="19:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
      <documentation loc="10:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <short>&#10; Radio logic is split between Csma (media-access control, low-power&#10; listening and general control) and SendReceive (packet reception and&#10; transmission).</short>
        <long>&#10; Radio logic is split between Csma (media-access control, low-power&#10; listening and general control) and SendReceive (packet reception and&#10; transmission). This interface specifies the interaction between these&#10; two components.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function event="" provided="0" name="rts" ref="0x405e2c60" loc="25:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="21:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; SendReceive wants to send a packet.</short>
          <long>&#10; SendReceive wants to send a packet.&#10; @param msg Message to be sent.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x405e2b08" loc="25:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
                <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="listen" ref="0x405dca80" loc="61:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="58:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Enable listening for incoming packets.</short>
          <long>&#10; Enable listening for incoming packets.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="syncing" ref="0x405db9c0" loc="85:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="76:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Detect if SendReceive is attempting to sync with an incoming packet.</short>
          <long>&#10; Detect if SendReceive is attempting to sync with an incoming packet.&#10; During sync, idleByte events are not signaled. If sync is successful,&#10; an rx() event will be signaled, if it fails, idleByte events will&#10; resume. If syncing() returns TRUE, the last idleByte() event must&#10; have had preamble = TRUE.&#10;&#10; @return TRUE if a sync attempt is in progress, FALSE if not.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rxDone" ref="0x405ec310" loc="95:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="92:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Message reception is complete.</short>
          <long>&#10; Message reception is complete.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPreambleLength" ref="0x405dc658" loc="56:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="52:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Get message preamble length.</short>
          <long>&#10; Get message preamble length.&#10; @return Preamble length in bytes&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="idleByte" ref="0x405db468" loc="74:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="68:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; SendReceive signals this event for every radio-byte-time while&#10; listening is enabled and a message isn't being received or&#10; transmitted.</short>
          <long>&#10; SendReceive signals this event for every radio-byte-time while&#10; listening is enabled and a message isn't being received or&#10; transmitted.&#10; @param preamble TRUE if a message preamble byte has been received&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="preamble" ref="0x405db310" loc="74:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cts" ref="0x405de090" loc="32:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="27:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Access to the media granted.</short>
          <long>&#10; Access to the media granted. Start sending. SendReceive must signal&#10; sendDone when transmission is complete. Note: the media-access-contro&#10; layer must have enabled listening before calling cts().&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPreambleLength" ref="0x405dc168" loc="50:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="46:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Set message preamble length.</short>
          <long>&#10; Set message preamble length.&#10; @param bytes Preamble length in bytes&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="bytes" ref="0x405dc010" loc="50:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x405deab8" loc="44:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="41:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Transmission complete.</short>
          <long>&#10; Transmission complete.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="off" ref="0x405dce80" loc="66:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="63:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Disable listening for incoming packets.</short>
          <long>&#10; Disable listening for incoming packets.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTxMessage" ref="0x405de5f8" loc="39:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="34:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Between the rts() and sendDone() events, this must return the&#10; message under transmission.</short>
          <long>&#10; Between the rts() and sendDone() events, this must return the&#10; message under transmission.&#10; @return Message being transmitted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x404e65c0"/>
              <typename><typedef-ref name="message_t" ref="0x404f33a0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rx" ref="0x405dbf10" loc="90:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="87:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; A message is being received&#10;</short>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="67:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
      <documentation loc="53:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2007/04/15 20:05:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x406cca18" loc="110:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
        <documentation loc="94:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x406cc0f8" loc="87:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
        <documentation loc="80:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x406cfad8" loc="78:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
        <documentation loc="68:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x406cc5a8" loc="92:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
        <documentation loc="89:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x406cb138" loc="118:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
        <documentation loc="112:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="44:/opt/tinyos-2.1.0/tos/interfaces/ResourceConfigure.nc">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x40733b60" loc="55:/opt/tinyos-2.1.0/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="51:/opt/tinyos-2.1.0/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x407336a0" loc="49:/opt/tinyos-2.1.0/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="45:/opt/tinyos-2.1.0/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:/opt/tinyos-2.1.0/tos/interfaces/Read.nc">
      <documentation loc="33:/opt/tinyos-2.1.0/tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006/12/12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x4071ec18" loc="49:/opt/tinyos-2.1.0/tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x4071ec18"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x4072e0f8" loc="55:/opt/tinyos-2.1.0/tos/interfaces/Read.nc">
        <documentation loc="50:/opt/tinyos-2.1.0/tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x4072e8a8" loc="63:/opt/tinyos-2.1.0/tos/interfaces/Read.nc">
        <documentation loc="57:/opt/tinyos-2.1.0/tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x4071ec18"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x4072e578" loc="63:/opt/tinyos-2.1.0/tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x4072e748" loc="63:/opt/tinyos-2.1.0/tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x4071ec18"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcMultiple" loc="68:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
      <documentation loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.&#10; &#60;p>&#10; Because of the possibility that samples may be imprecise after &#10; switching channels and/or reference voltages, and because there&#10; is a one sample delay on swithcing channels and reference voltages,&#10; Atm128ADCMultiple is complex. Two straightforward uses are:&#10; &#60;ol type=&#34;A&#34;>&#10; &#60;li>Acquire N samples from channel C:&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C at the desired rate&#10;       (note that the choice of prescalers is very limited, so you&#10;       don't have many choices for sampling rate)&#10;    &#60;li>ignore the first dataReady event&#10;    &#60;li>use the results of the next N dataReady() events, return FALSE&#10;       on the last one&#10;    &#60;/ol>&#10; &#60;li>Acquire one sample each from channels C1, ..., Cn (this pseudocode&#10;    assumes that none of these channels are differential)&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C1&#10;    &#60;li>on the ith dataReady event switch to channel Ci+1 by changing&#10;       *newChannel&#10;    &#60;li>the data passed to the ith dataReady event is for channel Ci-1&#10;       (the data from the first dataReady event is ignored)&#10;    &#60;/ol>&#10; &#60;/ol>&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x4073a070" loc="91:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="70:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.</short>
          <long>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.&#10;&#10; @param channel Initial A/D conversion channel. The channel can &#10;   be changed in the dataReady event, though these changes happen&#10;   with a one-sample delay (this is a hardware restriction).&#10; @param refVoltage Initial A/D reference voltage. See the&#10;   ATM128_ADC_VREF_xxx constants in Atm128ADC.h. Like the channel,&#10;   the reference voltage can be changed in the dataReady event with&#10;   a one-sample delay.&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in reference voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x4073b860" loc="91:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x4073ba88" loc="91:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x4073bcb0" loc="92:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x4073bed0" loc="92:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x407383f0" loc="110:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="94:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Returns the next sample in a free-running conversion.</short>
          <long>&#10; Returns the next sample in a free-running conversion. Allow the user&#10; to switch channels and/or reference voltages with a one sample delay.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if this conversion was precise, FALSE if it wasn't &#10;   (we assume that the second conversion after a change of reference&#10;   voltage or after switching to a differential channel is precise)&#10; @param channel Channel this sample was from.&#10; @param newChannel Change this parameter to switch to a new channel&#10;   for the second next sample.&#10; @param newRefVoltage Change this parameter to change the reference &#10;   voltage for the second next sample.&#10;&#10; @return TRUE to continue sampling, FALSE to stop.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x4073a990" loc="110:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x4073ab80" loc="110:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
            </type-int>
          </variable>
          <variable name="channel" ref="0x4073ad88" loc="110:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
          <variable name="newChannel" ref="0x40738010" loc="111:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="newRefVoltage" ref="0x40738278" loc="111:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcSingle" loc="43:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
      <documentation loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x4073ec40" loc="61:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Initiates an ADC conversion on a given channel.</short>
          <long>&#10; Initiates an ADC conversion on a given channel.&#10;&#10; @param channel A/D conversion channel.&#10; @param refVoltage Select reference voltage for A/D conversion. See&#10;   the ATM128_ADC_VREF_xxx constants in Atm128ADC.h&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in refernce voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x4073e460" loc="61:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x4073e688" loc="61:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x4073e8b0" loc="62:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x4073ead0" loc="62:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x4073c010" loc="82:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="74:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Cancel an outstanding getData operation.</short>
          <long>&#10; Cancel an outstanding getData operation. Use with care, to&#10; avoid problems with races between the dataReady event and cancel.&#10; @return TRUE if a conversion was in-progress or an interrupt&#10;   was pending. dataReady will not be signaled. FALSE if the&#10;   conversion was already complete. dataReady will be (or has&#10;   already been) signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x4073d9a8" loc="72:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="64:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.</short>
          <long>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if the conversion precise, FALSE if it wasn't. This&#10;   values matches the result from the &#60;code>getData&#60;/code> call.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x4073d658" loc="72:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x4073d848" loc="72:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Adc" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
      <documentation loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <short>&#10; HPL interface to the Atmega128 A/D conversion subsystem.</short>
        <long>&#10; HPL interface to the Atmega128 A/D conversion subsystem. Please see the&#10; Atmega128 manual for full details on the functioning of this subsystem.&#10; &#60;p>&#10; A word of warning: the Atmega128 SLEEP instruction initiates an A/D&#10; conversion when the ADC and ADC interrupt are enabled.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="setSingle" ref="0x40745158" loc="105:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="102:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdmux" ref="0x40735878" loc="44:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Read the ADMUX (ADC selection) register&#10; @return Current ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x4032fb08"/>
            <typename><typedef-ref name="Atm128Admux_t" ref="0x4032fd90"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPrescaler" ref="0x407446b8" loc="131:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="126:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set ADC prescaler selection bits&#10; </short>
          <long>&#10; Set ADC prescaler selection bits&#10; @param scale New ADC prescaler. Must be one of the ATM128_ADC_PRESCALE_xxx&#10;   values from Atm128Adc.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x40744560" loc="131:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnabled" ref="0x40745618" loc="113:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="109:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is ADC enabled?&#10; </short>
          <long>&#10; Is ADC enabled?&#10; @return TRUE if the ADC is enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAdc" ref="0x40748300" loc="73:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="70:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdmux" ref="0x40735e90" loc="49:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Set the ADMUX (ADC selection) register&#10; @param admux New ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x4032fb08"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x4032fd90"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="admux" ref="0x40735d38" loc="49:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x4032fb08"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x4032fd90"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterruption" ref="0x40748b50" loc="82:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="79:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isComplete" ref="0x40744010" loc="124:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="119:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.</short>
          <long>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.&#10; @return TRUE if the A/D conversion is complete, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x40744b60" loc="141:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="133:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Cancel A/D conversion and any pending A/D interrupt.</short>
          <long>&#10; Cancel A/D conversion and any pending A/D interrupt. Also disables the&#10; ADC interruption (otherwise a sample might start at the next sleep&#10; instruction). This command can assume that the A/D converter is enabled. &#10; @return TRUE if an A/D conversion was in progress or an A/D interrupt&#10;   was pending, FALSE otherwise. In single conversion mode, a return&#10;   of TRUE implies that the dataReady event will not be signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAdc" ref="0x40748700" loc="77:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="74:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetInterrupt" ref="0x40746440" loc="90:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="87:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Clear the ADC interrupt flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableInterruption" ref="0x40746010" loc="86:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="83:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x40746878" loc="97:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="92:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Start ADC conversion.</short>
          <long>&#10; Start ADC conversion. If ADC interrupts are enabled, the dataReady event&#10; will be signaled once (in non-continuous mode) or repeatedly (in&#10; continuous mode).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isStarted" ref="0x40745a88" loc="118:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="114:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion in progress?&#10; </short>
          <long>&#10; Is A/D conversion in progress?&#10; @return TRUE if the A/D conversion is in progress, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdcsra" ref="0x407499d0" loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="56:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Set the ADCSRA (ADC control) register&#10; @param adcsra New ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40335df0"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x403341e8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="adcsra" ref="0x40749878" loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40335df0"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x403341e8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setContinuous" ref="0x40746d40" loc="101:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="98:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdcsra" ref="0x407493a0" loc="55:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="51:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Read the ADCSRA (ADC control) register&#10; @return Current ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40335df0"/>
            <typename><typedef-ref name="Atm128Adcsra_t" ref="0x403341e8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x40749e80" loc="66:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="62:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the latest A/D conversion result&#10; </short>
          <long>&#10; Read the latest A/D conversion result&#10; @return A/D value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x407422c8" loc="147:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="143:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; A/D interrupt occured&#10; </short>
          <long>&#10; A/D interrupt occured&#10; @param data Latest A/D conversion result&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40742170" loc="147:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401b6d68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="65:/opt/tinyos-2.1.0/tos/interfaces/AsyncStdControl.nc">
      <documentation loc="51:/opt/tinyos-2.1.0/tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x407368f8" loc="74:/opt/tinyos-2.1.0/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="67:/opt/tinyos-2.1.0/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40736de0" loc="84:/opt/tinyos-2.1.0/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="76:/opt/tinyos-2.1.0/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="36:/opt/tinyos-2.1.0/tos/interfaces/ResourceRequested.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.4 $&#10; @date $Date: 2006/12/12 18:23:15 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x4078e458" loc="43:/opt/tinyos-2.1.0/tos/interfaces/ResourceRequested.nc">
        <documentation loc="37:/opt/tinyos-2.1.0/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x4078ea30" loc="51:/opt/tinyos-2.1.0/tos/interfaces/ResourceRequested.nc">
        <documentation loc="45:/opt/tinyos-2.1.0/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007/02/04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x4078b1a8" loc="56:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x4078bb90" loc="73:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x40790c48" loc="46:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x4078b6b8" loc="65:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x4078a1a8" loc="81:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="72:/opt/tinyos-2.1.0/tos/interfaces/ArbiterInfo.nc">
      <documentation loc="59:/opt/tinyos-2.1.0/tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x407894e8" loc="80:/opt/tinyos-2.1.0/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="73:/opt/tinyos-2.1.0/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x407899e8" loc="88:/opt/tinyos-2.1.0/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="82:/opt/tinyos-2.1.0/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="35:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2006/12/12 18:23:15 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x4079a8c0" loc="69:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
        <documentation loc="62:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a cleint id&#10;&#10; </short>
          <long>&#10; Enqueue a cleint id&#10;&#10; @param cleintId - the cleint id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x4079f200"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x4079a768" loc="69:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x4079f200"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x4079c550" loc="43:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
        <documentation loc="37:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x4079cc10" loc="52:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
        <documentation loc="45:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given cleint id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given cleint id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x4079f200"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x4079cab8" loc="52:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x4079f200"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x4079a1d8" loc="60:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
        <documentation loc="54:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the cleint id of the next resource in the queue.</short>
          <long>&#10; Retreive the cleint id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The cleint id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x4079f200"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="45:/opt/tinyos-2.1.0/tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x407dfdc8" loc="52:/opt/tinyos-2.1.0/tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="46:/opt/tinyos-2.1.0/tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="42:/opt/tinyos-2.1.0/tos/interfaces/ParameterInit.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.11 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x406e19c0" loc="42:/opt/tinyos-2.1.0/tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x406e19c0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x40821020" loc="53:/opt/tinyos-2.1.0/tos/interfaces/ParameterInit.nc">
        <documentation loc="44:/opt/tinyos-2.1.0/tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402eebd0"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x406e19c0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x406e1eb8" loc="53:/opt/tinyos-2.1.0/tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x406e19c0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="42:/opt/tinyos-2.1.0/tos/lib/timer/LocalTime.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x4083d310" loc="42:/opt/tinyos-2.1.0/tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x4083d310"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x4083d7f0" loc="50:/opt/tinyos-2.1.0/tos/lib/timer/LocalTime.nc">
        <documentation loc="44:/opt/tinyos-2.1.0/tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401b7400"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="46:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40839998" loc="46:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40839998"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x40839b00" loc="46:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40839b00"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x40832010" loc="53:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
        <documentation loc="48:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40839b00"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x40832a38" loc="65:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
        <documentation loc="62:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
          <long>&#10; Cancel a pending overflow interrupt.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x40832538" loc="60:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
        <documentation loc="55:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x40832e60" loc="71:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
        <documentation loc="67:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="45:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x4083bbd0" loc="45:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x4083bbd0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x4083bd38" loc="45:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4083bd38"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x40835010" loc="98:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
        <documentation loc="94:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4083bd38"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x40838cd0" loc="67:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
        <documentation loc="64:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x408379b0" loc="92:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
        <documentation loc="79:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4083bd38"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4083bd38"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x40837660" loc="92:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4083bd38"/></type-var>
          </variable>
          <variable name="dt" ref="0x40837850" loc="92:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4083bd38"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x40837158" loc="77:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
        <documentation loc="70:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x408354a0" loc="105:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
        <documentation loc="100:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4083bd38"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x40838390" loc="55:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
        <documentation loc="48:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4083bd38"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x40838238" loc="55:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4083bd38"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40838870" loc="62:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
        <documentation loc="57:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControl" ref="0x4084f368" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4033dc78"/>
            <typename><typedef-ref name="Atm128TimerControl_t" ref="0x4033dea0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x4084e930" loc="44:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="43:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4033fcd0"/>
            <typename><typedef-ref name="Atm128_TIFR_t" ref="0x4033fef8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x4084fe40" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40341590"/>
            <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x403417b8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x4084e480" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40341590"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x403417b8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x4084e328" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40341590"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x403417b8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x4084d010" loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4033fcd0"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x4033fef8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x4084ede0" loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4033fcd0"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x4033fef8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x4084f988" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4033dc78"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x4033dea0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x4084f830" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4033dc78"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x4033dea0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerAsync" loc="15:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
      <documentation loc="11:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="controlBusy" ref="0x408614a8" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="34:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; @return TRUE if TCCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareBusy" ref="0x40861978" loc="44:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; @return TRUE if OCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTimer0Asynchronous" ref="0x40861090" loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="29:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Turn on timer 0 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x40861e38" loc="50:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; @return TRUE if TCNT0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x408645a0" loc="21:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="17:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Read timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer0 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4033be08"/>
            <typename><typedef-ref name="Atm128Assr_t" ref="0x4033a048"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x40864b90" loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Set timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer0 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4033be08"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x4033a048"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x40864a38" loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4033be08"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x4033a048"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x4084dde0" loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4084dde0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x40866d20" loc="65:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x4084ccb8" loc="49:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="48:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x4084c2f0" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4084dde0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x408660f8" loc="53:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="52:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x408651a8" loc="71:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x4084c878" loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4084dde0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x4084c720" loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4084dde0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x40866500" loc="56:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="55:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x408668f8" loc="59:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="58:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x408573e8" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x408573e8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x40854ba0" loc="89:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="88:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x40854310" loc="78:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x408578d8" loc="52:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="48:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x408573e8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0x40853168" loc="95:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="91:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x40853010" loc="95:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x408535f8" loc="101:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401b6708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x408566c8" loc="66:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="65:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x408562a8" loc="61:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x40854778" loc="84:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402e5b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40857e50" loc="58:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="54:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x408573e8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x40857cf8" loc="58:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x408573e8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x40856ad0" loc="69:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="68:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40856ec8" loc="72:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="71:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="38:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="34:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0x409193f0" loc="50:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="47:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x404e4330"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0x40919c60" loc="60:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="57:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
          <long>&#10; Notification that the address or group settings changed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0x40919860" loc="55:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="52:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x404e40d0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0x4091ce90" loc="45:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="40:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x404e40d0"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x404e4330"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0x4091cb28" loc="45:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x404e40d0"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x4091cd30" loc="45:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x404e4330"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
